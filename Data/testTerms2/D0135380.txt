#敏捷开发/gi的/ude16/nz个/q实战经验/n
在/p大型/b企业/gi中/f经常/d是/vshi各种/rz软件开发/nz模式/gi混用/vn，/w一些/m采用/v敏捷开发/gi，/w一/nz些/q则/d是/vshi采用/v传统/n的/ude1瀑布/gi式/k或/crup/nz（/w统一/vn软件开发/nz过程/gi）/w。/w敏捷开发/gi，/w相对/d传统/n软件开发/nz模式/gi，/w它/rr主要/b是/vshi针对/gi快速/d变化/gi的/ude1需求/gi，/w不断/d优化/gi管理/gi流程/gi，/w最终/d推出/v优质/b软件/gi。/w原文/n作者/nntulferiksson/nz，/w是/vshi一家/n在线/vn问题/gi跟踪/vn软件公司/nis的/ude1创始人/nnt之一/rz，/w他/rr是/vshi敏捷开发/gi的/ude1忠实/a粉丝/nf，/w已经/d进行/vn了/ule多年敏捷/nz开发/gi的/ude1实践/gi。/w下面/f内容/gi主要/b是/vshi作者/nnt根据/p自己/rr多/a年/qt经历/gi进行/vn的/ude1经验总结/nz。/w1./nz快速/d迭代/gi相对/d那种/r半年一/nz次/qv的/ude1大/a版本/n发布/gi来说/uls，/w小/a版本/n的/ude1需求/gi、/w开发/gi和/cc测试/gi更加/d简单/a快速/d。/w一/nz些/q公司/nis，/w一/nz年仅/nz发布/gi仅/d2/nz~/nz3/nz个/q版本/n，/w发布/gi流程/gi缓慢/a，/w它们/rr仍/d采用/v瀑布/gi开发模式/gi，/w更/d严重/a的/ude1是/vshi对/p敏捷开发/gi模式/gi存在/v误解/gi。/w由/p一年/nz发布/gi2/nz个/q版本/n转到/v一个月/nz发布/gi2/nz个/q版本/n，/w这/rzv也/d不太可能/i。/w但是/c现在/t来看/u，/w快速/d迭代/gi已经/d成为事实/i标准/gi，/w关键/n是/vshi要/v比/p目前/t的/ude1版本/n发布/gi速度/n更快/d一/nz些/q。/w快速/d迭代/gi，/w可以/v迫/vg团队/gi不断/d优化/gi流程/gi、/w提升/gi工作效率/nz，/w不要/d在/p无足轻重/vl的/ude1事情/n上/f浪费时间/nz。/w如果/c离/vdeadline/nz还有/v6/nz个/q月/n，/w那么/c整个/b工作/gi节奏/n必然/d悠哉/nz。/w如果/c每月/r发布/gi一个/mq版本/n，/w那么/c较/d以前/f效率/gi必然/d会/v更高/d。/w如果/c发布/gi周期/n过长/n，/w导致/gi无法/v尽快/d发现/v用户/gi需求/gi，/w进而/c无法/v及时/ad改进/gi产品/gi。/w2./nz让/v测试人员/n和/cc开发者/gi参与/gi需求/gi讨论/gi需求/gi讨论/gi以/p研讨组/nz的/ude1形式/gi展开/v最/d有效率/n。/w研讨组/nz，/w需要/v包括/v测试人员/n和/cc开发者/gi，/w这样/rzv可以/v更加/d轻松/a定义/gi可/v测试/gi的/ude1需求/gi，/w将/d需求/gi分组/gi并/cc确定/v优先级/n。/w同时/c，/w该种/r方式/n也/d可以/v充分利用/n团队/gi成员/nnt间/f的/ude1互补/gi特性/gi。/w如此/rzv确定/v的/ude1需求/gi往往/d比/p开/v需求/gi讨论/gi大会/gi的/ude1形式/gi效率/gi更高/d，/w大家/rr更/d活跃/a，/w参与感/n更/d强/a。/w确定/v需求/gi时/qt，/w不要/d过度/d盯/v在/p细节/gi上/f。/w需求/gi报告/gi过于/d详细/gi，/w就是/v一种/nz不/d敏捷/gi的/ude1习惯/n，/w还/d浪费/gi大家/rr的/ude1时间/gi。/w当然/d，/w不能/v错过/v好/a点子/n，/w但/c就是/v不要/d太细/n，/w因为/c项目/gi真正/d实施/gi起来/vf时/qt需求/gi将/d会/v产生/v很大/d的/ude1变动/vn。/w3./nz编写/gi可/v测试/gi的/ude1需求/gi文档/gi开始/v就要/d用/p“/w用户/gi故事/gi”/w（/wuserstory/nz）/w的/ude1方法/gi来/vf编写/gi需求/gi文档/gi。/w这种/r方法/gi，/w可以/v让/v我们/rr将/d注意力/n放在/v需求/gi上/f，/w而/cc不是/c解决方法/gi和/cc实施/gi技术/gi上/f。/w过早/d的/ude1提及/v技术/gi实施方案/nz，/w会/v降低/v对/p需求/gi的/ude1注意力/n。/w规划/gi业务/gi需求/gi，/w可以/v采用/v“/w3/nzw/nz模板/gi”/w，/w也/d就是/v：/w谁/ry（/wwho/nz）/w是/vshi什么/ry（/wwhat/nz）/w为什么/ryv（/wwhy/nz）/w上面/f的/ude13/nzw/nz实际上/d就是/v描述/gi了/ule相关/vn利益者/n是/vshi谁/ry，/w他们/rr想要/v什么/ry，/w他们/rr为什么/ryv有/vyou这种/r需求/gi。/w下面/f举/v一/nz例子/gi进行/vn说明/v：/w谁/ry（/wwho/nz）/w是/vshi什么/ry（/wwhat/nz）/w为什么/ryv（/wwhy/nz）/w用户/gi希望/v借助/v一个/mq应用程序/nz在/p不同/a服务器/gi间/f传输/gi文件/gi为了/p存储/gi项目/gi数据/gi为了/p更加/d接近/v“/w用户/gi故事/gi”/w，/w我们/rr可以/v改写/v为/p：/w谁/ry（/wwho/nz）/w是/vshi什么/ry（/wwhat/nz）/w为什么/ryv（/wwhy/nz）/w消费者/n//nz用户/gi想/v将/d归档/vn过程/gi数字化/vn为了/p增强/v沟通/gi，/w提高/v分享/gi效率/gi敏捷/gi项目/gi中/f编写/gi用户/gi故事/gi有/vyou一个/mq常用/a模板/gi：/w作为/p一名/nz[/nz用户/gi类型/gi]/nz，/w我/rr想要/v[/nz需求/gi]/nz，/w以/p便于/v[/nz原因/n]/nz。/w应用/gi到/v这个/rz例子/gi，/w就是/v：/w作为/p一名/nz用户/gi，/w我/rr想要/v将/d归档/vn程序/gi数字化/vn，/w以/p便于/v增强/v沟通/gi、/w提高/v分享/gi效率/gi。/w多数/a情况下/nz，/w需求/gi内容/gi需要/v更加/d充实/v和/cc详细/gi，/w这/rzv一步/nz要/v放到/v后面/f做/v，/w开始/v不要/d这样/rzv。/w用户/gi故事/gi的/ude1方法/gi有时/d会/v因/p过于/d简短/a、/w不断/d重复/gi而/cc受到/v批评/vn。/w这里/rzs我们/rr必须/d明白/v：/w需求/gi文档/gi不是/c散文/n或/c诗歌/n，/w应该/v清晰/a、/w简明/a地/ude2描述/gi用户/gi需求/gi；/w需求/gi文档/gi的/ude1重点/n也/d在于/v此/rzs，/w不要/d管/v形式/gi多变/z或/c内容/gi是否/v重复/gi这样/rzv的/ude1问题/gi。/w4./nz多/a沟通/gi，/w尽量减少/i文档/gi任何/rz项目/gi中/f，/w沟通/gi都/d是/vshi一个/mq常见/a的/ude1问题/gi。/w好/a的/ude1沟通/gi，/w是/vshi敏捷开发/gi的/ude1先决条件/n。/w在/p圈子/n里面/f混得/nz越/d久/a，/w越/d会/v强调/v良好/a高效/b的/ude1沟通/gi的/ude1重要性/n。/w团队/gi要/v确保/v日常/b的/ude1交流/gi，/w面对面/dl沟通/gi比/p邮件/n强/a得/ude3多/a。/w敏捷开发/gi鼓励/gi日常/b的/ude1协调会议/n和/cc碰头/vi会/v，/w5/nz~/nz7/nz人/n参与/gi的/ude1会议/gi尽量/d控制/vn在/p10/nz分钟/qt内/f。/w碰头/vi时/qt，/w要/v过/uguo一/nz遍/qv昨天/t完成/v了/ule什么/ry，/w今天/t要/v做/v什么/ry，/w哪些/ry问题/gi仍/d待/vi讨论/gi。/w可以/v用/pburndownchart/nz（/w燃尽图/nz）/w来/vf形象/n展示/gi工作进度/n。/w每次/r迭代/gi的/ude1时候/n也/d都/d要/v开/v一个/mq计划/gi会议/gi和/cc评审/gi会议/gi，/w一般/ad需要/v的/ude1时间/gi可能会/nz长/a些/q，/w比如/v半天/mq。/w这些/rz会议/gi的/ude1目的/gi就是/v对/p工作/gi查/v缺/v补漏/nz。/w评审/gi会议/gi很/d重要/a，/w传统开发/gi模式/gi往往/d略过/nz该/rz环节/gi，/w导致/gi一/nz些/q错误做法/i不断/d重复/gi，/w好/a的/ude1做法/n无法/v推广/gi。/w开会/vi时/qt，/w可以/v将/d原先/d的/ude1分组/gi打散/v，/w让/v整个/b团队/gi都/d参与/gi到/v项目/gi的/ude1需求/gi讨论/gi和/cc测试/gi中/f来/vf，/w这样/rzv可以/v突出/a成员/nnt个人/n，/w让/v大家/rr更/d乐意/v参与/gi。/w5./nz做好/v产品/gi原型/gi建议/gi使用/gi草图/n和/cc模型/gi来/vf阐明/v用户界面/gi。/w并/cc不是/c所有人/n都/d可以/v理解/gi一份/nz复杂/a的/ude1文档/gi，/w但/c人/n人/n都会/n看图/v。/w一个/mq常见/a的/ude1问题/gi是/vshi软件/gi新的/a功能/gi与/cc用户/gi想要/v的/ude1不/d一致/a。/w为了/p避免/v这/rzv一/nz问题/gi，/w可以/v模拟/gi真实/a操作/gi，/w改进/gi模拟/gi操作过程/l中/f难以/d理解/gi和/cc不/d清楚/a的/ude1操作/gi行为/n。/w6./nz及早/d考虑/v测试/gi及早/d地/ude2考虑/v测试/gi在/p敏捷开发/gi中/f很/d重要/a。/w传统/n的/ude1软件开发/nz，/w测试用例/gi很晚/d才/d开始/v写/v，/w这/rzv导致/gi过晚/nz发现/v需求/gi中/f存在的问题/gi，/w使得/vi改进/gi成本/n过/uguo高/a。/w较早/d地/ude2开始/v编写/gi测试用例/gi，/w当/p需求/gi完成/v时/qt，/w可以/v接受/gi的/ude1测试用例/gi也/d基本/a一块/s完成/v了/ule。/w敏捷开发/gi中/f一个/mq常见问题/gi就是/v开发者/gi没有/v对/p已有/v的/ude1代码/gi库/n进行/vn充分/ad的/ude1回归/gi测试/gi。/w迭代/gi周期/n很短/d，/w从/p开始/v到/v交付/v就是/v4/nz周/qt的/ude1时间/gi，/w这样/rzv可以/v对/p迭代/gi的/ude1设计/gi、/w实现/gi和/cc底层/n测试/gi一块/s进行/vn回归/gi测试/gi。/w一系列/b迭代/gi之后/f，/w可以/v只/d针对/gi测试/gi活动/gi再/d补充/vn一个/mq迭代/gi。/w这个/rz迭代/gi可以/v将/d重点/n放在/v系统测试/gi、/w与/cc其他/rzv系统/gi的/ude1集成度/n、/w性能/gi等/udeng方面/n。/w敏捷开发/gi过程/gi中/f，/w可能会/nz导致/gi过/uguo少/a的/ude1测试/gi文档/gi。/w如果/c迭代/gi周期/n为/p1/nz个/q月/n左右/f，/w可以/v不必/d对/p测试/gi文档/gi过于/d要求/n，/w但要/c制定/gi好/a测试/gi策略/gi。/w最后/f可能/v大多/d数/n公司/nis或/c团队/gi还/d没有/v开始/v尝试/v敏捷开发/gi，/w不过/c可以/v开始/v从/p点滴/n做起/v，/w比如/v开/v碰头/vi会/v、/w为/p项目管理/gi采用/v一个/mq更加/d高效/b的/ude1管理工具/nz等等/udeng。/w最后/f，/w希望/v上面/f的/ude1建议/gi能够/v为/p大家/rr的/ude1软件开发/nz管理/gi带来/v帮助/v。/w