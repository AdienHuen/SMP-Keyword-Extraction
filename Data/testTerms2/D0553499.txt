#设计模式/nz
设计模式/nz设计模式/nz是/vshi用来/v解决/v编程/gi某些/rz特定/b问题/gi./nz单例模式/gi什么/ry时候/n使用/gi单例模式/gi?/nz在/p一个/mq工程/n中/f,/nz有/vyou一/nz些/q类/gi只/d需要/v一个/mq实例/gi变量/gi,/nz我们/rr就/d可以/v将/d这些/rz类/gi设计/gi成单/nz例/n模式/gi单例模式/gi的/ude1作用/gi当一个/nz被/pbei设计/gi成单/nz例/n模式/gi时/qt,/nz由/p构造/n出/vf的/ude1实例/gi对象/gi之于/c其他/rzv类/gi来讲/uls为/p全局/n实例/gi对象/gi,/nz即/v每个/r类/gi中/f由/p构造/n出/vf的/ude1实例/gi对象/gi都/d为/p相同/a的/ude1对象/gi在/poc/gi中/f如何/ryv将/d一个/mq类/gi设计/gi成单/nz例/n模式/gi要/v在/p被/pbei设计/gi成单/nz例/n的/ude1类/gi的/ude1./nzh/nz文件/gi中/f声明/gi一个/mq构造单/nz例/n方法/gi,/nz如/v:/w实现/gi该/rz方法/gi观察者模式/gi什么/ry是/vshi观察者模式/gi在/p工程/n中/f,/nz一/nz些/q类/gi去/vf观察/gi,/nz当/p发生变化/l时/qt,/nz这些/rz观察/gi类/gi就/d会/v收到/v消息/n,/nz做出/v相应/vi反应/vn./nz什么/ry时候/n使用/gi观察者模式/gi?/nz当一个/nz类/gi需要/v发送/gi笑死/nz给/p多/a个/q类/gi的/ude1时候/n,/nz酒桶/n观察者模式/gi观察者模式/gi的/ude1作用/gi?/nz一/nz对/p多/a的/ude1发送/gi消息/noc/gi中/f观察者模式/gi的/ude1设计/gi基础/gi:/wkvc/nz//nzkvokvc/nz的/ude1由来/n:/w在/pios/gi2.0/nz之前/f,/nz并/cc没有/v属性/gi来/vf访问/gi类/gi中/f实例/gi变量/gi,/nz那时候/nz开发人员/n使用/gi的/ude1方式/n来/vf访问/gi类/gi中的/v实例/gi变量/gi,/nz即/v方式/n./nz使用/gikvc/nz来/vf访问/gi类/gi中/f实例/gi变量/gi:/wkvo/nz的/ude1由来/n:/w在/p变成/v过程/gi中/f,/nz我们/rr经常/d需要/v判断/gi目标/gi是否/v发生/v改变/v,/nz以便/d及时/ad的/ude1作出/v对应/vi的/ude1处理/vn./nz此时/r苹果公司/nt就/d提供/v一种/nz策略/gi,/nz即/v提供/v了/ule技术/gi./nz其中/rz是/vshi基于/p实现/gi./nzkvo/nz的/ude1实现/gi:/w /x1./nz /x注册/gi成为/v观察者/nz /x2./nz /x观察者/nz定义/gikvo/nz回调/gi /x3./nz /x移除/v观察者/nz