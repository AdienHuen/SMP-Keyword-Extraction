#围绕/v着/uzhe内存数据库/gi的/ude14/nz个/q流言/gi
摘要/n：/wyiftach /nz表示/v，/w历经/v数/n年/qt，/w内存数据库/gi的/ude1稳定性/n已/d得到/v了/ule长足/a的/ude1发展/gi，/w开发者/gi应该/v理智/n地/ude2看待/v这个/rz领域/gi所/usuo存在/v的/ude1流言/gi，/w比如/v内存计算/gi是/vshi不/d可靠/a和/cc不/d一致/a等/udeng。/w  /x【/w编者按/n】/w作者/nnt yiftach shoolman /nz是/vshi redis labs /nz的/ude1联合/gi创始人/nnt兼/v cto/nz，/w拥有/v着/uzhe丰富/a的/ude1实践经验/nz。/wyiftach /nz之前/f曾/d是/vshi crescendo networks/nz（/w后/f被/pbei f/nz5/nz /x收购/gi）/w的/ude1总裁/nnt、/w创建者/n兼/v cto/nz，/w更早/nz还是/c native networks /nz的/ude1技术/gi副总裁/nnt。/w在/p本文/r中/f，/wyiftach /nz直述/nz了/ule当下/d开发者/gi对/p内存数据库/gi所/usuo存在/v的/ude1偏见/n，/w并/cc提出/v了/ule一/nz些/q技术/gi选型/n参考/gi意见/gi，/w本文/r系/v  /x工程师/gi编译/gi整理/gi。/w时/qt下/f，/w我们/rr正处于/v一个/mq日新月异/vl的/ude1时代/gi，/w而/cc优秀/gi应用/gi的/ude1响应/v时间/gi往往/d需要/v被/pbei控制/vn在/p0.1/nz秒/qt内/f。/w这/rzv也/d意味着/v，/w如果/c可/v接受/gi网络通信/gi时间/gi为/p50/nz毫秒/q，/w那么/c开发者/gi必须/d在/p剩余/vn的/ude150/nz毫秒/q内/f处理/vn数据/gi并/cc进行/vn响应/v。/w要/v实现/gi这一点/nz毫无疑问/dl会/v需求/gi毫秒/q级/q的/ude1数据库/gi响应/v时间/gi，/w在/p同时/c支撑/v上/f万/nz个/q请求/gi的/ude1场景/gi中/f更是如此/l，/w而/cc这样/rzv的/ude1需求/gi当下/d只有/c少数/mq几/d个/q灵活度/nz极高/d、/w功能齐全/i的/ude1数据库/gi才能/n满足/v。/w在/p大数据处理/gi情景/n中/f，/w洞见/nz必须/d被/pbei快速/d收集/v并/cc做出/v决策/gi，/w而/cc在/p没有/v复杂/a优化/gi或/c折中/vn的/ude1情况下/nz，/w内存数据库/gi可以/v在/p数秒/nz内/f完成/v以往/t传统/n数据库/gi数/n小时/n或者/c数/n分钟/qt的/ude1工作/gi。/w尽管如此/dl，/w当下/d在/p内存数据库/gi领域/gi仍然/d存在/v诸/rz多/a流言/gi，/w大量人/nz仍然/d认为/v内存数据库/gi不/d可靠性/gi、/w不/d一致/a并且/c伴随/v着/uzhe昂贵/a的/ude1开销/n。/w然而/c最重要/nz的/ude1是/vshi，/w还/d有人/r认为/v只要/c把/pba数据库/gi放到/v内存/gi中/f就/d可以/v获得/v所需/nz的/ude1性能/gi。/w流言/gi1/nz：/w所有/b内存数据库/gi都/d很快/d答案/gi显然/ad是否/v定/v的/ude1。/w即使/c当下/d大部分/n内存数据库/gi都/d使用/gi非常/d高效/b的/ude1语言/gi编写/gi，/w比如/v c /nz和/cc c/nz+/nz+/nz，/w但是/c它们/rr仍然/d无法/v得到/v所需/nz的/ude1响应/v需求/gi，/w这/rzv主要/b基于/p以下几点/l原因/n：/w1./nz /x在/p不同/a数据库/gi中/f，/w处理/vn命令/gi的/ude1复杂性/gi是/vshi不同/a的/ude1。/w在/p高性能/gi数据库/gi中/f，/w处理/vn命令/gi会/v在/p最小/a复杂度/gi下/f执行/v。/w最/d直接/ad的/ude1影响/gi就是/v就是/v，/w在/p数据/gi集/q不断/d增大/v的/ude1情况下/nz，/w你/rr可能/v需要/v一直/d优化/gi查询/gi时间/gi。/w2./nz /x查询/gi效率/gi同样/d不同/a。/w有些/rz时候/n，/w数据库/gi会/v把/pba全部/m加载/gi进/vf内存/gi的/ude1数据/gi当做/v单一/gi的/ude1 blob/nz（/w类似/a memcached /nz的/ude1缓存机制/gi）/w，/w这/rzv显然/ad是/vshi没有/v效率/gi的/ude1―/w―/w数据库/gi应该/v具备/v分散/a存储/gi和/cc查询/gi值/n的/ude1能力/gi，/w以及/cc有效地/nz节约/v网络/gi和/cc内存/gi开销/n，/w从而/c显著/ad地/ude2降低/v应用程序/nz处理/vn时间/gi。/w3./nz /x单线程/gi和/cc多线程/gi架构/gi的/ude1权衡/v。/w多线程/gi会/v尽可能/d的/ude1利用/v计算/gi能力/gi，/w无需/v数据库/gi用户/gi做/v任何/rz处理/vn，/w但是/c这个/rz解决方案/gi同样/d需要/v做/v大/a量/n的/ude1内部管理/n和/cc同步/gi，/w从而/c消耗/gi大量/m的/ude1计算/gi资源/gi。/w在/p多线程/gi模式/gi下/f，/w锁/v开销/n可能会/nz大幅度降低/l数据库/gi性能/gi。/w单线程/gi使用/gi了/ule一个/mq非常简单/nz的/ude1执行/v模型/gi，/w在/p这个/rz解决方案/gi中/f不存在/ns锁/v的/ude1问题/gi，/w同时/c也/d只/d会/v耗费/v少许/mq的/ude1计算/gi性能/gi，/w但/c毫无疑问/dl的/ude1是/vshi，/w计算/gi资源/gi的/ude1管理/gi将/d从/p数据库/gi移交/v给/p用户/gi。/w理想/n的/ude1解决方案/gi肯定/v是/vshi让/v用户/gi尽可能少/d地/ude2做/v资源/gi管理/gi，/w因为/c数据库管理/gi本来/d就是/v个/q轻度/b资源/gi密集型/gi工作/gi。/w4./nz /x零/nz共享/gi vs/nz./nz /x共享/gi vs/nz./nz /x共享/gi一切/rz。/w共享/gi会/v影响/gi到/v系统/gi的/ude1扩展性/n。/w在/p数据库/gi体积/n不断/d增长/gi的/ude1同时/c，/w性能/gi也/d必须/d时刻/n满足/v实例/gi的/ude1需求/gi。/w零共享/nz模型/gi让/v所有/b实体/n都/d以/p独立/a单元/n的/ude1形式/gi存在/v，/w从而/c避免/v了/ule处理/vn暴增/nz后/f的/ude1通信/gi开销/n，/w实现/gi线性/gi扩展/gi能力/gi。/w5./nz /x通过/p避免/v网络/gi方面/n任务/gi和/cc减少/v tcp /nz协议/gi开销/n，/w /x零延/nz时/qt分布式/gi代理/gi等/udeng内置/vn加速/gi组件/gi可以/v显著/ad地/ude2提升/gi数据库/gi性能/gi。/w在/p某些/rz情况下/nz，/w代理/gi也/d可能/v与/cc数据库/gi通信/gi，/w以/p确定/v其/rz是否/v作为/p主机/gi上/f服务/gi远程/gi客户端/gi的/ude1另一个/nz本地/gi客户端/gi进程/gi。/w如果/c吞吐量/gi和/cc延时/v是/vshi主要/b目标/gi，/w那么/c机构/n很/d显然/ad需要/v选择/gi一个/mq可以/v实现/gi毫秒/q级/q延时/v并/cc最小化/nz服务器需求/gi的/ude1数据库/gi。/w流言/gi2/nz：/w内存计算/gi是/vshi不/d可靠/a和/cc不/d一致/a的/ude1大多/d数/n nosql /nz数据库/gi（/w不/d只是/d内存数据库/gi）/w在/p提交/gi数据/gi到/v磁盘/gi或者/c副本/n之前/f都/d为/p客户端/gi提供/v了/ule acknowledgements /nz（/wack/nz）/w。/w因此/c，/w这里/rzs很可能会/nz造成/v数据/gi不/d一致/a的/ude1情况/n。/wcap /nz定理/gi标明/v任何/rz分布式计算机系统/nz都/d不能/v同时/c具备/v一致性/gi、/w可用性/gi和/cc分区/gi容错性/nz。/w不同/a的/ude1数据库/gi会/v选择/gi不同/a的/ude1类型/gi，/w具体/a情形/n如下/vi：/w选择/gi cp /nz模型表示/n开发者/gi不用/d去/vf关心/v一致性/gi，/w但是/c在/p网络/gi分割/gi事件/gi中/f写/v命令/gi则/d是/vshi不/d允许/v的/ude1。/w如果/c选择/gi ap /nz模型/gi则/d意味着/v数据库/gi对/p读写/gi一直/d可用/v，/w但是/c开发者/gi在/p写/v应用程序/nz代码/gi时/qt就/d需要/v考虑/v一致性/gi问题/gi，/w而/cc不是/c期望/vn数据库/gi去/vf完成/v这个/rz操作/gi。/w因此/c，/w请/v根据/p使用场景/gi来/vf选择/gi合适/a的/ude1数据库/gi模型/gi。/w流言/gi3/nz：/w内存计算/gi很难/d扩展/gi扩展/gi共有/v两/nz个/q途径/n。/w首先/d通过/p给/p托管/vn数据库/gi的/ude1服务器/gi纵向/n扩展/gi，/w比如/v增加/v更多/ad的/ude1 cpu /nz和/cc内存/gi；/w其次/c，/w通过/p向/p内存/gi集群/gi中/f添加/gi更多/ad的/ude1主机/gi实现/gi横向/n扩展/gi。/w在/p许多/m数据库/gi中/f，/w你/rr可以/v在/p同一个/b节点/gi上/f运行/gi同一个/b数据集/nz的/ude1多/a个/q分片/gi，/w因此/c可以/v通过/p更/d有效率/n的/ude1计算/gi资源/gi利用/v来/vf延缓/v扩展/gi需求/gi。/w同样/d，/w这里/rzs也/d可以/v将/d多/a个/q服务器/gi的/ude1内存/gi整合/gi起来/vf成为/v一个/mq共享内存/nz池/ng，/w从而/c突破/gi单机/n内存大小/nz限制/vn。/w现/tg下/f，/w很/d多/a内存数据库/gi同时/c允许/v这/rzv两/nz种/q方法/gi的/ude1扩展/gi，/w通过/p动态/gi的/ude1增加/v分配/gi给/p数据库/gi的/ude1核心/n和/cc内存/gi节点/gi数量/n来/vf最大化/v应用程序/nz的/ude1响应/v能力/gi。/w流言/gi4/nz：/w内存计算/gi是/vshi昂贵/a的/ude1任何/rz需要/v快速/d提升/gi吞吐量/gi的/ude1应用/gi都/d面临/v着/uzhe相同/a的/ude1问题/gi：/w「/nz一定/b等级/n的/ude1吞吐量/gi究竟/d需要/v花/n多少/ry钱/n」/nz。/w举/v个/q例子/gi，/w在/p1500/nz万/nz ops /nz情景/n下/f，/w运行/gi在/p单/b amazon ec/nz2/nz /x实例/gi上/f的/ude1内存数据库/gi会/v比/p非/b内存数据库/gi便宜/a，/w但是/c如果/c使用/gi数/n百台/nz服务器/gi达到/v同样/d的/ude1效果/gi结果/n可能/v就/d会/v截然/d相反/vi。/w如果/c数据/gi集/q规模/gi是/vshi tb /nz级别/n，/w内存/gi的/ude1花费/v很/d显然/ad会/v成为/v问题/gi，/w然而/c当下/d已经/d有/vyou使用/gi闪存/nz扩展/gi内存/gi的/ude1技术/gi存在/v，/w从而/c降低/v花费/v。/w但/c需要/v注意/v的/ude1是/vshi，/w使用/gi闪存/nz来/vf扩展/gi内存/gi势必会/n影响/gi到/v系统/gi性能/gi，/w因此/c这里/rzs理想/n的/ude1技术/gi是/vshi控制/vn闪存/nz和/cc内存/gi的/ude1比例/n以/p达到/v一个/mq理想/n的/ude1性价比/nz。/w综上所述/c，/w根据/p实际/n场景/gi来/vf选择/gi合适/a的/ude1数据库/gi技术/gi将/d会/v大幅度提高/l资源/gi利用效率/n。/w同时/c，/w新型/gi数据库/gi出现/v已有/v很长/d一段时间/nz，/w因此/c抛弃/v不必要/a的/ude1成见/n才能/n让/v工作/gi事半功倍/vl。/w原文/n链接/gi：/woneapm /nz是/vshi领域/gi的/ude1新兴/gi领军/d企业/gi，/w能/v帮助/v企业/gi用户/gi和/cc开发者/gi轻松/a实现/gi：/w缓慢/a的/ude1程序代码/nz和/cc sql /nz语句/gi的/ude1实时/n抓取/gi。/w想/v阅读/gi更多/ad技术/gi文章/gi，/w请/v访问/gi /x。/w