#AD/nz的/ude1版本控制/gi功能/gi是/vshi什么/ry
1.1/nz /x起步/vi /x-/nz /x关于/p版本控制/gi关于/p版本控制/gi什么/ry是/vshi版本控制/gi？/w我/rr为什么/ryv要/v关心/v它/rr呢/y？/w版本控制/gi是/vshi一种/nz记录/gi一个/mq或/c若/c干/v文件/gi内容/gi变化/gi，/w以便/d将来/t查阅/v特定/b版本/n修订/v情况/n的/ude1系统/gi。/w在/p本书/gi所/usuo展示/gi的/ude1例子/gi中/f，/w我们/rr仅/d对/p保存/gi着/uzhe软件/gi源代码/gi的/ude1文本/gi文件/gi作/v版本控制/gi管理/gi，/w但/c实际上/d，/w你/rr可以/v对/p任何/rz类型/gi的/ude1文件/gi进行/vn版本控制/gi。/w如果/c你/rr是/vshi位/q图形/gi或/c网页/gi设计师/nnt，/w可能会/nz需要/v保存/gi某/rz一幅/nz图片/gi或/c页面/gi布局/gi文件/gi的/ude1所有/b修订/v版本/n（/w这/rzv或许/d是/vshi你/rr非常/d渴望/v拥有/v的/ude1功能/gi）/w。/w采用/v版本控制系统/gi（/wvcs/nz）/w是/vshi个/q明智/a的/ude1选择/gi。/w有/vyou了/ule它/rr你/rr就/d可以/v将/d某个/rz文件/gi回溯到/l之前/f的/ude1状态/gi，/w甚至/d将/d整个/b项目/gi都/d回退/gi到/v过去/vf某个/rz时间/gi点/gi的/ude1状态/gi。/w你/rr可以/v比较/gi文件/gi的/ude1变化/gi细节/gi，/w查出/v最后/f是/vshi谁/ry修改/gi了/ule哪个/ry地方/n，/w从而/c找出/v导致/gi怪异/a问题/gi出现/v的/ude1原因/n，/w又是/c谁/ry在/p何时/ryt报告/gi了/ule某个/rz功能/gi缺陷/gi等等/udeng。/w使用/gi版本控制系统/gi通常/d还/d意味着/v，/w就算/d你/rr乱来/vi一气把/nz整个/b项目/gi中的/v文件/gi改/v的/ude1改删/v的/ude1删/v，/w你/rr也/d照样/d可以/v轻松/a恢复/gi到/v原先/d的/ude1样子/n。/w但/c额外/b增加/v的/ude1工作量/n却/d微乎其微/vl。/w许多人/nz习惯/n用/p复制/gi整个/b项目/gi目录/gi的/ude1方式/n来/vf保存/gi不同/a的/ude1版本/n，/w或许/d还/d会/v改名/vi加上/v备份/gi时间/gi以示/nz区别/gi。/w这么/rz做/v唯一/b的/ude1好处/gi就是/v简单/a。/w不过/c坏处/n也/d不/d少/a：/w有时候/d会/v混淆/v所在/n的/ude1工作/gi目录/gi，/w一旦/d弄错/nz文件/gi丢/v了/ule数据/gi就/d没法/v撤销/v恢复/gi。/w为了/p解决/v这个/rz问题/gi，/w人们/n很久以前/nz就/d开发/gi了/ule许多种/nz本地/gi版本控制系统/gi，/w大多/d都/d是/vshi采用/v某种/rz简单/a的/ude1数据库/gi来/vf记录/gi文件/gi的/ude1历次/b更新/gi差异/n（/w见/v图/gi /x1/nz-/nz1/nz）/w。/w图/gi /x1/nz-/nz1./nz /x本地/gi版本控制系统/gi其中/rz最/d流行/v的/ude1一种/nz叫做/v rcs/nz，/w现今/t许多计算机系统/nz上都/ns还/d看得/v到/v它/rr的/ude1踪影/n。/w甚至/d在/p流行/v的/ude1 mac os x /nz系统/gi上/f安装/gi了/ule开发者/gi工具包/n之后/f，/w也/d可以/v使用/gi rcs /nz命令/gi。/w它/rr的/ude1工作原理/gi基本上/d就是/v保存/gi并/cc管理文件/n补丁/gi（/wpatch/nz）/w。/w文件/gi补丁/gi是/vshi一种/nz特定/b式/k的/ude1文本/gi文件/gi，/w记录/gi着/uzhe对应/vi文件/gi修订/v前后/f的/ude1内容/gi变化/gi。/w所以/c，/w根据/p每次/r修订/v后/f的/ude1补丁/gi，/wrcs /nz可以/v通过/p不断/d打补丁/nz，/w计算/gi出/vf各个/rz版本/n的/ude1文件/gi内容/gi。/w接下来/vl人们/n又/d遇到/v一个/mq问题/gi，/w如何/ryv让/v在/p不同/a系统/gi上/f的/ude1开发者/gi协同工作/n？/w于是/cc，/w集中化/vn的/ude1版本控制系统/gi（/w centralized version control systems/nz，/w简称/v cvcs /nz）/w应运而生/vl。/w这类/r系统/gi，/w诸如/v cvs/nz，/wsubversion /nz以及/cc perforce /nz等/udeng，/w都/d有/vyou一个/mq单一/gi的/ude1集中管理/nz的/ude1服务器/gi，/w保存/gi所有/b文件/gi的/ude1修订/v版本/n，/w而/cc协同工作/n的/ude1人们/n都/d通过/p客户端/gi连到/v这/rzv台/q服务器/gi，/w取出/v最新/a的/ude1文件/gi或者/c提交/gi更新/gi。/w多/a年/qt以来/f，/w这/rzv已/d成为/v版本控制系统/gi的/ude1标准/gi做法/n（/w见/v图/gi /x1/nz-/nz2/nz）/w。/w图/gi /x1/nz-/nz2./nz /x集中化/vn的/ude1版本控制系统/gi这种/r做法/n带来/v了/ule许/v多/a好处/gi，/w特别/d是/vshi相较/d于/p老式/b的/ude1本地/gi vcs /nz来说/uls。/w现在/t，/w每个/r人/n都/d可以/v在/p一定/b程度/n上/f看到/v项目/gi中的/v其他人/r正在/d做/v些/q什么/ry。/w而/cc管理员/gi也/d可以/v轻松/a掌控/v每个/r开发者/gi的/ude1权限/gi，/w并且/c管理/gi一个/mq cvcs /nz要/v远比/v在/p各个/rz客户端/gi上/f维护/gi本地/gi数据库/gi来得/vi轻松/a容易/ad。/w事/n分/qt两面/mq，/w有好有坏/i。/w这么/rz做/v最/d显而易见/bl的/ude1缺点/gi是/vshi中央/n服务器/gi的/ude1单点故障/gi。/w如果/c宕机/nz一小时/nz，/w那么/c在/p这/rzv一/nz小时/n内/f，/w谁/ry都/d无法/v提交/gi更新/gi，/w也/d就/d无法/v协同工作/n。/w要是/c中央/n服务器/gi的/ude1磁盘/gi发生/v故障/gi，/w碰巧/d没/d做/v备份/gi，/w或者/c备份/gi不够/a及时/ad，/w就/d会/v有/vyou丢失/v数据/gi的/ude1风险/gi。/w最坏/gi的/ude1情况/n是/vshi彻底/ad丢失/v整个/b项目/gi的/ude1所有/b历史/n更改/gi记录/gi，/w而/cc被/pbei客户端/gi偶然/a提取/v出来/vf的/ude1保存/gi在/p本地/gi的/ude1某些/rz快照/gi数据/gi就/d成/v了/ule恢复/gi数据/gi的/ude1希望/v。/w但/c这样的话/l依然/d是/vshi个/q问题/gi，/w你/rr不能/v保证/v所有/b的/ude1数据/gi都/d已经/d有人/r事先/d完整/a提取/v出来/vf过/uguo。/w本地/gi版本控制系统/gi也/d存在/v类/gi问题/gi，/w只要/c整个/b项目/gi的/ude1历史记录/nz被/pbei保存/gi在/p单一/gi位置/gi，/w就/d有/vyou丢失/v所有/b历史/n更新/gi记录/gi的/ude1风险/gi。/w于是/cc分布式/gi版本控制系统/gi（/w distributed version control system/nz，/w简称/v dvcs /nz）/w面世/vi了/ule。/w在/p这类/r系统/gi中/f，/w像/v git/nz，/wmercurial/nz，/wbazaar /nz以及/cc darcs /nz等/udeng，/w客户端/gi并/cc不只/c提取/v最新/a版本/n的/ude1文件/gi快照/gi，/w而是/c把/pba代码/gi仓库/gi完整/a地/ude2镜像/gi下来/vf。/w这么一来/l，/w任何/rz一/nz处/n协同工作/n用/p的/ude1服务器/gi发生/v故障/gi，/w事后/f都/d可以/v用/p任何/rz一个/mq镜像/gi出来/vf的/ude1本地/gi仓库/gi恢复/gi。/w因为/c每一次/d的/ude1提取/v操作/gi，/w实际上/d都/d是/vshi一次/nz对/p代码/gi仓库/gi的/ude1完整/a备份/gi（/w见/v图/gi /x1/nz-/nz3/nz）/w。/w图/gi /x1/nz-/nz3./nz /x分布式/gi版本控制系统/gi更进一步/vl，/w许多/m这类/r系统/gi都/d可以/v指定/v和/cc若/c干/v不同/a的/ude1远端/nz代码/gi仓库/gi进行/vn交互/gi。/w籍/ng此/rzs，/w你/rr就/d可以/v在/p同一个/b项目/gi中/f，/w分别/d和/cc不同/a工作/gi小组/nis的/ude1人/n相互协作/l。/w你/rr可以/v根据/p需要/v设定/v不同/a的/ude1协作/gi流程/gi，/w比如/v层次模型/gi式/k的/ude1工作流/gi，/w而/cc这/rzv在/p以前/f的/ude1集中式/n系统/gi中/f是/vshi无法/v实现/gi的/ude1。/w以上/f内容/gi转/v自/p互联网/gi，/w原文/n网址/gi：/w起步-关于/nz版本控制/gi