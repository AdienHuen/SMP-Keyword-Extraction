#深搜/gi算法/gi实例/gi：/w老鼠/n走/v迷宫/gi（/w一/nz）/w
这个/rz是/vshi简单/a的/ude1深搜/gi，/w应该/v输入/v深搜/gi中/f抛砖/nz型/k的/ude1，/w联系/gi下/f代码/gi，/w回顾一下/nz深搜/gi的/ude1思想/gi。/w /x本题/n的/ude1要求/n是/vshi，/w在/p开始/v点/gi(/nz1/nz,/nz1/nz)/nz和/cc终点/gi(/nz5/nz,/nz5/nz)/nz放/v一/nz只/d老鼠/n，/w让/v老鼠/n找到/v一条路径/nz走/v出去/vf（/w暂时/d不/d考虑/v最短路径/gi）/w，/w找到/v后/f输出/gi路径/gi。/w /x最简单/nz的/ude1想法/gi就是/v对于/p上下/f左右/f四个/nz进行/vn刨根/nz型/k的/ude1搜索/gi，/w找到/v就/d返回/v输出/gi，/w进入/v死胡同/n了/ule就/d原路/n返回/v，/w找/v最近/t的/ude1有/vyou其他/rzv路径/gi的/ude1点/gi，/w继续/v搜索/gi，/w知道/v找出/v为止/u。/w /x下面/f是/vshi代码/gi部分/n。/w从/p上面/f的/ude1分析/gi中/f我们/rr只/d看/vvisit/nz(/nz)/nz函数/gi /x我们/rr用/p了/ule0/nz,/nz1/nz,/nz2/nz三个数/nz表示/v地图/n某/rz一点/m的/ude1状态/gi：/w1.0/nz表示/v无障碍/nz /x2.1/nz表示/v通路/n中的/v一点/m /x3.2/nz表示/v障碍/gi并用/vi一个/mq数组/gi保存/gi /x我们/rr看到/v，/w在/pvisit/nz(/nz)/nz函数/gi中/f进行/vn了/ule函数/gi自身/rr调用/gi（/w可以/v看做/v是/vshi递归/gi）/w，/w这里/rzs是/vshi先/d朝着/p右边/f搜索/gi，/w然后/c是/vshi上/f，/w下/f，/w左/f，/w如果/c还/d能/v往下走/v就/d接着/c往下走/v，/w走到/vf不能/v再/d走/v为止/u。/w如果/c是/vshi死胡同/n，/w则/d就/d退到/v上/f一/nz节点/gi（/w这/rzv就是/v回溯/gi了/ule，/w在/p代码/gi中的/vmaze/nz[/nzi/nz]/nz[/nzj/nz]/nz=/nz0/nz表现/v）/w，/w在/p新的/a节点/gi继续/v试探/v，/w看有/v没有/v能/v一直/d走到/vf终点/gi的/ude1路线/n，/w一旦/d找到/v就/d马上/d返回/v（/w在/pflag/nz=/nzsuccess/nz这里/rzs说明/v，/w找到/v一条/nz就/d不再/d找/v别的/rzv路线/n了/ule）/w，/w没有/v的话/udh就/d接着/c深搜/gi，/w直到/v遍历/gi完/vi所有/b的/ude1节点/gi发现/v到底/d有/vyou没有/v通路/n存在/v。/w /x总的/b来说/uls这个/rz作为/p深搜/gi的/ude1入门/gi挺不错/i，/w没有/v难度/n，/w还/d有点/d小趣/nz，/w同时/c还/d能/v再/d回顾/v下/f递归/gi的/ude1思想/gi