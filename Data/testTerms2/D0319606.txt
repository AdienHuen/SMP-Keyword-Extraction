#1.2/nz /x作为/p一种/nz技术/gi的/ude1算法/gi
要/v研究/gi算法/gi，/w哪些/ry指标/gi可以/v用来/v衡量/v算法/gi的/ude1好坏/n呢/y？/w1./nz /x这个/rz算法/gi要能/v正确/a解决问题/v。/w这个/rz是/vshi前提/n，/w研究/gi算法/gi的/ude1最终/d目的/gi也/d是/vshi为了/p解决问题/v。/w如果/c一个/mq算法/gi，/w不能/v解决问题/v，/w那/rzv要/v它/rr何用/d。/w2./nz /x这个/rz算法/gi占用/v的/ude1资源/gi应该/v尽可能/d小/a。/w计算机/gi可以/v做/v得/ude3很快/d，/w但/c不能/v无限/b快/a。/w存储器/gi很/d便宜/a，/w但/c不会/v免费/vd。/w计算/gi时间/gi是/vshi一/nz种/q有限/a的/ude1资源/gi，/w存储空间/gi也/d是/vshi一/nz种/q有限/a的/ude1资源/gi。/w这些/rz资源/gi必须/d被/pbei有效地/nz使用/gi，/w那些/rz时间/gi和/cc空间/n上/f有效/gi的/ude1算法/gi就/d有助于/v做到/v这一点/nz。/w效率/gi效率/gi指/v解决问题/v的/ude1有效/gi比率/n。/w比如/v，/w完成/v一件事/nz，/wa/nz只用/v了/ule10/nz分钟/qt，/w而/ccb/nz用/p了/ule15/nz分钟/qt，/w那么/c在/p时间/gi这个/rz角度/n来说/uls，/wa/nz的/ude1效率/gi比/pb/nz的/ude1效率高/nz。/w解决/v同一/b问题/gi，/w各种/rz算法/gi的/ude1效率/gi通常/d相差/v很大/d。/w这种/r效率/gi上/f的/ude1差距/n的/ude1影响/gi往往/d比/p硬件/gi和/cc软件/gi方面/n的/ude1差距/n还要/d大得多/d。/w书/gi中/f举出/v了/ule一个/mq具体/a的/ude1例子/gi。/w用来/v比较/gi插入排序/gi算法/gi和/cc合并/gi排序算法/gi的/ude1效率/gi。/w这/rzv两/nz个/q排序算法/gi，/w都/d要/v对/p一个/mq大小/n为/p一/nz百万个数/nz的/ude1数组/gi进行/vn排序/gi。/w插入排序/gi算法/gi，/w运行/gi在/p一台/nz运行/gi较快/d的/ude1电脑/gia/nz上/f，/w每秒/d执行/v10/nz亿条/nz指令/gi。/w合并/gi排序算法/gi，/w运行/gi在/p一台/nz运行/gi较慢/d的/ude1电脑/gib/nz上/f，/w每秒/d执行/v一千万条/nz指令/gi。/w在/p计算/gi能力/gi方面/n，/w计算机/gia/nz比/p计算机/gib/nz快/a100/nz倍/q。/w插入排序/gi算法/gi，/w假设/gi排列/gin/nz个数/n，/w需要/v2/nzn/nz^/nz2/nz条/q指令/gi合并/gi排序算法/gi，/w假设/gi排列/gin/nz个数/n，/w需要/v50/nznlgn/nz条/q指令/gi。/w为了/p排序/gi一/nz百万个数/nz，/w计算机/gia/nz花/n的/ude1时间/gi为/p：/w2/nz /x*/nz /x(/nz10/nz^/nz6/nz)/nz^/nz2/nz /x条/q指令/gi /x//nz /x(/nz10/nz^/nz9/nz条/q指令/gi//nz秒/qt)/nz /x=/nz /x2000/nz秒/qt为了/p排序/gi一/nz百万个数/nz，/w计算机/gib/nz花/n的/ude1时间/gi为/p：/w50/nz*/nz10/nz^/nz6/nz lg/nz10/nz^/nz6/nz /x条/q指令/gi /x//nz /x(/nz10/nz^/nz7/nz条/q指令/gi//nz秒/qt)/nz /x=/nz /x100/nz秒/qt计算机/gia/nz原来/d比/p计算机/gib/nz快/a100/nz倍/q，/w但是/c由于/p运行/gi的/ude1算法/gi不同/a，/w最终/d对/p一百万个数/nz进行/vn排序/gi，/w计算机/gia/nz反倒/d比/pb/nz慢/a了/ule20/nz倍/q。/w /x这/rzv就是/v计算机/gi算法/gi的/ude1效率/gi问题/gi。/w算法/gi和/cc其他/rzv技术/gi总体/n的/ude1系统/gi性能/gi不仅/c依赖于/v选择/gi快速/d的/ude1硬件/gi，/w还/d依赖于/v选择/gi有效/gi的/ude1算法/gi。/w那/rzv现在/t计算机/gi硬件/gi已经/d很快/d了/ule，/w是否/v意味着/v研究/gi算法/gi已经/d没有/v必要/a了/ule呢/y？/w肯定/v不是/c。/w研究/gi算法/gi有/vyou必要/a，/w主要/b体/ng下面/f几/d个/q方面/n。/w1./nz /x在/p一些/m数据量/n很大/d的/ude1领域/gi。/w比如/v寻找/v路由/gi。/w2./nz /x硬件/gi的/ude1设计/gi领域/gi也/d需要/v算法/gi。/w3./nz /x任何/rz一种/nz计算机语言/gi，/w它/rr都/d需要/v编译器/gi、/w解释器/gi或/c汇编器/n中的/v一种/nz，/w来/vf让/v计算机/gi理解/gi这种/r语言/gi。/w这些/rz软件/gi中/f，/w都/d包含/v了/ule大量/m的/ude1算法/gi。/w算法/gi很/d重要/a，/w是否/v拥有/v扎实/a的/ude1算法/gi知识/gi和/cc技术/gi基础/gi，/w是/vshi区分/v真正/d熟练/a的/ude1程序员/gi与/cc新手/gi的/ude1一项/nz重要/a特征/gi，/w利用/v当代/t的/ude1计算/gi技术/gi，/w无需/v了解/v很/d多/a算法/gi方面/n的/ude1东西/n，/w也/d可以/v完成/v一/nz些/q任务/gi。/w但是/c，/w有/vyou了/ule良好/a的/ude1算法/gi基础/gi的话/udh，/w可以/v做/v的/ude1是/vshi就要/d多得多/d了/ule。/w而且/c，/w最重要/nz的/ude1一点/m是/vshi，/w找/v工作/gi的/ude1笔试/gi面试题/n中/f，/w经常/d会/v出/vf一/nz些/q算法题/nz。/w要是/c算法题/nz，/w答/v得/ude3不好/a，/w就/d会/v找/v不到/v工作/gi。/w或者/c只能/v找到/v工资/n低/a的/ude1工作/gi。/w