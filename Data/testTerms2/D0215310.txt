#如何/ryv实现/gi稳定/an的/ude1千万级/nzPV/nz移动应用/gi架构/gi
origin/nz:/w架构/gi这个/rz词/n就/d和/cc云/gi一样/uyy，/w越来越/d多/a的/ude1人/n去/vf说/v，/w但是/c其实/d这个/rz本身/rz一直/d就/d存在/v你/rr身边/s，/w只不过/d大家/rr用/p新的/a归纳/v方法/gi进行/vn了/ule整理/gi，/w出现/v的/ude1一个/mq热词/nz。/w那么/c就/d生产/gi中/f实例/gi：/w如何/ryv实现/gi稳定/an的/ude1千万级日/nzpv/nz的/ude1移动应用/gi架构/gi？/w  /x第一步/nz：/w要/v保证/v日均/d千万级/nzpv/nz的/ude1移动应用/gi访问/gi正常/a，/w我们/rr需要/v有/vyou一个/mq好/a的/ude1应用/gi框架/gi，/w代码/gi不能/v写/v的/ude1都/d是/vshi坑/n，/w至少/d代码/gi本身/rz质量/gi要/v过关/vi，/w我们/rr这里/rzs说/v的/ude1是/vshi抛却/nz代码/gi质量/gi这个/rz因素/gi，/w首先/d要/v模块化/gi的/ude1拆分/gi业务/gi应用/gi，/w不能/v所有/b的/ude1业务/gi用/p一套/nz系统/gi，/w放/v1/nz台/q服务器/gi，/w这个/rz肯定/v抗/v不了/v千万日/nzpv/nz，/w模块化/gi后/f，/w各/rz业务/gi之间/f开放/giapi/gi进行/vn互访/vn传递数据/n，/w便于/v我们/rr对/p各个/rz模块/gi进行/vn改进/gi。/w  /x第二步/nz：/w当/p我们/rr将/d业务/gi进行/vn了/ule模块化/gi拆分/gi后/f，/w就要/d根据/p业务量/n对/p现有/v的/ude1各个/rz模块/gi进行/vn量化/gi评估/gi和/cc改进/gi，/w改造/vn的/ude1方向/gi主要/b有/vyou下面/f几点/nz：/w  /x1./nz对/p各个/rz模块/gi进行/vn集群/gi化/v部署/gi，/w根据/p业务量/n分配/gi集群/gi规模/gi。/w  /x2./nz消除/v整个/b结构化/n中的/v单点/n问题/gi，/w不能/v有/vyou任何/rz业务/gi有/vyou单点故障/gi，/w保障/vn业务/gi模块/gi的/ude1高/a可用/v。/w  /x3./nz核心/n模块/gi进行/vn纵向/n的/ude1分层/v化/v处理/vn，/w增加/v模块/gi的/ude1处理/vn能力/gi和/cc可扩展性/gi//nz独立性/gi。/w  /x4./nz异步化/nz处理/vn，/w很/d多/a实时性/nz不/d高/a的/ude1业务/gi进行/vn异步化/nz处理/vn，/w减少/v整个/b系统/gi的/ude1压力/n。/w  /x5./nz内存/gi化/v处理/vn，/w对/p交互/gi处理/vn频繁/a的/ude1数据/gi，/w可以/v放到/v内存数据库/gi中/f处理/vn，/w异步/gi进行/vn数据/gi的/ude1落地/vi（/w使用/gi内存数据库/gi的/ude1集群/gi和/cc分布式/gi机制/gi保障/vn数据/gi的/ude1安全/gi和/cc高/a可用/v）/w。/w  /x6./nz精简/v目前/t的/ude1架构/gi纵向/n层次/n，/w避免/v超过/v3/nz层/gi，/w越/d简单/a越/d高效/b，/w越/d易于/vd管理/gi。/w  /x第三步/nz：/w关系数据库/gi进行/vn读写/gi分离/vi，/w或者/c集群/gi化/v处理/vn，/w目前/t大多/d数/n改进/gi的/ude1方案/gi最终/d的/ude1核心/n都/d在/p数据库/gi上/f，/w大多/d方式/n：/w  /x1./nz使用/gi内存数据库/gi做/v数据库/gi前端/gi，/w所有/b对/p数据/gi的/ude1更/d//nz删/v//nz改/v//nz查/v操作/gi都/d在/p内存数据库/gi中/f执行/v，/w最终/d异步/gi将/d数据/gi落地/vi到/v关系数据库/gi中/f，/w此/rzs方式/n能/v大大减少/i关系数据库/gi的/ude1操作/gi。/w  /x2./nz使用/gi双/q主多/nz从/p的/ude1方式/n部署/gi数据库/gi集群/gi，/woracle/gi的/ude1自己/rr有一套/r商业/n的/ude1解决方案/gi（/w比如/v:/wrac/gi）/w,/nz这里/rzs就/d不说/c了/ule  /x3./nz在/p程序/gi层/gi做/v数据库/gi的/ude1读写/gi分离/vi或/c集群/gi读取/gi（/w这个/rz要求/n程序员/gi能力/gi）/w，/w或者/c使用/gi数据库/gi代理/gi软件/gi（/w路由/gi软件/gi）/w，/w大/a公司/nis自己/rr写/v，/w开源/gi的/ude1也/d有/vyou不/d少/a，/w但是/c多多少/nz少/a都/d有/vyou一/nz些/q小毛病/nz，/w需要/v代码/gi配套/vn修改/gi，/w很/d多/a用法/gi是/vshi不/d支持/v的/ude1。/w  /x4./nz分库/gi//nz分区/gi//nz分表/n /x这个/rz主要/b是/vshi减轻/v单/b数据库服务器/gi的/ude1压力/n，/w增加/v数据库/gi处理/vn能力/gi。/w  /x5./nz慢查询/gi日志/gi分析/gi，/w优化/gisql   /nz第四步/nz：/w监控/gi，/w这个/rz是/vshi保证/v千万级/nzpv/nz移动应用/gi稳定/an运行/gi的/ude1关键/n，/w主要/b分为/v下面/f几类/n：/w  /x1./nz服务器/gi层/gi基础/gi监控/gi：/wcpu/gi//nzmem/nz//nzdisk/nz//nzio  /nz2./nz应用服务/n状态/gi：/w端口/gi//nz服务/gi进程/gi  /x3./nz服务质量/gi：/w连接数/nz//nz响应速度/nz//nz接口/gi数据/gi返回/v  /x4./nz数据分析/gi：/w定期/d的/ude1日志/gi分析/gi pv/nz//nzuv/gi//nzqp  /nz做到/v以上/f几点/nz，/w你/rr是否/v就/d真正/d的/ude1做到/v稳定/an的/ude1千万级日/nzpv/nz的/ude1移动应用/gi架构/gi呢/y？/w通常/d我们/rr所说/c的/ude1高并发/gi都/d是/vshi想到/v淘宝/n双/q11/nz，/w12306/nz抢/v票/n，/w小米/n抢/v手机/gi，/w人家/n一般/ad都/d是/vshi上亿/nzpv/nz，/w瞬时/t并发/gi几百/nzk/nz，/w但是/c目前/t业界/n这样/rzv的/ude1公司/nis屈指可数/vl，/w更多/ad的/ude1公司/nis面临/v的/ude1大/a并发/gi基本/a也/d就是/v日/bpv/nz千万级/nz，/w并发/gi连接/gi10/nzk/nz-/nz30/nzk/nz。/w本期/r话题/n以/p移动应用/gi架构设计/nz为/p主题/n，/w诚邀/v各位/rr大神/nz，/w一起/s聊聊/v怎么/ryv搭建/v稳定/an的/ude1千万级/nzpv/nz架构/gi？/w届时/d10/nz月/n22/nz日/b-/nz24/nz日/b在/p北京/gi新/a云南/ns皇冠假日酒店/nt盛大/b召开/v的/ude1sacc/nz2015/nz大会/gi的/ude1分会场/n11/nz，/w将/d与/cc大家/rr更/d深入/ad的/ude1探讨/v关于/p移动应用/gi架构设计/nz方面/n的/ude1专题/n，/w敬请期待/i您/rr的/ude1参与/gi。/w讨论/gi话题/n1/nz、/w千万级/nzpv/nz架构/gi您/rr觉得/v如何/ryv构建/gi，/w比如/v：/w云主机/gi下/f，/w您/rr认为/v千万级/nz的/ude1pv/nz会/v遇到/v哪些/ry瓶颈/gi，/w如何/ryv解决/v？/w2/nz、/w从/p十万级/nz到/v千万级/nzpv/nz架构/gi您/rr觉得/v该/rz如何/ryv演化/gi？/w该/rz从/p哪些方面/nz入手/vi？/w应该/v注意/v哪些方面/nz的/ude1细节/gi?/nz3/nz、/w千万级/nzpv/nz架构/gi中/fweb服务器/gi如何/ryv选型/n，/w比如/v：/wnginx/gi、/wapache/gi、/wlighttpd/nz，/w都/d适用/vi哪些/ry场景/gi？/w负载均衡/gi服务器/gi该/rz如何/ryv选型/n？/w比如/v:/whaproxy/nz、/wlvs/gi都/d适合/v哪些/ry场景/gi，/w实际/n中会/j遇到/v哪些/ry坑/n?/nz4/nz、/w您/rr认为/v千万级/nzpv/nz架构/gi中/f如何/ryv保障/vn后期/f的/ude1扩展/gi？/w您/rr能/v介绍/gi下/f所/usuo了解/v的/ude1实际/n中的/v千万级/nzpv/nz架构/gi吗/y？/w5/nz、/w目前/t大多/d数/n规模/gi在/p千万级/nz创业公司/gi中/f，/w很/d多/a语言/gi混杂/v开发/gi，/w在/p实际/n管理/gi中/f，/w如何/ryv保障/vn多/a语言/gi混杂/v开发环境/gi下/f的/ude1业务/gi稳定性/n和/cc可管理性/gi？/w