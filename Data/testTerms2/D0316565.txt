#[/nzFFMPEG/nz-/nz0/nz]/nz年度/n总结/gi和/ccFFMPEG/nz简介/gi
做/v语音/gi相关/vn的/ude1东西/n做/v了/ule快一年/nz了/ule，/w从/p最/d开始/v的/ude1音乐/n检索/gi到/v后来/t的/ude1音乐/n情感/n识别/gi，/w一直/d都/d在/p人工智能/gi的/ude1方面/n来/vf做/v这些/rz事情/n。/w后来/t搞了/ns半年/nz没/d搞出/nz什么/ry名堂/n，/w觉得/v作/v学术/n不是/c很感兴趣/nz就/d开始/v做/v安卓/nz，/w但是/c又/d不/d舍得/v放弃/gi音乐/n和/cc语音/gi，/w所以/c安卓/nz基本/a入门/gi之后/f就/d开始/v重点/n转到/v多媒体/gi处理/vn相关/vn的/ude1，/w稀稀疏/nz疏/ag的/ude1做/v了/ule一/nz些/q小玩意/nz。/w第一个/gi是/vshi根据/p声音/gi智能/gi判断/gi当前/t所处/nz的/ude1环境/n，/w然后/c自动/d切换/vn情景模式/nz。/w因为/c我/rr还是/c学生/gi嘛/y，/w所以/c就/d设计/gi了/ule课堂/n、/w宿舍/n和/cc餐厅/nis三个/nz场景/gi。/w很/d简单/a，/w这/rzv三个/nz场景/gi是/vshi很好/ad区分/v的/ude1。/w课堂/n上/f虽然/c老师/gi会/v一直/d讲话/n，/w但是/c讲话/n会/v有/vyou明显/a的/ude1停顿/vi，/w而且/c整体/n的/ude1能量/n是/vshi很小/a的/ude1。/w餐厅/nis是/vshi比较/gi嘈杂/a的/ude1，/w声音/gi基本/a是/vshi连续/gi的/ude1，/w整体/n能量/n是/vshi比较/gi高/a的/ude1。/w而/cc宿舍/n就是/v比较/gi安静/a的/ude1环境/n了/ule，/w能量/n也/d是/vshi最少/d的/ude1。/w首先/d开/v一个/mq服务/gi，/w然后/c每五/nz分钟/qt就/d录制/v十秒钟/nz的/ude1声音/gi，/w然后/c判断/gi声音/gi的/ude1连续性/n和/cc能量/n判断/gi出/vf当前/t的/ude1场景/gi，/w然后/c自动/d修改/gi情景模式/nz。/w第二个/nz是/vshi音乐/n伴奏/vn提取器/nz。/w一/nz开始/v做/v的/ude1很/d简单/a，/w一方面/c只/d支持/vwav/nz式/k的/ude1，/w另一方面/c必须/d是/vshi双声道/nz的/ude1。/w原理/gi很/d简单/a，/w就是/v两/nz个/q声道/n的/ude1乐器/n声音/gi分布/vi是/vshi不/d均匀/a的/ude1，/w而/cc人声/n的/ude1分布/vi是/vshi均匀/a的/ude1。/w然后/c用/p一个/mq声道/n减掉/v另一个/nz声道/n，/w剩下/v的/ude1就是/v乐器/n声音/gi了/ule。/w一/nz开始/v将/d所有/b数据/gi都/d读到/v内存/gi中/f，/w后来/t又/d加/v了/ule缓冲/vn，/w内存/gi占用/v大幅/d减少/v。/w后来/t找/v了/ule一个/mq工具/gi，/w将/dmp/nz3/nz转为/giwav/nz，/w曲线救国/nz。/w但是/c保存/gi的/ude1文件/gi还是/cwav/nz式/k的/ude1。/w第三/nz个/q就是/v基于/p内容/gi的/ude1音乐/n检索系统/nz，/w主要/b使用/gifingerprint/nz算法/gi，/w基于/pgoogle gmusic/nz实现/gi的/ude1。/w这个/rz库/n目前/t只/d支持/vwav/nz数据/gi，/w所以/c还是/c要/v先/d解码/gi其他/rzv式/k的/ude1数据/gi。/w以上/f就是/v我/rr2014/nz年/qt做/v的/ude1事情/n。/w好/a少/a啊/y！/w基于/p以上/f原因/n，/w我/rr做/v的/ude1这/rzv几/d个/q小玩意/nz都/d要/v解码/gi音频/gi，/w所以/c音频/gi的/ude1编解码/n成/v了/ule我/rr重点/n关注/v的/ude1地方/n。/w因为/cffmpeg/gi是/vshi世界/gi上/f最/d牛/n的/ude1多媒体/gi库/n，/w所以/c我/rr就/d准备/v开始/v认真/ad研究/gi他/rr了/ule。/w一直/d在/p写/vjava/gi程序/gi，/w所以/c我/rr第一步/nz就是/v重新/d熟悉/vc语言/gi和/cc编程/gi环境/n，/w而/cc在/plinux/gi下面/f做/v起来/vf省事/a一/nz些/q而且/c我/rr对/plinux/gi还是/c比较/gi熟悉/v的/ude1，/w所以/c就/d选择/gi了/ulelinux/gi，/w开始/v了/ulemake gdb/nz的/ude1生活/vn。/w首先/d是从/v官方/gi下载/gi最新/a的/ude1源码/gi，/w下载/gi之后/f解压/v，/w然后/c进步/vn解压/v得到/v的/ude1目录/gi执行/v经典/gi的/ude1“/w./nz//nzconfigure/nz”/wmakemake install/nz，/w可能会/nz出现/v一/nz些/q依赖/v错误/gi，/w手动/b安装/gi依赖/v就/d可以/v了/ule。/w安装/gi好/a之后/f执行/v“/wffmpeg/gi”/w命令/gi，/w看到/v出来/vf的/ude1信息/gi还是/c激动/a了/ule以下/f。/w然后/c就/d开始/v写/v程序/gi，/w一个/mq简单/a的/ude1测试代码/n：/w头/n引得/v有点/d多/a。/w然后/c编译/gi运行/gi。/w因为/c要/v链接/gi的/ude1库/n比较/gi多/a，/w直接/adgcc/nz的话/udh我/rr搞不定/v，/w于是/cc就/d找到/v官方/gi提供/v的/ude1example/nz，/w然后/c修改/gi了/ule一下/m他/rr的/ude1makefile文件/gi，/w拿/v过来/vf就/d自己/rr用/p了/ule。/w也/d放上/v吧/y顺便/d推荐/gi一个/mq好/a的/ude1makefile/gi教程/gi。/w免不了/v的/ude1要/v调试程序/gi的/ude1嘛/y，/w再/d推荐/gi一个/mqgdb/nz的/ude1教程/gi，/w这/rzv是/vshi一系列/b。/w这样/rzv就/d开始/v了/ule我/rr的/ude1ffmpeg/gi历程/gi。/w目前/t还是/c很/d顺利/ad的/ude1。/w