#php/gi设计模式/nz之/uzhi策略模式/gi
经常/d听学/nzjava/gi的/ude1同学/n说起/v设计模式/nz，/w今天/t开始/v接触/v一/nz些/qphp/gi的/ude1设计模式/nz，/w觉得/v策略模式/gi挺/d有意思/al。/w其实/d使用/gi设计模式/nz的/ude1目的/gi，/w大多/d是/vshi为了/p提高/v某/rz种类/n或/c功能/gi的/ude1可扩展性/gi：/w这里/rzs的/ude1可扩展性/gi对于/pjava/gi和/ccc/nz等/udeng强/a类型/gi语言/gi是/vshi非常/d有/vyou用/p的/ude1，/w使用/gi了/ule合适/a的/ude1设计模式/nz，/w你/rr可以/v不/d修改/gi原类/nz的/ude1代码/gi，/w而/cc新增/v若/c干/v个/q类/gi来/vf完成/v扩展/gi。/w如果/c你/rr是/vshiphp/gi程序猿/nr，/w你/rr可能会/nz说/v：/w这/rzv没什么/vl啊/y，/w我/rr在/p原/b类/gi里/f新增/v一个/mq方法/gi来/vf完成/v不/d就/d好/a了/ule？/w是/vshi的/ude1，/w对于/pphp/gi来说/uls，/w在/p源码/gi做/v点/gi改动/vn是/vshi完全/ad可以/v的/ude1，/w改/v完/vi之后/f直接/ad运行/gi测试/gi，/w但是/c对于/p强/a类型/gi语言/gi比如/vjava/gi来说/uls，/w必须/d重新/d编译/gi之后/f才能/n运行/gi查看/gi结果/n，/w而/cc如果/c原来/d的/ude1项目/gi比较/gi大/a而且/c已经/d完成/v，/w那么/c修改/gi源码/gi再/d重新/d编译/gi的/ude1时间/gi可能会/nz非常/d长/a，/w几十/nz分钟/qt或者/c几/d小时/n都/d是/vshi有可能/nz的/ude1。/w如果/c我们/rr使用/gi了/ule设计模式/nz，/w那么/c只/d需要/v新增/v一个/mq类/gi完成/v扩展/gi即可/v，/w此时/r只/d编译/gi新增/v的/ude1类/gi就/d会/v省/n下/f很/d多/a时间/gi。/w下面/f写/v一个/mq简单/a的/ude1策略模式/gi来/vf说明/v：/w比如/v在/phtml/gi页面/gi里/f，/w有/vyou计算/gi两/nz个数/n的/ude1和/cc、/w差/a、/w积/v、/w商/vg，/w最后/f扩展/gi一种/nz取模/nz运算/gi。/w如/v图/gi：/w此时/r提交/gi到/vphp/gi脚本/gi里/f，/w可以/v这样/rzv处理/vn：/w如果/c要/v新增/v一种/nz计算/gi方式/n比如/v取模/nz运算/gi，/w那么/c就要/d在/pcal/nz(/nz)/nz方法/gi里/f再加/nzelseif/nz判断/gi，/w你/rr可能会/nz说/v，/w用/pswitch/nz啊/y，/w用/pswitch/nz也/d是/vshi一样/uyy的/ude1需要/v在/p原/b类/gi里/f修改/gi代码/gi。/w怎样/ryv做到/v不/d修改/gi原类/nz而/cc新增/v类/gi来/vf完成/v新增/v的/ude1取模/nz运算/gi，/w这/rzv就要/d用/p到/v策略模式/gi。/w我们/rr可以/v每一个/nz运算/gi写成/v一个/mq类/gi，/w最后/f再/d用/p一类/b总的类/nz来/vf控制/vn各种/rz运算/gi。/w代码/gi和/cc注释/gi如下/vi：/whtml/gi代码/gi部分/n：/wphp/gi代码/gi部分/n：/w你/rr可能/v觉得/v这/rzv和/cc工厂模式/gi比较/gi像/v，/w这/rzv两/nz种/q模式/gi，/w结构/gi相同/a，/w但/c作用/gi不同/a，/w工厂模式/gi着重于/n创建对象/n的/ude1可扩展性/gi，/w策略模式/gi着重于/n对象/gi的/ude1行为/n的/ude1可扩展性/gi（/w动态/gi地/ude2让/v对象/gi选择/gi合适/a的/ude1行为/n）/w。/w打/v个/q比方/v：/w工厂模式/gi：/w根据/p你/rr给出/v的/ude1目的/gi来/vf生产/gi不同/a用途/n的/ude1斧子/n，/w例如/v要/v砍/v人/n，/w那么/c工厂/gi生产/gi砍/v人/n斧子/n，/w要/v伐木/vn就/d生产/gi伐木/vn斧子/n。/w策略模式/gi：/w用/p工厂/gi生产/gi的/ude1斧子/n来/vf做/v对应/vi的/ude1事情/n，/w例如/v用/p砍/v人/n的/ude1斧子/n来/vf砍/v人/n，/w用/p伐木/vn的/ude1斧子/n来/vf伐木/vn。/w参考/gi帖子/n：/w#/nzquote/nz