#联想/vi企业/gi云/gidocker/gi开发/gi实践/gi
docker/gi容器/gi技术/gi发展势头/l如此/rzv迅猛/a，/w以至于/c很/d多/a开发人员/n跟不上/v节奏/n，/wdocker/gi不仅/c是/vshi有史以来/l人气/n最高/a的/ude1开源项目/gi之一/rz，/w同时/c也/d已经/d给/p人们/n构建/gi应用程序/nz的/ude1方式/n带来/v了/ule根本性/n变革/gi。/w其实/ddocker/gi是/vshi基于/plxc/nz（/wlinux container/nz）/w容器/gi技术/gi发展/gi而来/c，/w通过/p内核/gi虚拟化技术/gi（/wnamespaces/nz及/cccgroups/nz等/udeng）/w来/vf对/p容器/gi进行/vn资源/gi隔离/vn，/w容器/gi运行/gi时/qt相当于/v宿主/n机上/s一个/mq进程/gi，/w没有/v额外/b操作系统/gi开销/n，/w由此/d带来/vdocker/gi隔离/vn性/ng、/w便携性/b和/cc轻量性/nz等/udeng优点/gi。/w随着/pkubernetes/nz和/cc相关/vn管理工具/nz的/ude1发布/gi，/wdocker/gi容器/gi技术/gi和/cc配套/vn工具/gi越来越/d完善/v。/w早/a在/p2014/nz年/qt时候/n，/w我们/rr已经/d将/ddocker/gi引入/v到/v联想/vi企业/gi云/gi开发/gi过程/gi中/f。/w联想/vi企业/gi云/gi为/p企业/gi提供/v云存储/gi服务/gi，/w企业/gi更/d重视/v可靠/a和/cc稳定性/n，/w所以/c经过/p深入研究/v和/cc大量/m测试/gi后/f，/w才/d决定/v将/ddocker/gi应用/gi到/v实际/n的/ude1生产/gi环境/n。/w除了/p上面/f提到/v一/nz些/q特性/gi外/f，/w我们/rr分享/gi在/p实际/n开发/gi过程/gi中/fdocker/gi带来/v的/ude1好处/gi。/w1./nz持续集成/gi，/w加强/v开发/gi、/w测试/gi迭代/gi能力/gi传统开发/gi测试流程/gi，/w是/vshi通过/p代码/gi驱动/gi的/ude1，/w开发人员/n将/d代码/gi提交/gi到/v代码库/nz，/w测试人员/n从/p代码/gi库/n拉去/v代码/gi，/w然后/c去/vf模拟/gi环境/n中/f测试/gi，/w这种/r流程/gi能够/v使得/vi测试/gi和/cc开发人员/n看到/v同样/d的/ude1代码/gi，/w但是/c由于/p环境/n变化/gi，/w配置/gi成为/v问题/gi，/w这种/r效率/gi较低/d。/w引入/vdocker/gi之后/f，/w我们/rr可以/v将/d镜像/gi驱动/gi这个/rz开发/gi和/cc测试过程/gi。/w如图所示/i。/w在/p实际/n开发/gi过程/gi中/f，/w每天/r开发人员/n根据/p产品/gi需求/gi和/cc问题/gi，/w进行/vn开发/gi，/w然后/c将/d开发/gi后/f的/ude1提交/gi到/v代码/gi仓库/gi中/f。/w之后/f，/w系统/gi会/v自动/d调用/gi编译/gi服务/gi，/w自动/d编译/gi代码/gi仓库/gi中的/v代码/gi，/w然后/c将/d编译/gi后/f的/ude1程序/gi整合/gi到/v基础/gi镜像/gi中/f，/w生成/v可执行/nz镜像/gi，/w然后/c运行/gi可执行/nz镜像/gi进行/vn自动化测试/gi，/w主要/b运行/gi系统/gi的/ude1测试/gi集/q，/w从/p逻辑/n和/cc业务/gi层面/n检测/gi可执行/nz镜像/gi是否/v合/v。/w验证/v通过/p后/f，/w将/d镜像/gi推送/nz到/v镜像/gi仓库/gi中/f，/w并/cc进行/vn发布/gi新版本/nz。/w在/p测试人员/n接收/gi新版本/nz通知/gi后/f，/w从/p镜像/gi仓库/gi拉取/nz相应/vi版本/n的/ude1镜像/gi，/w然后/c在/p测试/gi进行/vn部署/gi，/w对/p特定/b的/ude1功能/gi和/cc问题/gi进行/vn测试/gi，/w然后/c将/d测试/gi结果/n反馈/gi给/p开发人员/n。/w通过/p这种/r开发流程/gi，/w可以/v将/d开发/gi和/cc测试人员/n都/d集中/v到/v特定/b的/ude1需求/gi和/cc问题/gi上/f，/w增加/v了/ule版本/n迭代/gi更新/gi能力/gi，/w快速/d推进/vi项目/gi的/ude1进度/gi。/w2./nz隔离/vn环境/n差异/n，/w方便/a追踪/gi调试/gi传统开发/gi模式/gi中/f，/w代码/gi从/p开发人员/n的/ude1环境/n到/v最终/d在/p生产/gi环境/n上/f的/ude1部署/gi，/w需要/v经过/p很/d多/a的/ude1中间/f环境/n，/w每/rz一/nz个/q中间/f环境/n都/d有/vyou自己/rr一/nz些/q的/ude1差别/n，/w导致/gi开发环境/gi和/cc生成/v环境/n存在/v很/d多/a差别/n。/w一旦/d出现/vbug/gi，/w经常/d要/v耗费/v大量/m时间/gi和/cc精力/n，/w解决/v环境/n不/d一致/a的/ude1问题/gi。/w而/cc使用/gidocker/gi，/w开发环境/gi和/cc生成/v环境/n都/d是/vshi用/p相同/a的/ude1镜像/gi，/w应用/gi就/d会/v运行/gi在/p相同/a的/ude1环境/n中/f，/w这样/rzv不仅/c简化/gi代码/gi流水线/n管理/gi，/w也/d使得/vi问题/gi追踪/gi起来/vf非常/d方便/a。/w同时/cdocker/gi提供/v了/ule很/d多/a的/ude1功能/gi，/w包括/v可以/v为/p容器/gi设置/gi检查点/n、/w设置/gi版本/n和/cc查看/gi两/nz个/q容器/gi之间/f的/ude1差别/n，/w这些/rz特性/gi可以/v帮助/v调试/gibug/gi，/w快速/d定位/gibug/gi，/w从而/c有/vyou针对性/n进行/vn修复/gi和/cc完善/v。/w3./nz快速/d部署/gi，/w持续/vd交付/v在/p虚拟机/gi或者/c物理机/nz部署/gi分布式系统/gi，/w通常/d比较/gi耗时/vi，/w即使/c是/vshi最快/d的/ude1虚拟机/gi也/d要/v30/nz秒/qt到/v1/nz分钟/qt左右/f。/wdocker/gi的/ude1虚拟化技术/gi在/p创建/gi容器/gi过程/gi，/w通常/d秒级/nz时间/gi就/d可以/v完成/v，/w大大提高/i部署/gi效率/gi，/w而且/c这种/r方式/n部署/gi出来/vf的/ude1系统/gi还/d较为/d可靠/a。/w4./nz方便/a应对/v需求/gi定制/n和/cc版本升级/gi联想/vi企业/gi云/gi为/p企业/gi用户/gi提供/v定制/n需求/gi服务/gi，/w每个/r企业/gi都会/n有/vyou自己/rr独立/a的/ude1定制/n服务/gi，/w如果/c使用/gi传统/n方式/n应对/v定制/n服务/gi，/w将/d会/v耗费/v大量/m的/ude1时间/gi和/cc精力/n处理/vn环境/n和/cc应用程序/nz的/ude1版本控制/gi上/f。/w而/cc使用/gidocker/gi容器/gi技术/gi可以/v轻松/a应对/v企业/gi定制/n需求/gi。/w因为/cdocker/gi容器/gi的/ude1一个/mq特性/gi就是/v应用程序/nz与/cc数据/gi分离/vi，/w可以/v保持数据/n不变/nz的/ude1情况/n，/w对/p应用程序/nz进行/vn升级/vi。/w具体/a我们/rr在/p实践/gi时/qt，/w首先/d企业/gi内部/f的/ude1私有镜/nz像/v仓库/gi升级/vi，/w然后/c其他/rzv各/rz台/q机器/gi的/ude1镜像/gi与/cc私有/gi仓库/gi同步/gi，/w然后/c启动/gi新的/a容器/gi，/w就/d会/v完成/v整个/b分布式系统/gi的/ude1升级/vi。/w通过/p这种/r方式/n，/w开发人员/n不用/d关心/v企业/gi的/ude1网络/gi环境/n和/cc版本管理/gi，/w只要/c关注/v定制/n需求/gi的/ude1研发/gi上/f，/w不仅/c提高/v了/ule研发/gi效率/gi，/w而且/c增加/v企业/gi定制/n服务/gi的/ude1能力/gi。/w /x现有/v的/ude1管理工具/nz，/w如/vkubernate/nz，/w并/cc不是/c容易/ad使用/gi，/w尤其/d对于/p中小企业/gi的/ude1运维/gi人员/gi，/w操作/gi起来/vf较为/d困难/an。/w如果/c直接/ad使用/gi这些/rz管理工具/nz，/w一方面/c不能/v和/cc我们/rr的/ude1产品/gi很好/ad对接/vi，/w另一方面/c会/v影响/gi我们/rr的/ude1私有云/nz产品/gi的/ude1体验/v。/w于是/cc为了/p满足/v上面/f需求/gi，/w结合/v联想/vi企业/gi云存储/gi的/ude1特点/n，/w我们/rr开发/gi了/ule一套/nz管理系统/gi，/w主要/b模块/gi和/cc功能/gi如图所示/i。/w这套/r管理系统/gi融合/v了/uledocker/gi自动化/gi部署/gi、/w动态/gi配置/gi、/w自动化/gi监控/gi和/cc报警/vn和/cc动态/gi扩容/v等/udeng功能/gi，/w操作/gi起来/vf比较简单/l，/w非常容易/l使用/gi。/w开发人员/n、/w测试人员/n和/cc运维/gi人员/gi都/d可以/v很/d方便使用/n这套/r系统/gi，/w我们/rr的/ude1企业/gi客户/n用/p了/ule我们/rr这套/r管理系统/gi，/w都/d表示/v容易/ad上手/vi，/w再/d加上/v能够/v对系统/l和/cc容器/gi的/ude1监控/gi和/cc报警/vn，/w他们/rr觉得/v联想/vi企业/gi云存储/gi产品/gi比较/gi可靠/a，/w用/p起来/vf比较/gi放心/v。/wdocker/gi容器/gi技术/gi轻松/a解决/v了/ule开发环境/gi和/cc生成/v环境/n不/d一致/a的/ude1难题/n，/w将/d开发人员/n、/w测试人员/n和/cc运维/gi人员/gi从/p繁杂/a的/ude1部署/gi环境/n解脱/v出来/vf，/w让/v他们/rr专注/vi于/p自己/rr关注/v的/ude1内容/gi上/f，/w降低/v了/ule人力/gi和/cc物力/n成本/n，/w同时/c提高/v了/ule工作效率/nz。/wdocker/gi容器/gi发展/gi至今/d，/w相应/vi的/ude1配套/vn工具/gi和/cc解决方案/gi层出不穷/vl，/w在/p具体/a选取/gi时/qt，/w不要/d盲目/ad追求/v技术/gi的/ude1‘/w高精尖/b’/w，/w要/v注意/v与/cc自己/rr的/ude1产品/gi和/cc需求/gi相结合/nz，/w容易/ad使用/gi和/cc稳定/an可靠/a往往/d更/d重要/a，/w这/rzv也/d是/vshidocker/gi能够/v迅猛发展/nz和/cc推广/gi的/ude1一个/mq主要/b原因/n。/w