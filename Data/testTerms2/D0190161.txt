#Win/nz32/nz多线程/gi编程/gi(/nz6/nz)/nz /x―/w /x多线程/gi协作/gi及/cc线程/gi的/ude1池化/nz管理/gi
多/a线/n程级/nz别的/rzv并行计算/gi写/v多线程/gi应用程序/nz最/d困难/an的/ude1地方/n在于/v如何/ryv使/v各/rz线程/gi的/ude1工作/gi协调/gi进行/vn。/wwindows/gi提供/v的/ude1用于/v线程/gi间通信/n的/ude1各种/rz机制/gi是/vshi很容易/nz掌握/v的/ude1，/w可是/c要/v把/pba它们/rr应用/gi到/v工作/gi中/f完成/v既定/b的/ude1功能/gi时/qt就/d会/v遇到/v这样/rzv、/w那样/rzv的/ude1困难/an。/w对于/p常见/a的/ude1“/w生产者-消费者/nz”模型/nz，/w只要/c采取/v合理/a同步/gi措施/gi实现/gi数据交换/nz的/ude1统一性/n即可/v。/w这类/r模型/gi中的/v多线程/gi往往/d任务/gi独立/a，/w主要/b两/nz类/gi线程/gi，/w一类/b写/v线程/gi（/w生产者/n）/w，/w一类/b读/v线程/gi（/w消费者/n）/w。/w但/c在/p实际/n应用/gi中/f，/w多/a核机器/nz往往/d需要/v使用/gi多线程/gi来/vf协作/gi处理/vn一/nz项/q大规模/b的/ude1计算/gi任务/gi，/w这/rzv涉及/v到/v并行计算/gi的/ude1概念/gi和/cc。/w如何/ryv让/v多/a个/q处理器/gi（/w多/a个/q线程/gi）/w协作/gi完成/v一项/nz大规模/b的/ude1任务/gi，/w涉及/v到/v任务/gi的/ude1分解/gi和/cc调度/vn。/w因此/c，/w多核/nz编程技术/nz的/ude1关键问题/n在于/v如何/ryv将/d计算/gi均匀/a分摊/v到/v各个/rzcpu/gi核上/nz。/w并行/vn(/nzparallel/nz)/nz计算/gi，/w即/v空间/n复用/gi多/a个/q处理器/gi，/w属于/v线程/gi级别/n上/f的/ude1协作/gi。/w关于/p多线程/gi协作/gi，/w参阅/v王艳平/nz著/nz《/wwindows/gi程序设计/gi》/w第/mq3/nz章/q《/wwin/nz32/nz程序/gi的/ude1执行/v单元/n》/w中的/vcrapidfinder/nz例程/gi。/w该/rz例程/gi演示/gi了/ule如何/ryv使用/gi多线程/gi协助/v完成/v文件/gi搜索/gi任务/gi。/w多/a进程/gi协助/v完成/v任务/gi―/w分布式计算/nz的/ude1滥觞/n分布式计算/nz则/d是/vshi进程/gi级别/n上/f的/ude1协作/gi，/w它/rr是/vshi一/nz种/q把/pba需要/v进行/vn大量/m计算/gi的/ude1工程/n数据分割/nz成/v小块/nz，/w由/p多台计算机/n分别/d计算/gi，/w在/p上传/v运算/gi结果/n后/f再/d统一/vn合并/gi得出/v数据/gi结论/gi的/ude1技术/gi。/w现代/ntc大规模/bcg/nz视觉/n特效/b的/ude1渲染/gi系统/gi有/vyou很/d多/a渲染/gi节点/gi组成/gi，/w采用/v领先/gi的/ude1分布式/gi渲染/gi技术/gi，/w系统/gi将/d自动/d确定/v网络/gi中/f可用/v的/ude1渲染/gi节点/gi和/cc资源/gi，/w同时/c将将/d任务/gi分解/gi到/v相应/vi渲染/gi节点/gi，/w自动/d负载平衡/nz功能/gi可以/v优化/gi工作/gi流程/gi中/f每个/r渲染/gi节点/gi的/ude1使用/gi效率/gi。/w从/p《/w后天/n》/w到/v《/w2012/nz》/w，/w再/d到/v《/w阿凡达/nrf》/w，/w这些/rz大/a电影/gi，/w其/rz数/n以/ppb/nz计/vi艰苦卓绝/bl的/ude1渲染/gi工作/gi无不/d依赖于/v现代/ntc分布式/gi集群/gi工作站/nis的/ude1协同作战/v。/w线程/gi的/ude1池化/nz管理/gi通常/d情况下/nz，/w内存/gi的/ude1分配/gi和/cc释放/gi通常/d都/d是/vshimallloc/nz和/ccfree/nz显式/nz进行/vn的/ude1。/w对/p同/p一块/s内存/gi的/ude1多/a次/qv释放/gi通常/d会/v导致/gi页面/gi错误/gi，/w而/cc一直/d不/d释放/gi又/d导致/gi内存/gi泄露/gi，/w并且/c使/v系统/gi性能/gi大大/d下降/vi。/w频繁/a地/ude2创建/gi和/cc销毁/v内存/gi资源/gi是/vshi很/d耗时间/n的/ude1，/w因为/c创建/gi一个/mq对象/gi要/v获取/gi内存/gi资源/gi或者/c其它/rz更多/ad资源/gi。/wmalloc/nz//nzfree/nz操纵/gi的/ude1是/vshi进程/gi堆/gi内存/gi，/wc/nz//nzc/nz运行库/nz不/d允许/v两/nz个/q线程/gi同时/c从/p内存/gi堆/gi中/f分配内存/n，/w这种/r多线程/gi同步操作/l也/d是/vshi相当/d耗时/vi的/ude1。/w对于/p共享资源/nz，/w有/vyou一个/mq很/d著名/a的/ude1设计模式/nz：/w资源/gi池/ng（/wresource pool/nz）/w。/w该/rz模式/gi正是/v为了/p解决/v资源/gi的/ude1频繁/a分配/gi和/cc释放/gi所/usuo造成/v的/ude1问题/gi。/w如何/ryv利用/v已有/v对象/gi来/vf服务/gi就是/v一个/mq需要/v解决/v的/ude1关键问题/n，/w其实/d这/rzv就是/v一/nz些/q“池化/nz资源/gi”/w技术/gi产生/v的/ude1原因/n。/w、/w等/udeng正是/v基于/p这/rzv一/nz思想/gi而/cc产生/v的/ude1。/w对于/p单核/npc/nz，/w多线程/gi微观/n串行/b；/w对于/p多处理器/l系统/gi，/w使用/gi多线程/gi技术/gi可以/v充分发挥/nz硬件/gi的/ude1优势/gi。/w理论上/nz，/w安装/gi了/ulen/nz核/ncpu/gi的/ude1pc/nz，/w在/p某/rz一时/d刻/v，/w系统/gi底层/n所能/v并发/gi执行/v的/ude1线程/gi个数/n为/pn/nz。/w然而/c，/w线程/gi的/ude1数量/n并/cc不是/c多多益善/vl。/w首先/d，/w线程/gi这种/r内核/gi资源/gi的/ude1创建/gi和/cc销毁/v本身/rz就/d很/d耗/v系统资源/gi；/w其次/c，/w频繁/a的/ude1线程/gi上下文/gi切换/vn也/d会/v耗费/v较多/d的/ude1cpu/gi时钟/gi周期/n。/w借鉴/gi数据库连接池/gi和/cc内存/gi池/ng的/ude1池化/nz管理/gi思想/gi，/w对于/p线程/gi也/d可以/v实行/v池/ng化/v管理/gi。/w在/p讨论/giwinsock/nz的/ude1五种/nzi/nz//nzo/nz模型/gi中/f，/w选择/gi模型/gi（/wselect/nz、/wwsaasyncselcet/nz、/wwsaeventselect/nz）/w基于/p消息/n轮询/nz或/c事件/gi等待/gi，/w对于/p多用户/n并发/gi响应/v往往/d为/p每个/r客户/n连接/gi创建/gi一个/mqi/nz//nzo/nz伺服/vn线程/gi。/w这种/r单/b连接/gi单线程/gi的/ude1处理方式/n，/w对于/p中小型/b服务器/gi较为/d通用/gi，/w但/c对/p大规模/b多用户/n的/ude1服务器/gi的/ude1高并发/gi需求/gi无能为力/vl。/w完成/v端口/gi模型/gi本质/n上/f利用/v了/ulewin/nz32/nz重叠/vii/nz//nzo/nz机制/gi，/w底层/n利用/v完成/v端口/gi队列/gi对象/gi来/vf管理/gi一个线/nz程池/nz。/w关于/p线程池/gi规模/gi，/w根据/p经验/gi为/p每个/r处理器/gi创建/gi2/nz个/q线程/gi，/w即/v工作/gi线程/gi数/n为/pcpu/gi数/n的/ude1两倍/nz，/w因为/c并/cc不是/c每个/r线程/gi都/d是/vshi可/v调度/vn的/ude1。/w参考/gi《/w》/w、/w《/w》/w。/w一个/mq大规模/b高并发/gi的/ude1服务器/gi对于/p资源/gi的/ude1管理/gi至关重要/bl，/w因此/c往往/d同时/c使用/gi数据库连接池/gi、/w内存/gi池/ng和/cc线程池/gi，/w对/p关键/n资源/gi实行/v池/ng化/v管理/gi。/w一般/ad一个/mq简单线/nz程池/nz至少/d包含/v下列/b组成/gi部分/n。/w线程池/gi管理器/nz（/wthreadpoolmanager/nz）/w：/w用于/v创建/gi并/cc管理/gi线程池/gi工作/gi线程/gi（/wworkthread/nz）/w：/w线程池/gi中/f线程/gi任务/gi接口/gi（/wtask/nz）/w：/w每个/r任务/gi必须/d实现/gi的/ude1接口/gi，/w以/p供/vi工作/gi线程/gi调度/vn任务/gi的/ude1执行/v。/w任务/gi队列/gi：/w用于/v存放/v没有/v处理/vn的/ude1任务/gi。/w提供/v一种/nz缓冲/vn机制/gi。/w基于/piocp/nz使用/gi资源/gi池化/nz技术/gi实现/gi高性能/gi的/ude1服务器/gi，/w参阅/v王艳平/nz、/w张越著/nz《/wwindows/gi网络/gi与/cc通信/gi程序设计/gi》/w第/mq4/nz章/q《/wiocp/nz与/cc可/v伸缩/vn网络/gi程序/gi》/w中的/v例程/gi。/w下图/n为/pciocpserver/nz的/ude1系统/gi结构图/gi。/wciocpserver/nz系统/gi结构图/gi参考/gi：/w《/w》/w《/w》/w《/w》/w《/w》/w扩展/gi阅读/gi：/w《/w》/w《/w》/w《/w》/w《/w》/w