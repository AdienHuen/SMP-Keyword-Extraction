#ORM/nz进阶/gi：/wHibernate/nz的/ude1优劣/n对比/gi
hibernate/gi是/vshi一种/nz是/vshi轻量级/gi的/ude1ormapping/nz框架/gi。/w学/v过/uguoentityframework/nz的/ude1，/w会/v感觉/gi挺/d亲切/a的/ude1。/w对于/p各种/rz层次/n程序员/gi对/p数据库/gi的/ude1设计/gi：/w /x小菜/n程序猿/nr这样/rzv做/v：/w首先/d考虑/v数据/gi的/ude1存储/gi，/w对于/p功能/gi的/ude1实现/gi，/w如何/ryv方便/a如何/ryv来/vf。/w至于/p说/v冗余/n神马/nz的/ude1，/w不予/v考虑/v。/w /x资深/b程序猿/nr这样/rzv做/v：/w首先/d设计/gi数据库/gi的/ude1关系/gi模型/gi，/w用/p工具/gi画画/ver/gi图/gi，/w或者/c画一下/nz物理模型/gp。/w考虑一下/n关系/gi模型/gi。/w好/a点儿/q的/ude1懂得/v利用/v工具/gi，/w把/pba设计/gi好/a的/ude1模型/gi转换成/i数据库/gi脚本/gi。/w然后/c扔/v数据库/gi里/f。/w然后/c，/w在/p功能/gi实现/gi过程/gi中/f，/w对于/p难以实现/l的/ude1功能/gi，/w算啦/v，/w还是/c修改/gi一下/m数据库/gi。/w这样/rzv好/a做/v多/a了/ule。/w /x骨灰级/nz程序猿/nr这样/rzv做/v：/w首先/d分析/gi业务/gi需求/gi，/w设计/gi对象/gi模型/gi。/w考虑/v各种/rz多重度/nz，/w维护/gi关系/gi等等/udeng。/w考虑/v数据/gi的/ude1存储/gi性能/gi，/w数据量/n的/ude1影响/gi…/w…/w以上/f纯属/v…/w…/w…/w…/w /x在/p面向对象/gi的/ude1世界/gi中/f，/w对象/gi模型/gi是/vshi非常/d重要/a的/ude1。/w因为/c面向对象/gi的/ude1思想/gi使得/vi职责/gi更加/d清晰/a。/w /x使用/gi面向对象/gi的/ude1编程/gi，/w开发/gi过程/gi中/f，/w可以/v不用/d考虑/v表/n结构/gi。/w脑子里/n没有/v表/n的/ude1概念/gi。/w只/d对/p对象/gi进行/vn操作/gi。/whibernate/gi作为/p持久/a层/gi：/w使用/gihibernate/gi的/ude1好处/gi：/w1/nz、/w使/v开发人员/n职责/gi专一/a。/whibernate/gi自己/rr封装/gi了/ule一套/nz机制/gi。/w通过/p对象/gi模型/gi和/cc*/nz./nzhbm/nz./nzxml/nz配置/gi信息/gi，/w自动/d的/ude1将/d对象/gi模型/gi转换成/i表/n结构/gi。/w使得/vi开发人员/n，/w只/d关注/v对象/gi，/w忽略/v表/n结构/gi。/w面向对象/gi的/ude1开发/gi。/w2/nz、/w持久/a层/gi容易/ad更换/v。/whibernate/gi是/vshi轻量级/gi的/ude1持久/a层/gi框架/gi，/w也/d容易/ad进行/vn更换/v。/w比如/v更换/v存储/gi方式/n，/w只/d需要/v修改/gi*/nz./nzhbm/nz./nzxml/nz文件/gi即可/v。/w重新/d生成/v表/n结构/gi。/w而/cc代码/gi不用/d进行/vn修改/gi。/w所以/c使用/gihibernate/gi更加/d容易/ad进行/vn转换/gi3/nz、/w提高/v了/ule编码/gi效率/gi。/w使用/gihibernate/gi作为/p持久/a层/gi，/w省去/v了/ulejdbc/gi代码/gi。/w使得/vi业务/gi层/gi开发人员/n不/d需要/v考虑/v数据/gi的/ude1逻辑结构/gi，/w只/d关心/v业务/gi的/ude1数据/gi实体/n。/whibernate/gi的/ude1缺点/gi：/w1/nz、/w不/d灵活/a。/w既然/c操作/gi的/ude1都/d是/vshi对象/gi，/w相比/vi与/cc使用/gi传统/n的/ude1sql语句/gi来说/uls，/w不方便/nz。/w3/nz、/w实现/gi复杂/a。/w而且/c很/d多/a复杂/a的/ude1查询/gisql语句/gi，/w很难/d用/phibernate/gi进行/vn查询/gi。/w所以/c对于/p程序/gi的/ude1调优/gi来说/uls有/vyou困难/an。/w3/nz、/w大数据处理/gi慢/a。/w对象/gi模型/gi和/cc关系/gi模型/gi的/ude1转换/gi，/w将/d带来/v时间/gi消耗/gi。/w所以/chibernate/gi对/p大批量/d的/ude1数据/gi操作/gi还/d存在/v问题/gi。/w