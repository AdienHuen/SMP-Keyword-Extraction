#架构/gi是/vshi一种/nz妥协/vi
车辆/n调度/vn系统/gi陆续/d写/v了/ule半年/nz时间/gi了/ule，/w中间/f经历/gi老人/n故/c去/vf，/w儿子/n降生/vi，/w一波三折/vl。/w最近/t才/d静下心来/l写/v了/ule一周/nz时间/gi，/w由于/p是/vshi在/p前/f一个/mq版本/n上/f迭代/gi开发/gi的/ude1，/w整体/n速度/n还是/c很快/d的/ude1。/w而且/c在/p和尚/nnt兄/ng的/ude1指导/vn下/f，/w系统/gi使用/gi的/ude1技术/gi有/vyou了/ule很/d多/a进步/vn。/w比如/v首次/mq使用/gi了/uleasp/nz.net/gi的/ude1窗体/gi验证/v机制/gi，/wef/nz的/ude1生命周期管理/gi等/udeng东西/n。/w并且/c对/p界面/gi做/v了/ule一/nz些/q改进/gi，/w整体/n已经/d非常/d成熟/a了/ule。/w从/p实现/gi功能/gi的/ude1角度/n来说/uls是/vshi完全/ad没有/v问题/gi的/ude1。/w我/rr使用/gi了/ule三层架构/gi来/vf重新/d搭建/v这个/rz系统/gi，/w看上去/v好像/v没有/v什么/ry问题/gi。/w但是/c写/v着/uzhe写/v着/uzhe，/w问题/gi就/d出来/vf了/ule。/w三层/nz中的/v业务/gi层/gi，/w只是/d简单/a的/ude1调用/gi了/uledal/gi层/gi中的/v一些/m方法/gi，/w做/v了/ule一/nz些/q简单/a的/ude1判断/gi。/w可以/v理解/gi为/pdal/gi层/gi的/ude1一个/mq门面/n模式/gi。/w由于/p都/d是/vshi一/nz个人/n在/p写/v，/w越来越/d觉得/v这/rzv东西/n是/vshi脱裤子/nz放屁/v多此一举/vl。/w /x什么/ry是/vshi业务/gi层/gi？/w我/rr说不清楚/l，/w越来越/d觉得/v这个/rz东西/n弊病/n太多/ad。/w之所以/c使用/gibll/nz，/w更多/ad的/ude1是/vshi一种/nz技术/gi上/f的/ude1不/d自信/gi，/w一味/d地/ude2想/v向/p标准/gi靠拢/gi，/w没有/v考虑/v实际/n情况/n。/w很/d多/a人/n号称/v的/ude1三层架构/gi，/w其实/d也/d和/cc我/rr一样/uyy，/w都/d是/vshi调用/gi了/uledal/gi中/fcrud/nz方法/gi。/w真的/d做到/v解/v耦合/vn了/ule吗/y？/w未必/d。/w我们/rr的/ude1核心业务/gi变化/gi不大/d，/w和/cc互联网/gi场景/gi不/d一样/uyy，/w是/vshi一套/nz典型/n的/ude1crud/nz集中/v的/ude1业务/gi。/w加上/v内网/n良好/a的/ude1网络/gi环境/n和/cc高效/b的/ude1服务器/gi支持/v，/w所以/c整个/b业务/gi是/vshi偏向/n前端/gi的/ude1，/w就是说/c网页/gi要/v做/v的/ude1漂亮/a，/w操作/gi起来/vf要/v顺手/d。/w网页/gi端的/z变化/gi性/ng比较/gi大/a。/w而/cc后端/f核心业务/gi的/ude1变化/gi其实/d并不大/v。/w为什么/ryv一定/b要/v使用/gi三层/nz呢/y？/w从/pui/gi层/gi直接/ad访问/gidal/gi层/gi不/d也/d可以/v吗/y？/w但是/c有人/r说/v了/ule，/w这样/rzv代码/gi不够/a简洁/gi，/w臃肿/a。/w事实上/bl，/w很/d多/a小型/b系统/gi都/d没有/v使用/gi所谓/v的/ude1三层架构/gi。/w抛开/v技术/gi不/d谈/v，/w三层架构/gi实际上/d更多/ad的/ude1是/vshi分担/gi复杂性/gi的/ude1一种/nz方法/gi，/w让/v好/a几/d拨/v人/n来/vf分别/d干/v不同/a的/ude1活儿/n。/w而/cc目前/t这种/r场景/gi下/f，/w我/rr一/nz个人/n干/v所有/b的/ude1活儿/n，/w可扩展性/gi并不/d那么/c重要/a。/w更多/ad的/ude1是/vshi简洁/gi快速/d的/ude1编写/gi出稳定/nz可/v运行/gi的/ude1代码/gi。/w所有/b的/ude1架构/gi都/d是/vshi一种/nz选择/gi，/w要/v根据/p具体/a的/ude1环境/n来/vf做/v决定/v，/w不可/v拘泥/vi，/w切记/v切记/v！/w