#设计模式/nz（/w十三/nz）/w策略模式/gi（/wStrategy/nz）/w-行为/nz型/k
前两天/i去/vf张家界/ns玩/v了/ule，/w一直/d荒废/v了/ule学习/gi，/w持续/vd两/nz天都/ns没/d在/p状态/gi，/w今天/t好好/d恢复/gi下/f。/w发篇/nz博文/nz吧/y！/w策略模式/gi（/wstrategy/gi）/w策略模式/gi就是/v定义/gi了/ule一系列/b的/ude1算法/gi，/w并/cc将/d每/rz一个/mq算法/gi封装/gi起来/vf，/w而且/c使/v他们/rr还/d可以/v互相/d替换/v。/w策略模式/gi让/v算法/gi独立/a于/p使用/gi它/rr的/ude1客户/n而/cc独立/a变化/gi。/w     /x策略模式/gi就是/v提供/v相同/a的/ude1接口/gi，/w软件开发/nz人员/gi可以/v根据/p相应/vi的/ude1接口/gi实现/gi不同/a的/ude1策略/gi。/w然后/c根据/p不同/a的/ude1情况/n选择/gi不同/a的/ude1策略/gi，/w从而/c实现/gi客户端/gi代码/gi不用/d修改/gi，/w只/d需要/v替换/v不同/a的/ude1策略/gi实现/gi类/gi即可/v。/w策略模式/gi的/ude1实现/gi原理/gi  /x策略模式/gi实现/gi原理/gi /x采用/v策略模式/gi，/w减少/v条件/n语句/gi的/ude1输出/gi。/w实现/gi抽象/gi策略/gi类/gi：/w策略/gi类/gi1/nz：/w策略/gi类/gi2/nz：/w上下文/gi类/gi：/w /x此处/s的/ude1strategy/gi需要/v注入/gi进去/vf，/w可以/v通过/p构造函数/gi初始化/v，/w也/d可以/v通过/pspring/gi的/ude1注入/gi。/w