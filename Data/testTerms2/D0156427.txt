#软件开发/nz模式/gi对比/gi(/nz瀑布/gi、/w迭代/gi、/w螺旋/gi、/w敏捷/gi)/nz
1/nz、/w瀑布模型/gi是/vshi由/pw/nz./nzw/nz./nzroyce/nz在/p1970/nz年最初/nz提出/v的/ude1软件开发/nz模型/gi，/w　/nz瀑布/gi式/k开发/gi是/vshi一种/nz老旧/nz的/ude1计算机软件/gi开发方法/nz。/w瀑布模型/gi式/k是/vshi最/d典型/n的/ude1预见性/n的/ude1方法/gi，/w严/a遵循/gi预先计划/n的/ude1需求分析/gi、/w设计/gi、/w编码/gi、/w集成/vn、/w测试/gi、/w维护/gi的/ude1步骤/gi顺序/gi进行/vn。/w步骤/gi成果/gi作为/p衡量/v进度/gi的/ude1方法/gi，/w例如/v需求/gi规/ng，/w设计/gi文档/gi，/w测试计划/gi和/cc代码/gi审阅/v等等/udeng。/w瀑布/gi式/k的/ude1主要/b的/ude1问题/gi是/vshi它/rr的/ude1严/a分级/gi导致/gi的/ude1自由度/n降低/v，/w项目/gi早期/f即/v作出/v承诺/vn导致/gi对/p后期/f需求/gi的/ude1变化/gi难以/d调整/vn，/w代价/gi高昂/a。/w瀑布/gi式/k方法/gi在/p需求/gi不明/v并且/c在/p项目/gi进行/vn过程/gi中/f可能/v变化/gi的/ude1情况下/nz基本/a是/vshi不/d可行/a的/ude1。/w2/nz、/w迭代/gi式/k开发/gi也/d被称作/n迭代/gi增量式/nz开发/gi或/c迭代/gi进化/vn式/k开发/gi，/w是/vshi一种/nz与/cc传统/n的/ude1瀑布/gi式/k开发/gi相反/vi的/ude1软件开发/nz过程/gi，/w它/rr弥补/v了/ule传统/n开发方式/nz中的/v一/nz些/q弱点/n，/w具有/v更高/d的/ude1成功率/n和/cc生产率/n。/w什么/ry是/vshi迭代/gi式/k开发/gi？/w每次/r只/d设计/gi和/cc实现/gi这个/rz产品/gi的/ude1一/nz部分/n,/nz逐步/d逐步/d完成/v的/ude1方法/gi叫/vi迭代/gi开发/gi,/nz每次/r设计/gi和/cc实现/gi一个/mq阶段/gi叫做/v一个/mq迭代/gi./nz在/p迭代/gi式/k开发方法/nz中/f，/w整个/b开发/gi工作/gi被/pbei组织/gi为/p一系列/b的/ude1短小的/nz、/w固定/a长度/gi（/w如/v3/nz周/qt）/w的/ude1小/a项目/gi，/w被/pbei称为/v一系列/b的/ude1迭代/gi。/w每一次/d迭代/gi都/d包括/v了/ule需求分析/gi、/w设计/gi、/w实现/gi与/cc测试/gi。/w采用/v这种/r方法/gi，/w开发/gi工作/gi可以/v在/p需求/gi被/pbei完整/a地/ude2确定/v之前/f启动/gi，/w并/cc在/p一次迭代/nz中/f完成/v系统/gi的/ude1一/nz部分/n功能/gi或/c业务逻辑/gi的/ude1开发/gi工作/gi。/w再/d通过/p客户/n的/ude1反馈/gi来/vf细化/v需求/gi，/w并/cc开始/v新一轮/nz的/ude1迭代/gi。/w迭代/gi式/k开发/gi的/ude1优点/gi：/w　　/nz1/nz、/w降低/v风险/gi　　/nz2/nz、/w得到/v早期/f用户/gi反馈/gi　/nz　/nz3/nz、/w持续/vd的/ude1测试/gi和/cc集成/vn　　/nz4/nz、/w使用/gi变更/gi　　/nz5/nz、/w提高/v复用/gi性/ng螺旋/gi开发/gi，/w1988/nz年/qt，/w巴利・玻姆/nz(/nzbarry boehm/nz)/nz正式/ad发表/v了/ule软件系统/gi开发/gi的/ude1“/w螺旋模型/gi”/w，/w它/rr将/d瀑布模型/gi和/cc快速/d原型/gi模型/gi结合/v起来/vf，/w强调/v了/ule其他/rzv模型/gi所/usuo忽视/v的/ude1风险分析/gi，/w特别/d适合于/v大型/b复杂/a的/ude1系统/gi。/w“/w螺旋模型/gi”/w刚开始/nz规模/gi很小/a，/w当/p项目/gi被/pbei定义/gi得/ude3更好/d、/w更/d稳定/an时/qt，/w逐渐/d展开/v。/w　　/nz“/w螺旋模型/gi”/w的/ude1核心/n就/d在于/v您/rr不/d需要/v在/p刚开始/nz的/ude1时候/n就/d把/pba所有/b事情/n都/d定义/gi的/ude1清清楚楚/z。/w您/rr轻松/a上阵/vi，/w定义/gi最重要/nz的/ude1功能/gi，/w实现/gi它/rr，/w然后/c听取/v客户/n的/ude1意见/gi，/w之后/f再/d进入/v到/v下一个/nz阶段/gi。/w如此/rzv不断/d轮回/vi重复/gi，/w直到/v得到/v您/rr满意/v的/ude1最终产品/nz。/w   /x（/w1/nz）/w制定/gi计划/gi：/w确定/v软件/gi目标/gi，/w选定/v实施方案/nz，/w弄清/v项目开发/gi的/ude1限制/vn条件/n；/w　　/nz（/w2/nz）/w风险分析/gi：/w分析/gi评估所/n选/v方案/gi，/w考虑/v如何/ryv识别/gi和/cc消除/v风险/gi；/w　　/nz（/w3/nz）/w实施/gi工程/n：/w实施/gi软件开发/nz和/cc验证/v；/w　　/nz（/w4/nz）/w客户/n评估/gi：/w评价/gi开发/gi工作/gi，/w提出/v修正/v建议/gi，/w制定/gi下一步/nz计划/gi。/w螺旋模型/gi很大/d程度/n上/f是/vshi一种/nz风险/gi驱动/gi的/ude1方法/gi体系/gi，/w因为/c在/p每个/r阶段/gi之前/f及/cc经常/d发生/v的/ude1循环/gi之前/f，/w都/d必须/d首先/d进行/vn风险评估/gi。/w　/nz敏捷/gi软件开发/nz又称/gi敏捷开发/gi，/w是/vshi一种/nz从/p1990/nz年代/n开始/v逐渐/d引起/v广泛/a关注/v的/ude1一/nz些/q新型/gi软件开发/nz方法/gi，/w是/vshi一种/nz应对/v快速/d变化/gi的/ude1需求/gi的/ude1一种/nz软件开发/nz能力/gi。/w它们/rr的/ude1具体/a名称/n、/w理念/gi、/w过程/gi、/w术语/gi都/d不尽相同/i，/w相对于/nz“/w非/b敏捷/gi”/w，/w更/d强调/v程序员/gi团队/gi与/cc业务/gi专家/gi之间/f的/ude1紧密/ad协作/gi、/w面对面/dl的/ude1沟通/gi（/w认为/v比/p书面/b的/ude1文档/gi更/d有效/gi）/w、/w频繁/a交付/v新的/a软件/gi版本/n、/w紧凑/a而/cc自我/rr组织/gi型/k的/ude1团队/gi、/w能够/v很好/ad地/ude2适应/v需求/gi变化/gi的/ude1代码/gi编写/gi和/cc团队/gi组织/gi方法/gi，/w也/d更/d注重/v软件开发/nz中/f人/n的/ude1作用/gi。/w人/n和/cc交互/gi重于/v过程/gi和/cc工具/gi。/w可以/v工作/gi的/ude1软件/gi重于求全/nz而/cc完备/a的/ude1文档/gi。/w客户/n协作/gi重于/v合同/gi谈判/vn。/w随时/d应对/v变化/gi重于/v循规蹈矩/n。/w其中/rz位于/v右边/f的/ude1内容/gi虽然/c也/d有/vyou其/rz价/n，/w但是/c左边/f的/ude1内容/gi最为/d重要/a。/w人员/gi彼此/rr信任/vn /x人/n少/a但是/c精干/a /x可以/v面对面/dl的/ude1沟通/gi项目/gi的/ude1敏捷开发/gi：/w敏捷开发/gi小组/nis主要/b的/ude1工作方式/gi可以/v归纳/v为/p：/w作为/p一个/mq整体/n工作/gi；/w /x按/p短迭/nz代/q周期/n工作/gi；/w /x每次/r迭代/gi交付/v一/nz些/q成果/gi；/w关注/v业务/gi优先级/n；/w /x检查/gi与/cc调整/vn。/w最重要/nz的/ude1因素/gi恐怕/d是/vshi项目/gi的/ude1规模/gi。/w规模/gi增长/gi，/w面对面/dl的/ude1沟通/gi就/d愈加/d困难/an，/w因此/c敏捷/gi方法/gi更/d适用/vi于/p较小/d的/ude1队伍/n，/w40/nz、/w30/nz、/w20/nz、/w10/nz人/n或者/c更少/d。/w大规模/b的/ude1敏捷/gi软件开发/nz尚/d处于/v积极/ad研究/gi的/ude1领域/gi。/w四者/nz对比/gi区别/gi：/w传统/n的/ude1瀑布/gi式/k开发/gi，/w也/d就是/v从/p需求/gi到/v设计/gi，/w从/p设计/gi到/v编码/gi，/w从/p编码/gi到/v测试/gi，/w从/p测试/gi到/v提交/gi大概/d这样/rzv的/ude1流程/gi，/w要求/n每/rz一个/mq开发阶段/n都/d要/v做到/v最好/d。/w特别/d是/vshi前期/f阶段/gi，/w设计/gi的/ude1越/d完美/a，/w提交/gi后/f的/ude1成本/n损失/n就/d越少/nz。/w迭代/gi式/k开发/gi，/w不/d要求/n每/rz一个/mq阶段/gi的/ude1任务/gi做/v的/ude1都/d是/vshi最/d完美/a的/ude1，/w而是/c明明/d知道/v还有/v很/d多/a不足/an的/ude1地方/n，/w却/d偏偏/d不/d去/vf完善/v它/rr，/w而是/c把/pba主要/b功能/gi先/d搭建/v起来/vf为/p目的/gi，/w以/p最/d短/a的/ude1时间/gi，/w最少/d的/ude1损失/n先/d完成/v一个/mq“/w不/d完美/a的/ude1成果/gi物”/nz直至/v提交/gi。/w然后/c再/d通过/p客户/n或/c用户/gi的/ude1反馈/gi信息/gi，/w在/p这个/rz“/w不/d完美/a的/ude1成果/gi物”/nz上/f逐步/d进行/vn完善/v。/w螺旋/gi开发/gi，/w很大/d程度/n上/f是/vshi一种/nz风险/gi驱动/gi的/ude1方法/gi体系/gi，/w因为/c在/p每个/r阶段/gi之前/f及/cc经常/d发生/v的/ude1循环/gi之前/f，/w都/d必须/d首先/d进行/vn风险评估/gi。/w敏捷开发/gi，/w相比/vi迭代/gi式/k开发/gi两者/rzv都/d强调/v在/p较短/d的/ude1开发周期/n提交/gi软件/gi，/w但是/c，/w敏捷开发/gi的/ude1周期/n可能/v更/d短/a，/w并且/c更加/d强调/v队伍/n中的/v高度/d协作/gi。/w敏捷/gi方法/gi有时候/d被/pbei误认为/v是/vshi无/v计划性/n和/cc纪律性/n的/ude1方法/gi，/w实际上/d更/d确切/a的/ude1说法/n是/vshi敏捷/gi方法/gi强调/v适应性/n而非/c预见性/n。/w适应性/n的/ude1方法/gi集中/v在/p快速/d适应/v现实/n的/ude1变化/gi。/w当/p项目/gi的/ude1需求/gi起/vf了/ule变化/gi，/w团队/gi应该/v迅速/ad适应/v。/w这个/rz团队/gi可能/v很难/d确切/a描述/gi未来/t将/d会/v如何/ryv变化/gi./nz