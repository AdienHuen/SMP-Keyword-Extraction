#java/gi单例模式/gi详解/v
    /x单例模式/gi：/w定义/gi：/w确保/v一个/mq类/gi只有/c一个/mq实例/gi，/w而且/c自行/d实例化/gi并/cc向/p整个/b系统/gi提供/v这个/rz实例/gi。/w类型/gi：/w创建类/gi模式/gi类图/gi：/w    /x类图/gi知识点/gi：/w1/nz，/w类图/gi分为/v三部分/nz，/w依次/d是/vshi类名/n、/w属性/gi、/w方法/gi。/w2/nz，/w以/p开头/n和/cc以/p结尾/n的/ude1为/p注释/gi信息/gi。/w3/nz，/w修饰/v符/v代表/nntpublic/nz，/w-代表/nzprivate/nz，/w#/nz代表/nntprotected/nz，/w什么/ry都/d没有/v代表/nnt包/v可见/c。/w4/nz，/w带下/v划线/vi的/ude1属性/gi或/c方法/gi代表/nnt是/vshi静态/gi的/ude1。/w5/nz，/w对/p类图/gi中/f对象/gi的/ude1关系/gi不/d熟悉/v的/ude1朋友/n可以/v参考/gi文章/gi：/w设计模式/nz中/f类/gi的/ude1关系/gi。/w单例模式/gi应该/v是/vshi23/nz种/q设计模式/nz中/f最简单/nz的/ude1一种/nz模式/gi了/ule。/w它/rr有/vyou以下/f几个/nz要素/gi：/w1/nz，/w私有/gi的/ude1构造方法/gi。/w2/nz，/w指向/v自己/rr实例/gi的/ude1私有/gi静态/gi引用/gi。/w3/nz，/w以/p自己/rr实例/gi为/p返回/v的/ude1静态/gi的/ude1公有/b的/ude1方法/gi。/w单例模式/gi根据/p实例化/gi对象/gi时机/n的/ude1不同/a分为/v两/nz种/q：/w一种/nz是/vshi饿汉式单例/gi，/w一种/nz是/vshi懒汉式/gi单例/gi。/w饿汉式单例/gi在/p单例/gi类/gi被/pbei加载/gi时候/n，/w就/d实例化/gi一个/mq对象/gi交给/v自己/rr的/ude1引用/gi；/w而/cc懒汉式/gi在/p调用/gi取得/v实例/gi方法/gi的/ude1时候/n才/d会/v实例化/gi对象/gi。/w代码/gi如下/vi：/w饿汉式单例/gi懒汉式/gi单例/gi    /x单例模式/gi的/ude1优点/gi：/w1/nz，/w在/p内存/gi中/f只有/c一个/mq对象/gi，/w节省/v内存空间/nz。/w2/nz，/w避免/v频繁/a的/ude1创建/gi销毁/v对象/gi，/w可以/v提高/v性能/gi。/w3/nz，/w避免/v对/p共享资源/nz的/ude1多重/b占用/v。/w4/nz，/w可以/v全局/n访问/gi。/w适用/vi场景/gi：/w由于/p单例模式/gi的/ude1以上/f优点/gi，/w所以/c是/vshi编程/gi中用/a的/ude1比较/gi多/a的/ude1一种/nz设计模式/nz。/w我/rr总结/gi了/ule一下/m我/rr所/usuo知道/v的/ude1适合/v使用/gi单例模式/gi的/ude1场景/gi：/w1/nz，/w需要/v频繁/a实例化/gi然后/c销毁/v的/ude1对象/gi。/w2/nz，/w创建对象/n时/qt耗时/vi过多/d或者/c耗/v资源/gi过多/d，/w但/c又/d经常/d用/p到/v的/ude1对象/gi。/w3/nz，/w有/vyou状态/gi的/ude1工具/gi类/gi对象/gi。/w4/nz，/w频繁/a访问/gi数据库/gi或/c文件/gi的/ude1对象/gi。/w单例模式/gi注意事项/nz：/w1/nz，/w只能/v使用/gi单例/gi类/gi提供/v的/ude1方法/gi得到/v单例/gi对象/gi，/w不要/d使用/gi反射/gi，/w否则/c将/d会/v实例化/gi一个/mq新/a对象/gi。/w2/nz，/w不要/d做/v断开/gi单例/gi类/gi对象/gi与/cc类/gi中/f静态/gi引用/gi的/ude1危险/an操作/gi。/w3/nz，/w多线程/gi使用/gi单例/gi使用/gi共享资源/nz时/qt，/w注意/v线程安全/gi问题/gi。/w  /x懒汉式/gi单例/gi线程安全/gi吗/y？/w主要/b是/vshi网上/s的/ude1一些/m说法/n，/w懒汉式/gi的/ude1单例模式/gi是/vshi线程/gi不/d安全/gi的/ude1，/w但是/c在/p实例化/gi对象/gi的/ude1方法/gi上/f加/vsynchronized/nz关键字/gi，/w就是/v线程安全/gi的/ude1。/w单例模式/gi只有/c饿汉式/gi和/cc懒汉式/gi两/nz种/q吗/y？/w饿汉式单例/gi和/cc懒汉式/gi单例/gi只是/d两种/nz比较/gi主流/gi和/cc常用/a的/ude1单例模式/gi方法/gi，/w从/p理论上/nz讲/v，/w任何/rz可以/v实现/gi一个/mq类/gi只有/c一个/mq实例/gi的/ude1设计模式/nz，/w都/d可以/v称为/v单例模式/gi。/w单例/gi类/gi可以/v被/pbei继承/gi吗/y？/w饿汉式单例/gi和/cc懒汉式/gi单例/gi由于/p构造方法/gi是/vshiprivate/nz的/ude1，/w所以/c他们/rr都/d是/vshi不可/v继承/gi的/ude1，/w但是/c其他/rzv很/d多/a单例模式/gi是/vshi可以/v继承/gi的/ude1，/w例如/v登记/gi式/k单例/gi。/w饿汉式单例/gi好/a还是/c懒汉式/gi单例/gi好/a？/w在/pjava/gi中/f，/w饿汉式单例/gi要/v优于/v懒汉式/gi单例/gi。/wc/nz中/f则/d一般/ad使用/gi懒汉式/gi单例/gi。/w