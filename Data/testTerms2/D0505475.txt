#树/gi，/w二叉树/gi
树/gi的/ude1前言/gi:/w头/n一次/nz在/p树上/s面带/nz上/f“容器/nz”/w的/ude1帽子/n。/w之所以/c如此/rzv，/w我/rr觉得/v树/gi也/d是/vshi存储/gi数据/gi的/ude1一种/nz方法/gi，/w而/cc这种/r方法/gi与/cc直线型/b的/ude1存储/gi方式/n不同/a。/w数据/gi使用/gi树形/gi的/ude1方式/n存储/gi，/w从/p一个/mq点/gi向下/vf不断/d的/ude1延伸/v和/cc扩散/v。/w一/nz对/p多/a的/ude1关系/gi。/w树/gi里面/f的/ude1元素/gi可以/v称之为/v节点/gi，/w节点/gi之间/f（/w通常/d）/w使用/gi链/ng式/k的/ude1方法/gi连接/gi而/cc少用/n数组/gi了/ule。/w除了/p将/d树/gi看成/v是/vshi一种/nz可以/v容纳/v元素/gi的/ude1容器/gi，/w也/d应该/v看到/v树/gi也/d是/vshi一种/nz数据类型/gi。/w这种/r类型/gi也/d应该/v有/vyou操作/gi，/w有/vyou成员/nnt。/w树/gi不是/c直线/n，/w它/rr比/p直线/n上/f的/ude1操作/gi实现/gi起来/vf要/v复杂一点/nz。/w而且/c，/w在/p树/gi的/ude1操作/gi上面/f，/w不是/c向/p直线型/b操作/gi那么/c明显/a了/ule：/w要/v完成/v这个/rz操作/gi往往/d需要/v小/a技巧/gi。/w所谓/v的/ude1技巧/gi就是/v考虑/v问题/gi和/cc解决/v的/ude1方法/gi并不/d直观/a。/w要/v有/vyou心理准备/n。/w但是/c基本/a的/ude1思想/gi就是/v分而治之/nz，/w化/v繁/ag为/p简。一个/nz大/a的/ude1问题/gi总/b能够/v划分/v为/p若/c干/v个/q小/a的/ude1问题/gi，/w可以/v一直/d这样/rzv去/vf划分/v，/w指导/vn这个/rz小/a问题/gi可以/v像/v解决/v直线型/b操作/gi那么/c明显/a！/w树/gi不仅仅/d是/vshi容器/gi的/ude1角色/gi。/w树/gi往往/d是/vshi高效算法/gi的/ude1基础/gi。/w如/v查找/gi。/w高效/b的/ude1算法/gi就是/v通过/p实现/gi树上/s的/ude1操作/gi体现/v的/ude1。/w正/d因为/c树/gi这种/r结构/gi既/c能够/v当/p容器/gi用/p，/w也/d能/v支持/v高效/b（/w比/p直线型/b高效/b）/w的/ude1算法/gi，/w所以/c树/gi非常/d的/ude1重要/a，/w也/d非常/d的/ude1得/ude3研究/gi。/w研究/gi的/ude1对象/gi就是/v二叉树/gi了/ule。/w研究/gi的/ude1地方/n在于/v树/gi作为/p容器/gi的/ude1使用/gi，/w重点/n还是/c二叉/b树上/s高效/b的/ude1算法/gi的/ude1实现/gi。/w研究/gi的/ude1方法/gi仍然/d是/vshi边/k写/v代码/gi边/k分析/gi。/w先/d定义/gi接口/gi，/w再/d实现/gi，/w通过/p分析/gi操作/gi去/vf确定/v成员/nnt什么/ry的/ude1。/w还有/v迭代/gi什么/ry的/ude1。/wo/nz(/nz∩/nz_/nz∩/nz)/nzo/nz哈哈/o~/nz