#c++/gi设计/gi模式-----/nzFacade/nz外观模式/gi
facade/gi外观模式/gi：/w    /x外观模式/gi很/d简单/a，/w如果/c有/vyou一个/mq系统/gi，/w有/vyou许许多多/mq的/ude1子系统/gi的/ude1组成/gi。/w而/cc这/rzv这些/rz系统/gi在/p组成/gi一个/mq完整/a的/ude1系统/gi的/ude1时候/n存在/v一定/b的/ude1关系/gi，/w先/d使用/gi哪个/ry子系统/gi，/w后/f使用/gi哪个/ry子系统/gi，/w这/rzv是/vshi一个/mq简单/a的/ude1组合/gi关系/gi，/w如果/c子系统/gi之间/f存在/v更为/d复杂/a的/ude1关系/gi，/w而/cc各户/r又/d不/d知道/v怎么/ryv这种/r关系/gi怎么办/ryv，/w好办/nz，/w我们/rr提供/v一个/mq统一/vn的/ude1接口/gi，/w按照/p这个/rz关系/gi组成/gi一个/mq客户/n想要/v的/ude1系统/gi，/w客户/n只需/v知道/v这个/rz外观模式/gi下/f的/ude1接口/gi就行了/l，/w他们/rr没/d必要/a知道/v子系统/gi之间/f是/vshi用/p什么/ry关系/gi组成/gi系统/gi的/ude1就/d可以/v了/ule。/w举/v个/q例子/gi：/w编译器/gi，/w我们/rr使用/gi编译器/gi编译/gi代码/gi的/ude1过程/gi是/vshi这样/rzv的/ude1：/w词法/n分析/gi、/w语法分析/gi、/w中间代码/n生成/v、/w机器码/n生成/v，/w编译器/gi就是/v按照/p顺着/p来/vf编译/gi代码/gi的/ude1。/w来看/u一/nz下/f具体/a实现代码/gi：/w总结/gi：/w  /x这/rzv就是/v外观模式/gi，/w它/rr有/vyou几/d个/q特点/n（/w摘自/vdp/gi一书/nz）/w，/w（/w1/nz）/w它/rr对/p客户/n屏蔽/v子系统/gi组件/gi，/w因而/c减少/v了/ule客户/n处理/vn的/ude1对象/gi的/ude1数目/gi并/cc使得/vi子系统/gi使用/gi起来/vf更加/d方便/a。/w（/w2/nz）/w它/rr实现/gi了/ule子系统/gi与/cc客户/n之间/f的/ude1松/ng耦合/vn关系/gi，/w而/cc子系统/gi内部/f的/ude1功能/gi组件/gi往往/d是/vshi紧/d耦合/vn的/ude1。/w（/w3/nz）/w如果/c应用/gi需要/v，/w它/rr并不/d限制/vn它们/rr使用/gi子系统/gi类/gi。/w  /x结合/v上面/f编译器/gi这个/rz例子/gi，/w进一步/d说明/v。/w对于/p（/w1/nz）/w，/w编译器/gi类/gi对/p客户/n屏蔽/v了/ule子系统/gi组件/gi，/w客户/n只需/v处理/vn编译器/gi的/ude1对象/gi就/d可以/v方便/a的/ude1使用/gi子系统/gi。/w对于/p（/w2/nz）/w，/w子系统/gi的/ude1变化/gi，/w不会/v影响/gi到/v客户/n的/ude1使用/gi，/w体现/v了/ule子系统/gi与/cc客户/n的/ude1松/ng耦合/vn关系/gi。/w对于/p（/w3/nz）/w，/w如果/c客户/n希望/v使用/gi词/n法/n分析器/n，/w只需/v定义/gi词法/n分析/gi的/ude1类/gi对象/gi即可/v，/w并不/d受到限制/v。/w