#简单工厂/gi、/w工厂方法/gi与/cc抽象工厂/gi大/a比拼/nz
   /x简单工厂/gi、/w工厂方法/gi和/cc抽象工厂/gi都/d属于/v设计模式/nz创建/gi型/k，/w严/a意义/n上/f简单工厂/gi不属于/v23/nz设计模式/nz之一/rz（/w违背/v了/ule开闭/nz原则/gi）/w，/w本文/r为了/p完整/a描述/gi三工厂/nz演变/gi过程/gi，/w对/p三工厂/nz进行/vn了/ule整体/n的/ude1总结/gi和/cc学习/gi，/w并/cc通过/p三者/r之间/f的/ude1特点/n比较/gi总结/gi出/vf各自/rr的/ude1优缺点/gi。/w一/nz、/w简单工厂/gi：/w    /x在/p没有/v工厂/gi之前/f，/w大家/rr都/d是/vshi自给自足/vl，/w生产/gi一/nz部/q车/n或/c其他/rzv工具/gi都/d是/vshi自己/rr来/vf完成/v，/w有/vyou了/ule工厂/gi之后/f，/w告诉/v它/rr需求/gi就/d会/v出来/vf相应/vi的/ude1产品/gi，/w但/c生产化/nz水平/n比较/gi低/a，/w工厂/gi分工/gi不/d太/d明确/a，/w社会上/nz只有/c一个/mq工厂/gi，/w不论/c卡车/n还是/c公交车/nz都/d由/p它/rr来/vf完成/v，/w相当于/v一个/mq工厂/gi多/a条/q生产线/n。/w类图/gi：/w代码/gi：/w好处/gi：/w工厂/gi类/gi包含/v逻辑/n判断/gi，/w根据/p客户端/gi实例化/gi相关/vn类/gi，/w去除/v与/cc具体/a产品/gi依赖/v，/w客户端/gi不管/c哪个/ry类/gi的/ude1实例/gi，/w把/pba需求/gi给/p工厂/gi，/w工厂/gi单独/d创建/gi相应/vi实例/gi。/w是/vshi优点/gi也/d是/vshi不足/an。/w不足/an：/w如果/c添加/gi产品/gi，/w需要/v修改/gi工厂/gi类/gi，/w违背/v开闭/nz原则/gi。/w工厂方法/gi的/ude1出现/v解决/v了/ule这/rzv一/nz困惑/an。。。/w二/nz、/w工厂方法/gi：/w    /x随着/p专业化/vn程度/n的/ude1提高/v，/w工厂/gi分工/gi变得/vi明确/a，/w每个/r工厂/gi生产/gi各自/rr的/ude1产品/gi，/w公交车/nz工厂/gi只管/d生产/gi公交车/nz，/w卡车/n工厂/gi负责/v生产/gi卡车/n，/w这样/rzv如果/c有/vyou新的/a产品/gi需求/gi，/w直接/ad增加/v相应/vi的/ude1产品/gi类/gi和/cc对应/vi /x工厂/gi类/gi即可/v。/w类图/gi：/w代码/gi：/w和/cc简单工厂/gi不同/a的/ude1是/vshi，/w多/a了/ule一个/mq抽象工厂/gi接口/gi，/w具体/a工厂/gi类/gi都/d来/vf实现/gi它/rr。/w客户端/gi也/d来/vf实例化/gi具体/a工厂/gi类/gi（/w声明/gi时候/n是/vshi父类/nz）/w。/w好处/gi：/w遵守/v开闭/nz原则/gi，/w直接/ad添加/gi具体/a产品/gi类/gi和/cc相应/vi工厂/gi类/gi，/w实例化/gi哪/ry一个/mq工厂/gi放在/v客户端/gi不足/an：/w第一/mq：/w增加/v一个/mq产品/gi就要/d增加/v一个/mq产品/gi工厂/gi类/gi，/w额外/b开发/gi，/w第二/mq：/w把/pba简单工厂/gi内部/f逻辑/n移到/vf客户端/gi，/w所以/c之前/f修改/gi工厂/gi类/gi，/w现在/t修改/gi客户端/gi，/w问题/gi还是/c存在/v，/w抽象工厂/gi的/ude1出现/v了/ule。。。/w三/nz、/w抽象工厂/gi：/w   /x工厂方法/gi虽/c解决/v简单工厂/gi违背/v开闭/nz原则/gi的/ude1问题/gi，/w但/c它/rr每个/r工厂/gi只能/v生产/gi一种/nz产品/gi，/w对于/p系列产品/nz表示/v无能为力/vl，/w而且/c大家/rr都/d看到/v工厂/gi能/v获益/vi，/w随着/p工厂/gi的/ude1增多/v，/w用户/gi的/ude1需求/gi，/w这时/rzt有/vyou了/ule品牌/gi的/ude1概念/gi，/w比如/v想要/v宝马/ntc的/ude1卡车/n，/w奔驰/vi的/ude1公交车/nz等/udeng。。。/w类图/gi：/w代码/gi：/w好处/gi：/w可以/v解决/v工厂方法/gi每个/r工厂/gi只能/v生产/gi单一/gi产品/gi的/ude1工厂/gi，/w根据/p产品/gi需求/gi进一步/d抽象/gi出/vf一个/mq工厂/gi类/gi的/ude1抽象类/gi，/w所以/c为/p抽象工厂/gi。/w通过/p改变/v具体/a工厂/gi使用/gi不同/a产品/gi配置/gi，/w第二/mq：/w具体/a创建/gi实例/gi过程/gi与/cc客户端/gi分离/vi，/w客户端/gi通过/p抽象/gi接口/gi操纵/gi实例/gi，/w不足/an：/w增加/v新产品/nz，/w比如/v上/f图/gi大众/ntc的/ude1轿车/n，/w就要/d添加/gi轿车/n抽象类/gi，/w和/cc下面/f的/ude1大众/ntc轿车/n，/w大众/ntc卡车/n等/udeng，/w还有/v修改/gi抽象工厂/gi，/w和/cc具体/a的/ude1工厂/gi，/w比如/v上/f图/gi就要/d添加/gi大众/ntc的/ude1具体/a工厂/gi，/w要/v修改/gi的/ude1地方/n太多/ad啦/y，/w这时/rzt就/d显得/v糟糕/a了/ule，/w不过/c可以/v通过/p简单工厂/gi改进/gi抽象工厂/gi。/w抽象工厂/gi的/ude1改进/gi（/w更换/v数据库/gi的/ude1问题/gi）/w：/w  /x简单工厂/gi改进/gi抽象工厂/gi：/w一个/mqdatabase/gi类/gi，/w可以/v创建/giiuser/nz和/ccidepartment/nz的/ude1sql/gi和/ccaccess/nz产品/gi，/w如果/c需要/v更换/voracle数据库/gi呢/y？/w又/d需要/v在/pdatabase/gi中/f修改/gicase/gi分支/n，/w添加/gioracle数据库/gi的/ude1分支/n判断/gi，/w违背/v开闭/nz原则/gi，/w不好/a维护/gi，/w这时/rzt把/pba数据库/gi作为/p字符串/gi拿出/v来/vf，/w反射/gi出场/vi了/ule。/w   /x反射/gi抽象工厂/gi：/wassembly/nz./nzload/nz(/nz程序/gi集/q)/nz./nzcreateinstance/nz（/w命名/v空间/n./nz要/v实例化/gi类/gi名称/n）/w，/w原来/d写/v死/v在/p程序/gi里/f，/w现在/t字符串/gi来/vf是/vshi实例化/gi对象/gi（/w变量/gi可以/v更换/v）/w，/w数据库/gi使用/gi由/pdb/nz决定/v，/w去除/vdatabase/gi中/fswitch/nz判断/gi，/w不过/c还/d需要/v改/v程序/gi中/fdb/nz的/ude1，/w不/d完美/a，/w有/vyou没有/v一种/nz不/d修改/gi程序/gi的/ude1方法/gi，/w当然/d可以/v读取/gi配置文件/gi啊/y。/w   /x配置文件反射/nz：/w真正/d符合/v开闭/nz原则/gi，/w读/v文件/gi时/qt给/pdb/nz字符/gi串赋/nz，/w写明/v用/psql/gi还是/caccess/nz，/w这样/rzvdatabase/gi也/d不用/d更改/gi啦/y。/w四/nz、/w比较/gi：/w    /x比较/gi：/w简单工厂/gi：/w生产/gi同一/b等级/n任何/rz产品/gi，/w一个/mq工厂/gi多/a生产线/n；/w对/p增加/v新产品/nz无能/a /x为力/v；/w           /x工厂方法/gi：/w同一/b等级/n结构/gi固定/a产品/gi，/w多/a个/q工厂/gi；/w           /x抽象工厂/gi：/w生产/gi不同/a系列/n的/ude1全部/m产品/gi，/w对/p增加/v新产品/nz无能为力/vl。/w    /x每种/r模式/gi都/d有/vyou自己/rr的/ude1优点/gi和/cc弊端/n，/w只有/c最/d适合/v它/rr的/ude1场景/gi，/w没有/v最好/d的/ude1时候/n，/w只要/c满足/v自己/rr的/ude1需求/gi就是/v最好/d的/ude1。/w