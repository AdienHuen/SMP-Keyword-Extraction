#高并发/gi下/f的/ude1系统设计/gi（/w偏/d数据库设计/gi）/w
高并发/gi完成/v数据库设计/gi是/vshi要/v结合/v不同/a的/ude1应用场景/gi的/ude1，/w本文/r主要/b涉及/v到/v一下/m问题/gi：/w1/nz、/w对/p数据库表/gi的/ude1字段/gi访问/gi比较/gi均衡/a，/w业务/gi导向/n明显/a（/w网上商城/nz，/w多/a条/q业务/gi线/n）/w；/w2/nz、/w对/p数据库表/gi的/ude1字段/gi访问/gi比较/gi均衡/a，/w业务/gi导向/n不/d明显/a（/w对/p单一/gi应用/gi的/ude1高并发/gi访问/gi）/w；/w3/nz、/w对/p数据库表/gi的/ude1单一/gi字段/gi访问/gi比较/gi集中/v（/w秒杀/v、/w大量/m用户/gi对/p同一/b账户/n操作/gi）/w不过/c对于/p一般/ad的/ude1小型/b网站/gi的/ude1应用/gi，/w并发/gi高/a的话/udh /x采用/v读写/gi分离/vi基本上/d就/d能/v解决问题/v，/w本文/r主要/b是/vshi针对/gi大型网站/gi高并发/gi数据库设计/gi讨论/gi。/w一/nz、/w对/p数据库表/gi的/ude1访问/gi比较/gi均衡/a，/w业务/gi导向/n明显/a（/w网上商城/nz，/w多/a条/q业务/gi线/n）/w  /x像/v这种/r情况/n，/w一般/ad采用/v数据库表/gi垂直/gi切分/v。/w  /x垂直/gi切分/v就是/v要/v把/pba表/n按/p模块/gi划分/v到/v不同/a数据库/gi中/f，/w这种/r拆分/gi在/p大型网站/gi的/ude1演变/gi过程/gi中/f是/vshi很/d常见/a的/ude1。/w当/p一个/mq网站/gi还/d在/p很小/a的/ude1时候/n，/w只有/c小/a量/n的/ude1人/n来/vf开发/gi和/cc维护/gi，/w各/rz模块/gi和/cc表/n都/d在/p一起/s，/w当/p网站/gi不断丰富/l和/cc壮大/v的/ude1时候/n，/w也/d会/v变成/v多/a个子/n系统/gi来/vf支撑/v，/w这时/rzt就/d有/vyou按/p模块/gi和/cc功能/gi把/pba表/n划分/v出来/vf的/ude1需求/gi。/w如/v下图/n所示/nz：/w其实/d，/w相对于/nz垂直/gi切分/v更进一步/vl的/ude1是/vshi服务化/n改造/vn，/w说/v得/ude3简单/a就是/v要/v把/pba原来/d强耦合/nz的/ude1系统/gi拆分/gi成/v多/a个/q弱/a耦合/vn的/ude1服务/gi，/w通过/p服务/gi间/f的/ude1调/v用来/v满足/v业务/gi需求/gi看/v，/w因此/c表/n拆出来/v后/f要/v通过/p服务/gi的/ude1形式/gi暴露/v出去/vf，/w而/cc不是/c直接/ad调用/gi不同/a模块/gi的/ude1表/n，/w淘宝/n在/p架构/gi不断/d演变/gi过程/gi，/w最重要/nz的/ude1一环/nz就是/v服务化/n改造/vn，/w把/pba用户/gi、/w交易/gi、/w店铺/n、/w宝贝/n这些/rz核心/n的/ude1概念/gi抽取/v成/v独立/a的/ude1服务/gi，/w也/d非常/d有利于/v进行/vn局部/n的/ude1优化/gi和/cc治理/vn，/w保障/vn核心/n模块/gi的/ude1稳定性/n。/w这样/rzv一种/nz拆分/gi方式/n也/d是/vshi有/vyou代价/gi的/ude1：/w表/n关联/vn无法/v在/p数据库/gi层面/n做/v单/b表/n大数据量/gi依然/d存在/v性能/gi瓶颈/gi事务/gi保证/v比较复杂/l应用/gi端的/z复杂性/gi增加/v上面/f这些/rz问题/gi是/vshi显而易见/bl的/ude1，/w处理/vn这些/rz的/ude1关键在于/n如何/ryv解除/v不同/a模块/gi间/f的/ude1耦合性/nz，/w这/rzv说/v是/vshi技术/gi问题/gi，/w其实/d更是/d业务/gi的/ude1设计/gi问题/gi，/w只有/c在/p业务/gi上/f是/vshi松/ng耦合/vn的/ude1，/w才/d可能/v在/p技术/gi设计/gi上/f隔离/vn开来/v。/w没有/v耦合性/nz，/w也/d就/d不存在/ns表/n关联/vn和/cc事务/gi的/ude1需求/gi。/w另外/c，/w大数据/gi瓶颈/gi问题/gi可以/v采用/v水平/n切分。二/nz、/w对/p数据库表/gi的/ude1字段/gi访问/gi比较/gi均衡/a，/w业务/gi导向/n不/d明显/a（/w对/p单一/gi应用/gi的/ude1高并发/gi访问/gi）/w  /x1/nz）/w这种/r情况/n一般/ad采用/v对/p数据库表/gi进行/vn水平/n切分/v。/w /x上面/f谈到/v垂直/gi切分/v只是/d把/pba表/n按/p模块/gi划分/v到/v不同/a数据库/gi，/w但/c没有/v解决/v单/b表/n大数据量/gi的/ude1问题/gi，/w而/cc水平/n切分/v就是/v要/v把/pba一个表/nz按照/p某种/rz规则/gi把/pba数据/gi划分/v到/v不同/a表/n或/c数据库/gi里/f。/w例如/v像/v计费/vn系统/gi，/w通过/p按/p时间/gi来/vf划分/v表/n就/d比较/gi合适/a，/w因为/c系统/gi都/d是/vshi处理/vn某/rz一时间段/nz的/ude1数据/gi。/w而/cc像/vsaas/gi应用/gi，/w通过/p按/p用户/gi维度/gi来/vf划分/v数据/gi比较/gi合适/a，/w因为/c用户/gi与/cc用户/gi之间/f的/ude1隔离/vn的/ude1，/w一般/ad不存在/ns处理/vn多/a个/q用户数据/gi的/ude1情况/n，/w下面/f是/vshi一个/mq比较简单/l的/ude1按/puser/gi_/nzid/nz来/vf水平/n切分/v的/ude1例子/gi：/w水平/n切分/v没有/v破坏/v表/n之间/f的/ude1联系/gi，/w完全/ad可以/v把/pba有/vyou关系/gi的/ude1表/n放在/v一个/mq库里/nrf，/w这样/rzv就/d不/d影响/gi应用/gi端的/z业务/gi需求/gi，/w并且/c这样/rzv的/ude1切分/v能/v从根本上/nz解决/v大数据量/gi的/ude1问题/gi。/w它/rr的/ude1问题/gi也/d是/vshi很/d明显/a的/ude1：/w当/p切分/v规则/gi复杂/a时/qt，/w增加/v了/ule应用/gi端/v调用/gi的/ude1难度/n数据/gi维护/gi难度/n比较/gi大/a，/w当/p拆分/gi规则/gi有/vyou变化/gi时/qt，/w需要/v对/p数据/gi进行/vn迁移/gi对于/p第一个/gi问题/gi，/w可以/v参考/gi如何/ryv整合/gi应用/gi端/v和/cc数据库/gi端/v。/w对于/p第二个/nz问题/gi可以/v参考/gi一致性/gihash/gi的/ude1算法/gi，/w通过/p某些/rz映射/gi策略/gi来/vf降低/v数据/gi维护/gi的/ude1成本/n2/nz）/w当然/d还/d可以/v把/pba水平/n切分/v和/cc垂直/gi切分/v结合/v起来/vf由/p上面/f可知/v垂直/gi切分/v能/v更/d清晰化/l模块/gi划分/v，/w区分/v治理/vn，/w水平/n切分/v能/v解决/v大数据量/gi性能/gi瓶颈/gi问题/gi，/w因此/c常常/d就/d会/v把/pba两者/rzv结合/v使用/gi，/w这/rzv在/p大型网站/gi里/f是/vshi种/q常见/a的/ude1策略/gi，/w这/rzv可以/v结合/v两者/rzv的/ude1优点/gi，/w当然/d缺点/gi就是/v比较复杂/l，/w成本/n较高/ad，/w不/d太/d适合/v小型/b网站/gi，/w下面/f是/vshi结合/v前面/f两/nz个/q例子/gi的/ude1情况/n：/w三/nz、/w对/p数据库表/gi的/ude1单一/gi字段/gi访问/gi比较/gi集中/v（/w秒杀/v、/w大量/m用户/gi对/p同一/b账户/n操作/gi）/w  /x对于/p这种/r情况/n有/vyou很/d多种/m解决方案/gi，/w但是/c每/rz一种/nz都/d不是/c很/d完美/a：/w /x1/nz）/w采用/v内存/gi缓存/gi或者/c缓存/gi数据库/gi来/vf缓解/v数据/gi的/ude1库/n的/ude1压力/n   /x具体做法/nz是/vshi：/w在/p利用/v内存/gi缓存/gi或者/c缓存/gi数据库/gi把/pba后台/gi数据库服务器/gi上/f相关/vn的/ude1表/n数据加载/gi到/v内存/gi中/f，/w所用/b用户/gi高并发/gi的/ude1对/p内存/gi数据/gi进行/vn处理/vn，/w然后/c再/d定时/d轮询/nz的/ude1方式/n把/pba内存/gi的/ude1数据/gi刷新/v到/v后台/gi数据库表/gi中/f，/w这种/r做法/n有/vyou以下/f问题/gi：/w  a/nz）/w不能/v很好/ad保持/v内存/gi数据/gi与/cc数据库/gi数据/gi的/ude1一致性/gi；/w  b/nz）/w如果/c出现/v断电/vi、/w内存/gi损坏/v等/udeng情况/n，/w会/v有/vyou数据/gi丢失/v；/w /x2/nz）/w采用/v对/p数据库表/gi水平/n切分/v，/w然后/c在/p后台/gi的/ude1程序/gi中/f对/p各个/rz表/n的/ude1数据/gi整体/n控制/vn    /x例如/v，/w有/vyou10000/nz亿人民币/nz为/p1/nz亿人/nz并发/gi提供/v贷款/n业务/gi。/w在/p数据库/gi中/f建立/gi一个/mq总表/nz存下/nz10000/nz亿人民币/nz，/w然后/c再/d建立/gi10/nz张/q分表/n，/w初始/b设为/v空/ng；/w后台/gijava/gi程序/gi在/p访问/gi数据库/gi时会/n有/vyou一个/mq控制/vn程序/gi（/w中间件/n）/w，/w开/v10/nz个/q /x线程池/gi，/w每个/r线程池/gi对应/vi一个/mq数据库/gi分表/n，/w当/p中间件/n接受/gi到/v贷款/n申请/v时/qt，/w中间件/n就/d会/v根据/p用户/gi的/ude1id/nz（/w可以/vip/gi地址/gi，/w账户/n编号/gi）/whash/gi到/v相应/vi的/ude1线程/gi去/vf到/v总表/nz中/f借款/n，/w这个/rz借款/n数目/gi可以/v根据/p总表/nz的/ude1资金/n和/cc用户/gi的/ude1要/v借/v的/ude1资金/n去/vf申请/v额度/n（/w比如/v用户/gi申请/v10/nzw/nz，/w总表/nz有/vyou1000/nz亿/nz，/w对应/vi线程/gi可以/v向/p总表/nz申请/v10/nz亿/nz）/w，/w存入/v相应/vi分表/n，/w供/vi这个/rz用户/gi提供/v贷款/n，/w如果/c再/d有/vyou下/f个/q用户/gi再/d到/v此/rzs线程池/gi操作/gi数据库表/gi，/w就/d直接/ad操作/gi，/w分表/n中/f金额/n不够/a的/ude1时候/n再/d到/v总表/nz中/f借款/n。/w  /x这样/rzv的/ude1设计/gi解决/v了/ule，/w高并发/gi存储/gi数据库/gi的/ude1问题/gi，/w但是/c增加/v了/ule后台/gi的/ude1程序设计/gi的/ude1难度/n，/w加大/v了/ule程序/gi的/ude1耦合度/gp。/w  /x3/nz）/w采用/v“记/nz流水/n不/d记账/vn“/w的/ude1方式/n应对/v   /x还用/v上/f一个/mq例子/gi，/w这种/r方式/n，/w需要/v在/p数据库/gi中/f设计/gi两/nz个/q表/n，/w一个/mq用来/v存储/gi账户/n金额/n（/w账户/n表/n）/w，/w另一个/nz记录/gi”流/nz水“/nz（/w流水表/nz）/w，/w /x所谓/v”记/nz流水“/nz是/vshi指/v每当/p有/vyou个/q请求/gi到来/gi，/w就/d向/p流/gi水表/n中/f插入/gi一条/nz记录/gi，/w然后/c定时/d对/p所/usuo插入/gi的/ude1记录/gi进行/vn统计/gi，/wupdate/gi账户/n表/n的/ude1数据/gi，/w当然/d这种/r方式/n，/w需要/v在/p内存/gi中/f增加/v变量/gi，/w来/vf控制/vn所用/b用户/gi的/ude1贷款/n不能/v超过/v所/usuo贷款/n的/ude1总金额/nz。/w这种/r处理方式/n是/vshi数据库/gi端/v处理/vn秒杀/v、/w高并发/gi集中/v访问/gi数据库表/gi字段/gi的/ude1有效/gi方式/n，/w使用/gi比较/gi广泛/a。/w /x4/nz）/w针对/gi网购/v秒杀/v还有/v其/rz针对性/n的/ude1设计/gi，/w因为/c网购/v秒杀/v和/cc高并发/gi操作/gi银行/gi账户/n不同/a，/w网购/v秒杀/v允许/v用户/gi请求/gi丢失/v，/w简单/a的/ude1来说/uls，/w只/d需要/v在/p内存/gi缓存/gi或者/c内存数据库/gi（/w充当/v队列/gi）/w中/f保存/gi较早/d的/ude1用户/gi请求/gi，/w然后/c再/d异步/gi的/ude1处理/vn这些/rz请求/gi来/vf操作/gi数据库/gi（/w更新/gi数据库/gi）/w。/w