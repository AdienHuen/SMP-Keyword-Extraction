#数据表/gi设计/gi一/nz些/q问题/gi_/nzI/nz
外键/gi是否/v采用/v看/v业务/gi应用场景/gi，/w以及/cc开发成本/nz的/ude1，/w大致/d列/v下/f什么/ry时候/n适合/v，/w什么/ry时候/n不/d适合/v使用/gi：/w1./nz /x互联网/gi行业/gi应用/gi不/d推荐/gi使用/gi外键/gi：/w /x用户量/n大/a，/w并/cc发度/nz高/a，/w为此/bl数据库服务器/gi很容易/nz成为/v性能/gi瓶颈/gi，/w尤其/d受/vio/gi能力/gi限制/vn，/w且/c不能/v轻易/d地/ude2水平/n扩展/gi；/w若是/c把/pba数据/gi一致性/gi的/ude1控制/vn放到/v事务/gi中/f，/w也/d即/v让/v应用服务器/gi承担/v此/rzs部分/n的/ude1压力/n，/w而/cc引用/gi服务器/gi一般/ad都/d是/vshi可以/v做到/v轻松/a地/ude2水平/n的/ude1伸缩/vn；/w2./nz传统/n行业/gi1./nz软件应用/l的/ude1人数/n有限/a，/w换句话说/c是/vshi可控/nz的/ude1；/w2./nz数据库服务器/gi的/ude1数据量/n也/d一般/ad不会/v超大/b，/w且/c活跃/a数据/gi有限/a；/w综合/vn上述/b2/nz句话/q描述/gi，/w也/d即/v数据库服务器/gi的/ude1性能/gi不是/c问题/gi，/w所以/c不用/d过多/d考虑/v性能/gi的/ude1问题/gi；/w另外/c，/w使用/gi外键/gi可以/v降低/v开发成本/nz，/w借助/v数据库/gi产品/gi自身/rr的/ude1触发器/gi可以/v实现/gi表/n与/cc关联表/nz之间/f的/ude1数据/gi一致性/gi和/cc更新/gi；/w最后/f一点/m，/w使用/gi外键/gi的/ude1方式/n，/w还/d可以/v做到/v开发人员/n和/cc数据库设计/gi人员/gi的/ude1分工/gi，/w可以/v为/p程序员/gi承担/v更多/ad的/ude1工作量/n；/w为何/ryv说/v外键/gi有/vyou性能/gi问题/gi：/w1./nz数据库/gi需要/v维护/gi外键/gi的/ude1内部管理/n；/w2./nz外键/gi等于/v把/pba数据/gi的/ude1一致性/gi事务/gi实现/gi，/w全部/m交给/v数据库服务器/gi完成/v；/w3./nz有/vyou了/ule外键/gi，/w当做/v一/nz些/q涉及/v外键/gi字段/gi的/ude1增/v，/w删/v，/w更新/gi操作/gi之后/f，/w需要/v触发/gi相关/vn操作/gi去/vf检查/gi，/w而/cc不得不/d消耗/gi资源/gi；/w4./nz外键/gi还/d会/v因为/c需要/v请求/gi对/p其他/rzv表/n内部/f加锁/gi而/cc容易/ad出现/v死锁/gi情况/n；/w