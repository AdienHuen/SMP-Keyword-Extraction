#大话/n设计模式/nz（/w二/nz /x代码规范/gi、/w重构/gi）/w
（/w续/v上篇/b）/w /x大鸟/nz说/v：/w“/w且/c先/d不说/c出题/vi人/n的/ude1意思/n，/w单/b就/d你/rr现在/t的/ude1代码/gi，/w就/d有/vyou很/d多/a不足/an的/ude1地方/n需要/v改进/gi。/w比如/v变量/gi命名/v，/w你/rr的/ude1命名/v就是/vabcd/nz，/w变量/gi不/d带有/v任何/rz具体/a含义/n，/w这/rzv是/vshi非常/d不/d规范/gi的/ude1；/w判断/gi分支/n，/w你/rr这样/rzv的/ude1写法/gi，/w意味着/v每个/r条件/n都/d要/v做/v判断/gi，/w等于/v计算机/gi做/v了/ule三次/nz无用功/n；/w数据/gi输入/v有效性/gi判断/gi等/udeng，/w如果/c用户/gi输入/v的/ude1是/vshi字符/gi符号/gi而/cc不是/c数字/gi怎么办/ryv？/w如果/c除数/n时/qt，/w客户/n输入/v了/ule0/nz怎么办/ryv？/w这些/rz都/d是/vshi可以/v改进/gi的/ude1地方/n。/w”　/nz　“/nz哦/e，/w说/v得/ude3没错/vi，/w这个/rz我/rr以前/f听/v老师/gi说/v过/uguo，/w可是/c从来/d没有/v在意/v过/uguo，/w我/rr马上/d改/v，/w改/v完/vi再/d给/p你/rr看看/v。/w”/w /x大鸟/nz：/w“/w，/w不错/a，/w不错/a，/w改得/v很快/d吗/y？/w至/p在/p目前/t代码/gi来说/uls，/w实现/gi计算器/gi是/vshi没有/v问题/gi了/ule，/w但/c这样/rzv写出/v的/ude1代码/gi是否/v合/v出题/vi人/n的/ude1意思/n呢/y？/w”/w小菜/n：/w“/w你/rr的/ude1意思/n是/vshi面向对象/gi？/w”/w /x大鸟/nz：/w“哈/nz，/w小菜/n非/b小菜/n也/d！/w”/w（/w待续/vi）/w出处/n：/w