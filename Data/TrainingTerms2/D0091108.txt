#告诉/v你/rr架构师/gi与/cc程序员/gi的/ude1区别/gi在/p哪里/rys
simon brown/nz是/vshi全球/gi知名/a软件架构/gi独立/a咨询师/nnt、/w讲师/nnt，/w创办/v了/ule专门/d讨论/gi软件架构/gi问题/gi的/ude1网站/gi“/w编码/gi架构/gi”/w（/wcodingthearchitecture/nz./nzcom/nz）/w。/w他/rr自称/v是/vshi写/v代码/gi的/ude1软件/gi架构师/gi和/cc明白/v架构/gi的/ude1软件/gi开发者/gi。/w自/p2008/nz年/qt以来/f的/ude17/nz年/qt时间/gi里/f，/wsimon/nz在/p全球/gi28/nz个/q国家/n做/v过/uguo有关/vn软件架构/gi、/w技术/gi领导力/nz及其/cc与/cc敏捷/gi的/ude1平衡/a等/udeng主题/n的/ude1百余场/nz演讲/gi，/w并于/c2012/nz年/qt8/nz月/n在/p中国/gi举办/v的/ude1archsummit/nz全球/gi架构师/gi峰会/gi上/f以/p“/w郁闷/a的/ude1架构/gi师”/nz和/cc“/w如何/ryv设计/gi安全/gi的/ude1架构/gi”/w为/p主题/n发表/v演讲/gi，/w深受/v与会者/n好评/n。/wsimon/nz已为/d全球/gi20/nz多/a个/q国家/n的/ude1软件/gi团队/gi提供/v咨询/gi和/cc培训/gi，/w他/rr的/ude1客户/n既有/v小型/b技术/gi初创/vi企业/gi，/w也/d不乏/v全球/gi家喻户晓/vl的/ude1品牌/gi公司/nis。/wsimon/nz著有/v一书/nz，/w他/rr在/p这/rzv本书/gi中/f打破/v传统/n的/ude1认知/vn，/w模糊/gi软件开发/nz和/cc架构/gi在/p流程/gi中的/v界限/n，/w进而/c为/p软件架构/gi正名/vi。/w问/v：/w开发者/gi和/cc架构师/gi之间/f最大/gm的/ude1区别/gi是/vshi什么/ry？/w架构师/gi和/cc开发者/gi一样/uyy，/w也/d经常/d写/v代码/gi，/w简单/a的/ude1说/v，/w开发者/gi和/cc架构师/gi之间/f最大/gm的/ude1区别/gi就是/v技术/gi领导力/nz。/w软件/gi架构师/gi的/ude1角色/gi需要/v理解/gi最重要/nz的/ude1架构/gi驱动力/n是/vshi什么/ry，/w他/rr提供/v的/ude1设计/gi需要/v考虑/v这些/rz因素/gi。/w架构师/gi还要/d控制技术/gi风险/gi，/w在/p需要/v的/ude1时候/n积极/ad演化/gi架构/gi，/w并且/c负责/v技术/gi质量保证/gi。/w从根本上/nz讲/v，/w架构师/gi是/vshi一个/mq技术/gi领导者/nnt的/ude1角色/gi，/w这/rzv就是/v最大/gm的/ude1区别/gi。/w问/v：/w一位/nz开发者/gi如何/ryv才能/n成为/v一位/nz架构师/gi？/w他/rr//nz她/rr需要/v掌握/v哪些/ry领域/gi之外/f的/ude1能力/gi？/w两/nz个/q字/n：/w经验/gi。/w我/rr认识/v的/ude1大部分/n优秀/gi软件/gi架构师/gi同时/c也/d是/vshi出色/a的/ude1软件/gi开发者/gi，/w他们/rr都/d是/vshi经过/p时间/gi逐渐/d发展/gi成为/v架构师/gi的/ude1。/w你/rr需要/v有/vyou退后/vi一步/nz看/v代码/gi的/ude1能力/gi，/w从而/c理解/gi特定/b软件系统/gi背后/f的/ude1设计/gi决策/gi。/w退后/vi一步/nz才能/n看到/v“/w大局/n”/w，/w这/rzv是/vshi架构师/gi必须/d掌握/v的/ude1核心/n技能/gi。/w这/rzv就是/v为什么/ryv一/nz书/gi中/f加入/v了/ule有关/vnc/nz4/nz模型/gi的/ude1内容/gi，/w这/rzv是/vshi一种/nz从/p多/a个/q不同/a抽象/gi层面/n理解/gi软件系统/gi的/ude1方法/gi。/w这个/rz方法/gi有助于/v你/rr退后/vi一步/nz反观/v大局/n。/w问/v：/w你/rr对/p软件架构/gi的/ude1理解/gi是否/v因为/c你/rr的/ude1经历/gi和/cc实践/gi而/cc改变/v过/uguo？/w是/vshi的/ude1。/w我/rr对/p软件架构/gi的/ude1理解/gi是/vshi根据/p我/rr在/p咨询/gi公司/nis工作/gi时/qt在/p各个/rz项目/gi中/f负责/v软件架构/gi的/ude1经验/gi形成/v的/ude1。/w咨询/gi是/vshi一件/nz好事/n，/w尤其/d从/p最近/t我/rr开始/v从事/vi独立/a咨询师/nnt这个/rz工作/gi之后/f，/w我/rr可以/v看到/v很/d多/a不同/a的/ude1团队/gi，/w不同/a的/ude1架构/gi，/w不同/a的/ude1技术/gi，/w以及/cc人们/n不同/a的/ude1工作方式/gi。/w世界各地/nz的/ude1文化/n多样性/n又/d为/p工作/gi的/ude1复杂度/gi增加/v了/ule一个/mq维度/gi。/w无论是/c寻找/v特定/b问题/gi解决方案/gi的/ude1过程/gi，/w还是/c为/p各种/rz想法/gi去芜存菁/nz的/ude1过程/gi，/w这些/rz经验/gi和/cc与/cc我/rr共事/vi的/ude1人/n的/ude1反馈/gi一起/s最终/d形成/v了/ule我/rr今天/t对/p软件架构/gi的/ude1认识/v，/w这些/rz思维/gi也/d反应/vn在/p了/ule我/rr的/ude1书/gi中/f。/w问/v：/w你/rr书/gi中的/v每/rz一/nz章/q内容/gi都/d很/d有趣/a而且/c很/d精炼/a，/w有/vyou没有/v想/v过/uguo写/v几/d本/rz详细/gi论述/gi中/f重要/a话题/n的/ude1书/gi？/w我/rr写作/gi这/rzv本书/gi的/ude1目的/gi是/vshi要/v创造/v一本/nz让/v读者/n可以/v从头/d读到/v尾/ng的/ude1书/gi，/w但是/c你/rr也/d可以/v通过/p粗略/a浏览/gi来/vf找到/v具体/a问题/gi的/ude1答案/gi。/w对于/p这个/rz问题/gi来说/uls，/w没错/vi，/w有/vyou一/nz些/q相关/vn主题/n没有/v出现/v在/p这/rzv本书/gi中/f，/w这些/rz主题/n可以/v构成/v一本/nz与/cc相互/d补/v的/ude1书/gi。/w比如/v，/w图表/gi和/cc建模/gi的/ude1材料/n就/d可以/v扩充/v成/v一本/nz完整/a的/ude1书/gi，/w另外/c我/rr和/cc一个/mq朋友/n也/d讨论/gi过/uguo要/v写/v一本/nz关于/p架构模式/gi的/ude1技术性/n更/d强/a的/ude1书/gi。/w问/v：/w你/rr在/p书/gi中/f也/d谈到/v了/ule敏捷/gi方法/gi，/w你/rr是/vshi如何/ryv看待/v现在/t流行/v的/ude1敏捷/gi已/d死/v的/ude1说法/n的/ude1？/w我/rr听过/v很/d多/a人/n说/v“/w敏捷/gi已/d死”/nz，/w他们/rr观点/gi乎/y来自/v两/nz个/q主要/b视角/n。/w首先/d，/w敏捷/gi这个/rz品牌/gi现在/t虽然/c已经/d成为/v主流/gi，/w但是/c其/rz背后/f的/ude1一/nz些/q意义/n却/d在/p近些年/t消失/vi殆尽/vi。/w遵循/gi敏捷/gi实践/gi的/ude1软件/gi团队/gi有/vyou很/d多/a（/w比如/v每日/r站立/vi会议/gi，/w测试/gi驱动开发/gi等等/udeng）/w但是/c他们/rr却/d并不知道/l为什么/ryv要/v遵照/v这些/rz规则/gi。/w盲目/ad仿效/v敏捷/gi实践/gi并/cc不是/c敏捷/gi的/ude1核心/n精神/gi。/w还有/v一些/m团队/gi，/w他们/rr尝试/v了/ule敏捷/gi，/w但是/c结果/n却/d一团糟/n。/w我/rr从/p软件架构/gi的/ude1视角/n特别/d能/v注意到/v这/rzv件/q事/n。/w大部分/n敏捷/gi方法/gi并不/d明确/a讨论/gi预先/d设计/gi，/w而/cc很/d多/a人/n把/pba这/rzv点/gi误解/gi为/p在/p敏捷/gi项目/gi中/f不/d需要/v做/v预先/d设计/gi。/w当然/d，/w这/rzv不是/c事实/n，/w而/cc现在/t人们/n开始/v寻找/v所谓/v的/ude1传统开发/gi和/cc敏捷开发/gi之间/f的/ude1平衡点/gm。/w敏捷/gi并/cc没有/v死/v。/w采用/v敏捷/gi方式/n意味着/v不断/d地/ude2反思/vn和/cc调整/vn你/rr使用/gi的/ude1方法/gi，/w从而/c达到/v解决问题/v、/w变得/vi更/d有效率/n或者/c更/d频繁/a地/ude2交付/v优秀/gi软件/gi的/ude1目的/gi。/w团队/gi要/v如何/ryv完成/v这/rzv件/q事/n完全/ad是/vshi由/p他们/rr自己/rr决定/v的/ude1。/w问/v：/w作为/p技术/gi领导者/nnt，/w如何/ryv协调/gi一个/mq大型项目/nz中/f不同/a架构师/gi的/ude1协同工作/n？/w这/rzv是/vshi一个/mq复杂/a的/ude1问题/gi，/w根据/p背景/n的/ude1不同/a，/w答案/gi也/d有/vyou很/d多/a。/w在/p我/rr的/ude1经验/gi里/f，/w大/a多数/a大型项目/nz都/d包含/v有/vyou一/nz些小/a团队/gi，/w可能/v是/vshi根据/p技术/gi类型/gi、/w子系统/gi或/c组件/gi区分/v的/ude1。/w在/p这种/r情况下/nz，/w每个/r团队/gi一般/ad都会/n有/vyou自己/rr的/ude1软件/gi架构师/gi，/w因为/c必须/d有人/r要为/c这些/rz零散/a的/ude1部分/n负责/v。/w为了/p要/v管理/gi整个/b项目/gi，/w协调/gi合作/vn，/w有/vyou以下/f几种/nz方式/n：/w1./nz一个/mq单独/d的/ude1架构师/gi来/vf管理/gi整个/b项目/gi，/w然后/c通过/p和/cc基于/p团队/gi的/ude1架构师/gi的/ude1合作/vn来/vf确保/v工作/gi顺利进行/nz。/w2./nz基于/p团队/gi的/ude1架构师/gi共同/d协作/gi，/w分享/gi和/cc执行/v架构/gi领导者/nnt的/ude1角色/gi。/w3./nz某/rz一位/nz基于/p团队/gi的/ude1架构师/gi额外/b花费/v一些/m时间/gi来/vf管理/gi整个/b团队/gi。/w第一种/nz方式/n是/vshi我/rr最/d不/d喜欢/gi的/ude1，/w因为/c多/a出来/vf的/ude1这个/rz人/n可能/v不会/v像/v其他/rzv基于/p团队/gi的/ude1架构师/gi那样/rzv投身/v到/v每天/r的/ude1工作/gi中/f，/w而且/c他/rr有可能/nz缺少/v必要/a的/ude1背景/n信息/gi，/w无法/v做出/v明智/a的/ude1决定/v。/w在/p第二种/nz和/cc第三种/nz方式/n之间/f选择/gi的/ude1时候/n，/w我们/rr可以/v根据/p基于/p团队/gi的/ude1架构师/gi的/ude1领导力/nz和/cc兴趣/gi来/vf决定/v。/w比如/v，/w强制/vd一个/mq不感兴趣/l的/ude1人/n来/vf管理/gi整个/b项目/gi可能/v不会/v成功/a。/w我/rr个人/n比较/gi倾向/n于/p第三种/nz方式/n，/w但/c前提/n是/vshi其他/rzv基于/p项目/gi的/ude1架构师/gi也/d应该/v以/p某种程度/nz参与/gi进来/vf，/w因为/c对/p整个/b项目/gi的/ude1理解/gi是/vshi必不可少/vl的/ude1。/w问/v：/w复杂/a是/vshi软件架构/gi的/ude1敌人/n，/w很/d多/a人/n欣赏/v那些/rz已经/d用/p了/ule十几年/nz的/ude1架构/gi，/w但是/c这种/r情况下/nz多/a场景/gi预判/nz会/v使得/vi程序/gi变得复杂/nz。/w你/rr是/vshi如何/ryv规划/gi架构/gi时间/gi点/gi上/f的/ude1规模/gi和/cc设计/gi的/ude1呢/y？/w简单/a的/ude1答案/gi就是/v一/nz开始/v就/d使用/gi简洁/gi的/ude1设计/gi，/w然后/c明确/a地/ude2思考/gi模块化/gi。/w软件系统/gi随着/p时间/gi很容易/nz就/d会/v发展/gi成/v“/w大/a泥球/nz”/w，/w对于/p需求/gi不断/d变化/gi的/ude1软件系统/gi来说/uls，/w维护性/n和/cc适应性/n的/ude1最大/gm影响/gi因素/gi就是/v不同/a事物/n间/f的/ude1耦合/vn程度/n。/w如果/c你/rr从/p一/nz开始/v就/d考虑/v了/ule模块化/gi，/w把/pba软件系统/gi分解成/n高/a内聚/nz低/a耦合/vn的/ude1小/a模块/gi单元/n，/w在/p未来/t你/rr就/d可以/v更/d轻易/d地/ude2对系统/l做出/v改变/v。/w更进一步/vl说/v，/w这/rzv意味着/v你/rr定义/gi的/ude1软件架构/gi应该/v反映/v在/p代码/gi中/f。/w正如/v我/rr在/p书/gi中所/j说/v，/w事实/n并不/d永远/d如此/rzv。/w我/rr去年/t在/p一次/nz大会/gi中的/v演讲/gi（/w抱歉/a，/w演讲/gi是/vshi英文/nz的/ude1而且/c在/pyoutube/nz上/f）/w中/f深度/gi讲解/gi了/ule这个/rz话题/n问/v：/w你/rr认为/v从/p10/nz万/nz用户/gi扩展到/v1/nz亿/nz用户/gi的/ude1架构/gi存在/v吗/y？/w如果/c存在/v的话/udh，/w这些/rz架构/gi具有/v超强/d扩展性/n的/ude1原因/n是/vshi什么/ry？/w我/rr确定/v这样/rzv的/ude1架构/gi确实/ad存在/v，/w但是/c在/p构造/n这些/rz架构/gi之/uzhi初/f时/qt，/w架构师/gi可能/v并/cc没有/v设想/vn到/v如此/rzv强/a的/ude1扩展/gi能力/gi。/w每个/r互联网/gi级别/n的/ude1大型网站/gi背后/f的/ude1故事/gi都/d很/d有趣/a，/w它们/rr大多/d数/n都/d已经/d经历/gi过/uguo在/p开发/gi、/w部署/gi、/w运维/gi的/ude1同时/c持续/vd发展/gi架构/gi的/ude1阶段/gi。/w做出/v架构/gi决策/gi的/ude1关键/n就/d在于/v理解/gi利弊/n和/cc确定/v优先级/n。/w你/rr可以/v在/p中/f看到/v类/gi的/ude1情况/n。/w一旦/d你/rr明白/v了/ule不能/v拥有/v一切/rz，/w就/d会/v更容易/nz做出/v架构/gi决策/gi了/ule。/w问/v：/w什么样/ryv的/ude1架构/gi能够/v做到/v快速/d响应/v频繁/a变化/gi的/ude1需求/gi？/w和/cc之前/f的/ude1答案/gi一样/uyy，/w简洁/gi的/ude1设计/gi和/cc模块化/gi会/v让/v你/rr可以/v快速/d响应/v快速/d变化/gi的/ude1需求/gi。/w如果/c你/rr需要/v经常/d改变/v架构/gi，/w但/c只想/v改变/v其中/rz的/ude1一/nz部分/n，/w为了/p防止/gi为/p每个/r小/a变化/gi重新部署/n整个/b系统/gi，/w采用/v微服务/gi架构/gi是/vshi一个/mq明智/a的/ude1选择/gi。/w问/v：/w有/vyou没有/v什么事/nz是/vshi架构师/gi永远/d都/d不/d应该/v做/v的/ude1？/w有/vyou，/w软件/gi架构师/gi永远/d都/d不/d应该/v停止/gi编程/gi和/cc停止/gi学习/gi！/w:/w-/nz)/nz