#我/rr也/d要/v谈谈/v大型网站/gi架构/gi之/uzhi系列/n（/w3/nz）/w―/w―/w死/v了/ule都/d要说/c的/ude1缓存/gi
　　/nz说/v到/v缓存/gi，/w我/rr想/v大家/rr跟/p我/rr一样/uyy都/d很/d兴奋/a，/w当/p我们/rr遭遇/v网站/gi性能/gi瓶颈/gi的/ude1时候/n，/w缓存/gi是/vshi一剂/nz强心针/n，/w也/d是/vshi一粒/nz紧急/a妈/n富隆/nz，/w从而/c在/p优化/gi网站/gi性能/gi方面/n冠/ng上/f了/ule第一/mq定律/n的/ude1帽子/n，/w我们/rr前年/t在/p做/v淘/v应用/gi的/ude1时候/n，/w就/d遭遇/v了/ule性能/gi瓶颈/gi，/w短时间/nz内/f采用/v缓存/gi紧急/a优化/gi，/w给/p我们/rr大/a优化/gi之前/f争取/v了/ule宝贵/a的/ude1时间/gi。/w一/nz：/w缓存/gi的/ude1种类/n /x要说/c缓存/gi有/vyou多少/ry种/q，/w太多/ad了/ule，/w比如/v浏览器/gi缓存/gi，/w文件/gi缓存/gi，/w片段/n缓存/gi，/w数据库/gi缓存/gi等等/udeng，/w合理/a利用/v这些/rz缓存/gi则/d能/v大幅度/d的/ude1提高/v系统/gi性能/gi，/w利用/v不好/a反而/d会/v偷鸡/nz不成/v蚀/vg把/pba米/q，/w给/p服务器/gi造成/v巨大/a的/ude1压力/n，/w所以/c这里/rzs就/d存在/v一个/mq缓存/gi的/ude1使用/gi原则/gi的/ude1问题/gi。/w二/nz：/w合理/a的/ude1使用/gi缓存/gi1./nz /x读写/gi小于/v10/nz:/w1/nz的/ude1情况下/nz，/w不适/a合用/v缓存/gi，/w我们/rr用/p缓存/gi的/ude1目的/gi就是/v想/v分摊/v下/f数据库/gi的/ude1压力/n以及/cc利用/v内存/gi来/vf提速/vn性能/gi，/w如果/c读写/gi差不多/al，/w或者/c /x压根/nz就/d没/d读过/v，/w这样/rzv的/ude1死/v数据/gi就/d会/v造成/v内存/gi资源/gi的/ude1浪费/gi。/w2./nz /x既然/c是/vshi缓存/gi，/w就/d注定/v了/ule它/rr的/ude1资源/gi是/vshi有限/a的/ude1，/w宝贵/a的/ude1，/w也/d就/d注定/v了/ule我们/rr必须/d合理/a利用/v它/rr的/ude1内存空间/nz，/w也/d就/d被迫/d的/ude1让/v我们/rr清楚/a的/ude1认识到/v热点/gi数据/gi，/w　/nz /x不易/ad修改/gi的/ude1应该/v放在/v缓存/gi，/w反之/c不宜/v放/v。/w3./nz /x大/a公司/nis在/p缓存/gi方面/n做/v的/ude1好/a的/ude1地方/n就是/v在/p一个/mq“/w控/v”/w字/n上/f，/w他们/rr会/v为/p缓存/gi专门/d做一套/n“/w缓存/gi系统/gi”/w，/w当/p系统/gi预/d加载/gi的/ude1时候/n，/w同时/c也/d充当/v内存数据库/gi /x使用/gi，/w将/d这些/rz元数据/gi加载/gi到/v缓存/gi系统/gi中/f，/w比如/v“县/nz市区/s”/w，/w“/w分类/gi信息/gi”/w等等/udeng作为/p预热/vi数据。三/nz：/w分布式/gi缓存/gi /x一般/ad情况下/nz，/w会/v有/vyou两/nz种/q形式/gi，/w第一/mq种/q就是/v主从复制/gi的/ude1模式/gi，/w第二种/nz就是/v分片/gi的/ude1模式/gi。/w1/nz：/w主从复制/gi模式/gi　　/nz这种/r模式/gi曾/d今/tg在/p项目/gi中/f也/d用/p过/uguo，/w就是/v一份/nz内存/gi，/w多/a处/n备份/gi，/w当/p其中/rz某/rz一个/mq缓存/gi内容/gi中的/v数据/gi有/vyou变化/gi时/qt，/w会/v及时/ad通知/gi其他/rzv机器/gi进行/vn缓存/gi更新/gi或/c清除/v，/w这种/r模式/gi的/ude1缺点/gi在于/v比较/gi容易/ad受制于/v单/b台/q机器/gi的/ude1内存/gi限制/vn，/w优点/gi在于/v用/p心跳/vi机制/gi及时/ad用/p另一台/nz缓存/gi机器/gi顶替/v，/w那个/rz时候/n我们/rr使用/gi120/nzg/nz的/ude1大/a内存/gi，/w得益于/v项目/gi业务/gi规模/gi的/ude1限制/vn，/w否则/c当/p机器/gi内存/gi爆满/vi的/ude1时候/n就/d比较/gi尴尬/a了/ule，/w所以/c做/v大型网站/gi还是/c谨慎/a使用/gi吧/y，/w毕竟/d这个/rz也/d是/vshi我们/rr曾/d今/tg做/v了/ule一/nz些/q为了/p提升/gi性能/gi的/ude1尝试/v。/w2/nz：/w分片/gi的/ude1模式/gi /x这种/r模式/gi在/p大型网站/gi中/f还是/c被/pbei大量/m使用/gi的/ude1，/w它/rr的/ude1特点/n就是/v可以/v把/pba一大/n坨/q数据/gi通过/p一定/b的/ude1算法/gi和/cc配置/gi分摊/v到/v集群/gi中的/v若/c干/v台/q机器/gi上/f，/w如果/c集群/gi中的/v某/rz一台/nz机器/gi挂/v了/ule，/w没关系/vl，/w只/d会/v影响/gi到/v该/rz台/q机器/gi中的/v数据/gi，/w对/p数据库/gi不会/v造成/v很大/d的/ude1影响/gi。/w一个/mq典型/n的/ude1应用/gi就是/vmemcache/gi，/wmemcache/gi是/vshi一个/mq非常简单/nz，/w实用/a，/w高效/b的/ude1分布式/gi缓存/gi架构/gi，/w其实/dmemcache/gi最/d得一提/nz的/ude1就是/v“/w路由/gi算法/gi的/ude1一致性/gihash/gi”/w技术/gi使得/vi我们/rr的/ude1memcache/gi集群/gi可以/v自由/a伸缩/vn，/w不过/c现在/t已经/d有/vyou很/d多/a的/ude1nosql/gi产品/gi，/w比如/vredis/gi，/wcouchdb/nz，/wmongodb/gi等等/udeng，/w让/v我们/rr在/p这个/rz世界/gi上有/v了/ule更多/ad的/ude1选择/gi吧/y。/w最近/t看到/v园子/n里面/f有/vyou很/d多/a抱怨声/i，/w没关系/vl，/w如果/c觉得/v自己/rr屈/v才/d了/ule，/w欢迎/v来/vf携程/nz试一试/v，/w只有/c你/rr达/v不到/v的/ude1能力/gi，/w没有/v给/p不/d起/vf你/rr的/ude1薪资/n。/w