#数值/gi的/ude1整数/gi次方/n（/w不/d考虑/v结果/n的/ude1大/a数/n问题/gi）/w优秀/gi的/ude1代码/gi就是/v要/v注意/v细微/a的/ude1细节/gi
数/n的/ude1整数/gi次方/n（/w优秀/gi的/ude1代码/gi就是/v要/v注意/v很/d多/a的/ude1细节/gi）/w通常/d越是/d看/v简单/a的/ude1题目/gi（/w因为/c没有/v大/a数/n问题/gi）/w，/w其实/d真正/d写/v代码/gi的/ude1时候/n就/d会/v忘记/v很/d多/a的/ude1细节/gi比/p如此/rzv题/n大多/d数/n童鞋/nz估计/gi看到/v后/f就/d会/v立刻/d写出/v如下/vi代码/gi可是/c如果/c你/rr写出/v上面/f的/ude1代码/gi立刻/d就/d交给/v了/ule面试官/nz，/w那/rzv也/d意味着/v你/rr与/ccoffer/gi已经/d无缘/vi了/ule当然/d前提/n你/rr需要/v写出/v逻辑/n正确/a的/ude1代码/gi，/w然后/c才/d是/vshi优化/gi性能/gi需要/v注意/v的/ude1几个点/nz：/w1/nz、/w如果/c幂/nexponent/nz为/p负数/n呢/y /x2/nz、/w底数/n如果/c是/vshi /x0/nz  /x幂/n为/p负数/n呢/y /x3/nz、/w如果/c输入/v非法/b怎么/ryv告知/v调用函数/n者/k4/nz、/w能/v不能/v更/d高效/b其中/rz有/vyou个/q容易/ad遗忘/v的/ude1知识点/gi  double a/nz;/nz  /x不能/v用/p a /nz=/nz=/nz /x0/nz /x来/vf判断/gia/nz是否/v为/p0/nz  /x因为/c对于/pdouble/nz类型/gi来说/uls /x0/nz /x不是/c绝对/d精确/gi的/ude1结果/n；/w /x所以/c应该/v用/p类/gi abs/nz(/nza /nz-/nz /x0.0/nz /x)/nz  /x0.000001/nz /x来/vf判断/gi第一点/nz：/w如果/c幂/nexponent/nz为/p负数/n /x首先/d计算/gi出幂/nz为/p整数/gi的/ude1 /x然后/c取/v倒数/v即可/v；/w /x第二/mq、/w三点/nz：/w对于/p输入/v非法/b的/ude1情况/n，/w我们/rr有/vyou三种/nz解决办法/n a/nz、/w异常/gi（/w高级/a语言/gi推荐/gi）/w优点/gi：/w可以/v为/p不同/a的/ude1出错/gi原因/n定义/gi不同/a异常/gi类型/gi /x逻辑/n清晰/a /x缺点/gi：/w抛出/v异常/gi对/p性能/gi有些/rz许负面/nz影响/gi  b/nz、/w设置/gi一个/mq全局变量/gi标志/n来/vf指示/gi输入/v非法/b与否/u；/w优点/gi：/w能/v方便/a的/ude1使用/gi计算/gi结果/n，/w缺点/gi：/w调用者/n容易/ad忘记/v判断/gi标志符/gi；/w c/nz、/w用/p返回/v，/w优点/gi：/w和/cc系统/giapi/gi一致/a /x缺点/gi：/w不能/v方便/a的/ude1使用/gi计算/gi结果/n第四点/nz：/w把/pbaexponent /nz拆开/v计算/gi /x分奇/nz数/n与/cc偶数/gi两/nz种/q情况/n /x（/w基本/a的/ude1数学原理/nz）/w上述/b代码/gi不一定会/nz让/v面试官/nz十分满意/nz，/w因为/c还/d可以/v更/d高效/b，/w函数/gidouble powerwithunsignedexponent/nz(/nzdouble base/nz,/nz int exponent/nz)/nz /x可以/v改为/v如下/vi高效/b的/ude1算法/gi上述/b代码/gi中/f exponent  /nz1/nz /x代替/v了/ule除以/v2/nz  /x位与/v运算/gi代替/v了/ule求余/nz(/nz%/nz)/nz运算/gi /x因为/c位运算/gi要/v比/p乘除法/nz运算/gi要/v高效/b很/d多/a，/w既然/c优化/gi性能/gi就要/d优化/gi到/v极致/gi但是/c上述/b代码/gi虽然/c得到/v了/ule性能优化/gi，/w但是/c有/vyou一定/b的/ude1风险/gi，/w因为/c用/p到/v了/ule递归/gi；/w就要/d考虑/v /x栈/gi /x的/ude1问题/gi，/w如果/c递归/gi过/uguo深/a  /x有/vyou /x栈/gi溢出/gi的/ude1风险/gi，/w这个/rz就要/d和/cc面试官/nz沟通/gi了/ule