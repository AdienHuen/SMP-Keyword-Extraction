#12306/nz这样/rzv的/ude1超大规模/b实时/n事务/gi系统/gi到底/d应该/v怎么/ryv设计/gi？/w其实/d不难/d
12306/nz这样/rzv的/ude1超大规模/b实时/n事务/gi系统/gi到底/d应该/v怎么/ryv设计/gi？/w%/nz听说/v阿里/nrf要/v帮助/v12306/nz重新/d设计/gi订票/vn系统/gi，/w不过/c12306/nz这个/rz系统/gi就/d真/a有/vyou这么/rz难/a吗/y？/w是/vshi那些/rz写/v软件/gi的/ude1没有/v好好/d思考/gi这个/rz问题/gi吧/y？/w显然/ad，/w12306/nz这个/rz系统/gi不同于/c一般/ad的/ude1关系数据库/gi，/w做/v系统/gi架构设计/nz必须/d考虑/v实际/n的/ude1应用/gi业务流程/nz和/cc数据/gi本身/rz的/ude1性质/n才/d行/ng。/w这么/rz说/v吧/y，/w我/rr不/d觉得/v这个/rz问题/gi有/vyou多/a困难/an，/w为了/p设计/gi好/a这个/rz系统/gi，/w下面/f的/ude1几/d条/q是/vshi需要/v考虑/v的/ude1：/w1/nz、/w假设/gi系统/gi必须/d允许/v1/nz亿人/nz同时/c抢/v票/n，/w其实/d就算/d10/nz亿人/nz也/d没什么/vl关系/gi，/w我/rr就/d不信/v系统/gi不能/v水平/n扩展/gi。/w那/rzv也/d就/d意味着/v，/w假如/c是/vshi一/nz台/q超级/b单核/ncpu/gi机器/gi的话/udh，/w每个/r事务/gi平均/a就/d必须/d在/p1/nz//nz100000000/nz秒/qt内/f完成/v，/w1/nz//nz10000/nz毫秒/q。/w而/cc普通/a中等/bcpu/gi机器/gi假设能/n在/p10/nz毫秒/q内/f完成/v的话/udh，/w则/d这个/rz性能/gi容量/gi需要/v通过/p水平/n扩展/gi和/cc垂直/gi扩展/gi扩大/v10/nz万倍/nz。/w2/nz、/w有/vyou了/ule前面/f的/ude1理论/gi上限/n分析/gi，/w剩下/v来/vf的/ude1事情/n就/d好/a办/v了/ule：/w我们/rr如何/ryv做到/v这一点/nz？/w2.1/nz /x先/d垂直/gi扩展/gi，/w使得/vi服务器/gi主机/gi的/ude1性能/gi提高/v10/nz倍/q，/w这/rzv应该/v是/vshi可以/v做到/v的/ude1；/w2.2/nz /x使用/gi内存数据库/gi及/cc内存计算/gi，/w不/d应该/v要求/n事务/gi需要/v同步/gi的/ude1磁盘/giio/gi，/w但/c可以/v像/v大部分/nnosql数据库/gi引擎/n那样/rzv，/w使用/giwal/nz日志/gi异步/gi同步/gi到/v磁盘/gi /x当然/d，/w磁盘/gi本身/rz应该/v是/vshissd/nz的/ude1，/w毋庸置疑/vl。/w2.3/nz /x网络/gi的/ude1分流/gi /x在/p与/cc核心/n服务器/gi的/ude1网络通信/gi上/f，/w不/d应该/v使用/gi每个/r事务/gi一个/mqtcp/gi连接/gi，/w显然/ad可以/v使用/gi加密/gi的/ude1tcp/gi连接/gi，/w并/cc在/p这/rzv一条/nz连接/gi上/f做/v所有/b的/ude1事情/n。/w /x或者/c可以/v使用/gi类/gi于/pudp/gi的/ude1数据报/gi，/w每个/r订票/vn请求/gi封装/gi成/v一个/mq大/a的/ude1数据包/gi。/w /x当前/t余/ng票/n查询/gi可能/v不能/v做到/v实时/n更新/gi，/w但/c至少/d可以/v保证/v1/nz分钟/qt或/c30/nz秒/qt更新/gi一次/nz，/w这/rzv只是/d指/v的/ude1繁忙/a时候/n，/w不忙/d时候/n不/d需要/v这么/rz做/v。/w /x在/p实际/n的/ude1ui/gi交互/gi体验/v中/f，/w可以/v做成/v“/w悲观/a视/vg图”/nz，/w也/d就是说/c，/w用户/gi如果/c看到/v又/d余/ng票/n，/w并且/c他/rr在/p30/nz秒/qt内/f手工/gi下/f了/ule订单/gi，/w那么/c系统/gi应该/v保证/v他/rr一定/b能够/v买到/v票/n。/w当然/d，/w也/d可以/v修改/giui/gi接口/gi，/w使用/gi类/gi于/p“/w智能/gi代理”/nz的/ude1自动/d规则引擎/gi，/w这样/rzv，/w可以/v直接/ad订票/vn无须/d先/d查询/gi。/w毕竟/d常规/n的/ude1先读/nz再写/v类型/gi的/ude1事务/gi实际上/d导致/gi了/ule读锁/nz，/w潜在地/n降低/v了/ule并发程序/nz。/w /x网络/gi数据包/gi应该/v可以/v在/p内核/gi级别/n负载均衡/gi地/ude2路由/gi到/v不同/a的/ude1cpu/gi核/n，/w这样/rzv，/w假如/c每个/r机器/gi是/vshi16/nz核/n的/ude1，/w又/d可以/v进一步/d将/d扩展性/n提高/v了/ule10/nz倍/q。/w2.4/nz /x避免/v大/a并发/gi情况下/nz的/ude1加锁/gi导致/gi的/ude1开销/n /x七牛云/nz的/ude1许式伟/nz（/w使用/gigo/nz语言/gi作为/p服务器/gi后端/f开发/gi语言/gi）/w都/d认为/v加锁/gi是/vshi不可避免/vl的/ude1，/w真的/d是/vshi这样/rzv吗/y？/w /x事实上/bl，/w可以/v通过/p更/d细粒度/gi的/ude1物化/vn视图/gi数据库/gi来/vf降低/v不必要/a的/ude1全局/n锁/v。/w比方/v来说/uls，/w把/pba每/rz趟/qv车次/n乘以/v相邻/vi两/nz站/vi作为/p做/v小操作/nz单位/n，/w而/cc不是/c对/p一个/mq全局/n的/ude1“/w票数/n”/w进行/vn加减/v读写操作/n。/w /x也/d就是说/c，/w假设/gi某人/rr购票/va/nz--/nzb/nz地/ude2，/w中间/f经过/pc/nz、/wd/nz站/vi，/w则/d数据库/gi中/f存在/va/nz-/nzc/nz、/wc/nz-/nzd/nz、/wd/nz-/nzb/nz共/d3/nz个/q数据项/gi（/w每个/r座位/n都/d是/vshi一个/mq单独/d的/ude1数据项/gi）/w，/w而/cc整个/b订票/vn事务/gi通过/p对/p这些/rz数据项/gi进行/vn顺序/gi的/ude1无锁/nz原子/gi操作/gi。/w注意/v，/w购票/v的/ude1座位/n不/d应该/v随机/b分配/gi，/w随机/b分配/gi一般/ad是/vshi伪/ag随机/b的/ude1，/w在/p大/a并发/gi的/ude1情况下/nz必然/d有/vyou很大/d的/ude1冲突/gi概率/gi。/w /x在/p这种/r粒度/gi上/f，/w基本上/d没有/v由于/p加锁/gi设计/gi导致/gi的/ude1开销/n2.5/nz /x现在/t还有/v1000/nz倍/q的/ude1水平/n扩展/gi系数/n。/w这时候/rzt就要/d考虑/v分布式系统/gi负载均衡/gi了/ule /x首先/d，/w考虑/v不同/a的/ude1订票/vn终端/gi，/w12306/nz系统/gi应该/v部署/gi成/v层次/n式/k的/ude1拓扑/n结构/gi，/w其中/rz，/w更上一层/l（/w性能/gi更好/d、/w与/cc核心/n服务器/gi网络连接/nz更快/d）/w的/ude1事务处理/nz终端/gi可以/v直接/ad为/p下一层/nz提供/v事务/gi代理/gi。/w在/p这个/rz级别/n，/w我/rr仍然/d考虑/v整个/b系统/gi是/vshi集中式/n的/ude1，/w但/c对于/p某些/rz地方/n非核心/b交通网络/n，/w可以/v完全/ad下发/v到/v某/rz一/nz下层/f来/vf全权处理/n。/w /x其次/c，/w可以/v引入/v一定/b的/ude1消息队列/gi，/w而/cc不是/c同步/gi请求/gi，/wlock/nz-/nzfree/nz队列/gi用于/v消息队列/gi是/vshi最/d常见/a的/ude1用法/gi，/w队列/gi的/ude1数据结构/gi存储/gi可以/v将/d瞬间/n的/ude1并发/gi造成/v的/ude1网络/gi、/w内存/gi开销/n降低/v到/v最小/a程序/gi，/w前提/n是/vshi这个/rz队列/gi不是/c基于/p全局/n锁/v（/w也/d就是/v信号量/gi）/w来/vf实现/gi的/ude1。/w关于/p12306/nz的/ude1核心/n设计/gi，/w我/rr觉得/v说/v到/v这里/rzs就/d可以/v了/ule。/w关键/n是/vshi我/rr之前/f所说/c的/ude1“物/nz化/v视图/gi”/w，/w或者/c称之为/v“/w最小化/nz事务/gi操作/gi数据/gi项”/nz的/ude1核心/n概念/gi。/w作为/p通用/gi的/ude1关系数据库/gi技术/gi可能/v不能/v满足/v这个/rz需要/v。/w但/c也许/d可以/v通过/p定制/nmysql/gi的/ude1数据库/gi存储引擎/gi来说/uls到/v这一点/nz。/w在/p这个/rz“物/nz化/v视图/gi”/w，/w或者/c称之为/v“/w最小化/nz事务/gi操作/gi数据/gi项”/nz的/ude1技术/gi基础上/nz，/w使用/gi顺序/gi的/ude1lock/nz-/nzfree/nz测试/gi并/cc设置/gi，/w基本上/d不会/v有/vyou传统/n的/ude1mutexlock/nz保护/gi共享/gi变量/gi读写/gi技术/gi所/usuo带来/v的/ude1并发访问/gi冲突/gi。/w