#设计模式/nz /x--/nz /x单例模式/gi(/nzSingleton/gi)/nz
单例模式/gisingleton/gi模式/gi解决问题/v十分/d常见/a而且/c比较简单/l。/w那么/c什么/ry是/vshi单例模式/gi呢/y？/w其实/d就是/v创建/gi一个/mq唯一/b的/ude1类/gi对象/gi，/w内存/gi中/f只/d占有/v一份/nz。/w那么/c问题/gi来/vf了/ule，/w要/v怎么/ryv创建/gi一个/mq唯一/b对象/gi呢/y？/w当然/d，/w直接/ad定义/gi一个/mq全局/n的/ude1对象/gi可以/v实现/gi，/w但/c在/p有些/rz纯粹/b的/ude1面向对象语言/gi中/f，/w如/vc#/gi，/wjave/nz中/f，/w就/d不能/v定义/gi全局变量/gi了/ule。/w那么/c，/w除了/p全局变量/gi还有/v什么/ry是/vshi唯一性/n的/ude1呢/y？/w恩/ng，/w没错/vi，/w就是/vstatic/gi静态/gi变量/gi。/w我们/rr的/ude1单例模式/gi就是/v通过/p一个/mq静态/gi的/ude1类/gi成员/nnt函数/gi实现/gi的/ude1(/nz创建对象/n)/nz。/w单例模式/gi类/gi对象/gi是/vshi一个/mq共享/gi对象/gi，/w内存/gi中/f只有/c一份/nz，/w节约/v了/ule内存/gi。/w它/rr常常/d和/cc工厂模式/gi一起/s使用/gi，/w因为/c工厂/gi对象/gi只需/v唯一/b一个/mq就/d够/v了/ule。/w结构/gi示意图/gi：/w(/nz一个/mqstatic/gi方法/gi /x+/nz /x一个/mq对象/gi指针/gi)/nz /x示例/gi代码/gi