#桥接/gi设计模式/nzbridge/gi
我/rr继续/v用/pcoder/nz和/ccdesigner/nz的/ude1例子/gi来/vf理解/gi桥接/gi设计模式/nz首先/d我们/rr知道/v：/w我们/rr的/ude1工作/gi可以/v大致/d分为/v两/nz个/q维度/gi：/w             /x1/nz /x职位/gi的/ude1不同/a，/w有码/n农/ng，/w有/vyou设计师/nnt /x2/nz /x有/vyou两/nz个/q不同/a方向/gi的/ude1开发/gi公司/nis java ios/nz我们/rr也许/d会/v这么/rz处理/vn，/w用/p一个/mqemployee/nz作为/p总的/b抽象类/gi，/w然后/c分为/vcoder /nz和/cc designer/nz,/nz /x然后/ccoder/nz分为/v两/nz个/q方向/gi，/wjava /nz和/cc ios/nz如/v图/gi：/w这样/rzv的/ude1继承/gi结构/gi是/vshi比较/gi不合理/nz的/ude1，/w我们/rr设计模式/nz有/vyou个/q原则/gi是/vshi /x合成/gi复用/gi原则/gi，/w这样/rzv的/ude1设计/gi继承/gi层次/n比较/gi多/a，/w我们/rr应该/v在/p抽象类/gi上/f做/v功夫/n。/w桥接模式/gi：/w将/d抽象/gi部分/n和/cc现实/n部分/n分离/vi，/w使/v他们/rr可以/v独立/a的/ude1变化/gi。/w /x（/w概念/gi）/w桥接模式/gi是/vshi一种/nz结构型/n设计模式/nz，/w主要/b是/vshi针对/gi类/gi与/cc类/gi之间/f的/ude1关系/gi作出/v的/ude1设计/gi。/w不要/d和/cc创建/gi型/k设计模式/nz搞/v混淆/v了/ule。/w这里/rzs的/ude1抽象/gi部分/n其实/d就是/v：/w /x职位/gi和/cc方向/gi。/w让/v职位/gi和/cc方向/gi去/vf应对/v变化/gi。/w类图/gi设计/gi:/w设计/gi代码/gi：/w结果/n如/v图/gi：/w再/d回来/v分析/gi桥接模式/gi的/ude1概念/gi将/d抽象/gi部分/n和/cc现实/n部分/n分离/vi，/w使/v他们/rr可以/v独立/a的/ude1变化/gi /x我们/rr将/d抽象/gi的/ude1woker /nz和/cc language/nz来/vf进行/vn聚合/gi /x来/vf应对/v变化/gi了/ule,/nz这/rzv满足/v了/ule设计原则/gi中的/v接口隔离/i原则/gi(/nzlanguage/nz和/ccwork/nz接口/gi是/vshi不/d相干/vi的/ude1)/nz和/cc依赖倒转原则/gi(/nz高层/n模块/gi不/d应该/v依赖/v低层/n模块/gi，/w二者/rzv都/d应该/v依赖/v其/rz抽象/gi,/nzlanguage/nz依赖于/vwork /nz而/cc不是/c具体/a的/ude1实现/gi类/gi；/w抽象/gi不/d应该/v依赖/v细节/gi；/w细节/gi应该/v依赖/v抽象/gi，/wlanguage/nz中/f不/d依赖于/v具体/a的/ude1work/nz实现/gi类/gi，/wwork/nz具体/a实现/gi肯定/v是/vshi依赖于/vwork/nz接口/gi的/ude1)/nz当/p我们/rr有/vyou新的/a需求/gi的/ude1时候/n，/w比如/vjava/gi需要/v变化/gi /x，/w不用/d改变/v原来/d的/ude1抽象类/gi，/w这/rzv满足/v了/ule开闭/nz原则/gi如果/c我们/rr要/v扩展/gi任何/rz一个/mq维度/gi，/w增加/v一个/mq实现/gi子类/gm就/d好/a了/ule，/w如/vphp /nz或者/c /x测试人员/n上/f一个/mq例子/gi如果/c没有/v充分说明/l，/w接下来/vl再/d举一个/nz例子/gi：/w如果/c mybridge/nz是/vshi一公司/ns:/w /x公司/nis /x需要/v不同/a的/ude1人才/gi /x，/w那么/c我们/rr的/ude1公司/nisbridge/gi接口/gi进行/vn编程/gi /x将/d抽象/gi和/cc现实/n进行/vn解耦/gi：/w其他/rzv抽象类/gi和/cc实现/gi子类/gm和/cc上/f一个/mq例子/gi一样/uyyclient/nz：/w这/rzv就/d可以/v理解/gi了/ule，/w我们/rr将/d抽象/gi的/ude1bridge /nz和/cc具体/a的/ude1mybridge /nz解/v耦合/vn，/w通过/p对/pwork/nz调用/gi /x，/w来/vf实现/gi对/pcoder /nz和/cc designer/nz的/ude1调用/gi。/w桥接/gi的/ude1用意/n是/vshi：/w将/d抽象化/nz与/cc实现/gi化解/v耦/nz，/w使得/vi二者/rzv可以/v独立/a变化/gi，/w像/v我们/rr常用/a的/ude1jdbc/gi桥/ndrivermanager/nz一样/uyy，/wjdbc/gi进行/vn连接/gi数据库/gi的/ude1时候/n，/w在/p各个/rz数据库/gi之间/f进行/vn切换/vn，/w基本/a不/d需要/v动/v太多/ad的/ude1代码/gi，/w甚至/d丝毫/a不用/d动/v，/w原因/n就是/vjdbc/gi提供/v统一/vn接口/gi，/w每个/r数据库/gi提供/v各自/rr的/ude1实现/gi，/w用/p一个/mq叫做/v数据库/gi驱动/gi的/ude1程序/gi来/vf桥接/gi就行了/l。/w