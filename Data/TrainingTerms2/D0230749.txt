#23/nz种/q设计模式/nz之/uzhi策略模式/gi
定义/gi：/w定义/gi一/nz组/n算法/gi，/w将/d每个/r算法/gi都/d封装/gi起来/vf，/w并且/c使/v他们/rr之间/f可以/v互换/v。/w类型/gi：/w行为/n类/gi模式/gi类图/gi：/w策略模式/gi是/vshi对/p算法/gi的/ude1封装/gi，/w把/pba一系列/b的/ude1算法/gi分别/d封装/gi到/v对应/vi的/ude1类/gi中/f，/w并且/c这些/rz类/gi实现/gi相同/a的/ude1接口/gi，/w相互之间/bl可以/v替换/v。/w在/p前面/f说/v过/uguo的/ude1行为/n类/gi模式/gi中/f，/w有/vyou一种/nz模式/gi也/d是/vshi关注/v对/p算法/gi的/ude1封装/gi―/w―/w模版/gi方法/gi模式/gi，/w对照/v类图/gi可以/v看到/v，/w策略模式/gi与/cc模版/gi方法/gi模式/gi的/ude1区别/gi仅仅/d是/vshi多/a了/ule一个/mq单独/d的/ude1封装/gi类/gicontext/nz，/w它/rr与/cc模版/gi方法/gi模式/gi的/ude1区别/gi在于/v：/w在/p模版/gi方法/gi模式/gi中/f，/w调用/gi算法/gi的/ude1主体/n在/p抽象/gi的/ude1父类/nz中/f，/w而/cc在/p策略模式/gi中/f，/w调用/gi算法/gi的/ude1主体/n则/d是/vshi封装/gi到/v了/ule封装/gi类/gicontext/nz中/f，/w抽象/gi策略/gistrategy/gi一般/ad是/vshi一个/mq接口/gi，/w目的/gi只是/d为了/p定义/gi规范/gi，/w里面/f一般/ad不/d包含/v逻辑/n。/w其实/d，/w这/rzv只是/d通用/gi实现/gi，/w而/cc在/p实际/n编程/gi中/f，/w因为/c各个/rz具体/a策略/gi实现/gi类/gi之间/f难免/v存在/v一些/m相同/a的/ude1逻辑/n，/w为了/p避免/v重复/gi的/ude1代码/gi，/w我们/rr常常/d使用/gi抽象类/gi来/vf担任/vstrategy/gi的/ude1角色/gi，/w在/p里面/f封装/gi公共/b的/ude1代码/gi，/w因此/c，/w在/p很/d多/a应用/gi的/ude1场景/gi中/f，/w在/p策略模式/gi中/f一般/ad会/v看到/v模版/gi方法/gi模式/gi的/ude1影子/n。/w策略模式/gi的/ude1结构/gi封装/gi类/gi：/w也/d叫/vi上下文/gi，/w对/p策略/gi进行/vn二次/nz封装/gi，/w目的/gi是/vshi避免/v高层/n模块/gi对/p策略/gi的/ude1直接/ad调用/gi。/w抽象/gi策略/gi：/w通常/d情况下/nz为/p一个/mq接口/gi，/w当/p各个/rz实现/gi类/gi中/f存在/v着/uzhe重复/gi的/ude1逻辑/n时/qt，/w则/d使用/gi抽象类/gi来/vf封装/gi这/rzv部分/n公共/b的/ude1代码/gi，/w此时/r，/w策略模式/gi看上去/v更/d像是/v模版/gi方法/gi模式/gi。/w具体/a策略/gi：/w具体/a策略/gi角色/gi通常/d由/p一/nz组/n封装/gi了/ule算法/gi的/ude1类/gi来/vf担任/v，/w这些/rz类/gi之间/f可以/v根据/p需要/v自由/a替换/v。/w策略模式/gi代码实现/gi策略模式/gi的/ude1优缺点/gi策略模式/gi的/ude1主要/b优点/gi有/vyou：/w策略/gi类/gi之间/f可以/v自由/a切换/vn，/w由于/p策略/gi类/gi实现/gi自/p同一个/b抽象/gi，/w所以/c他们/rr之间/f可以/v自由/a切换/vn。/w易于/vd扩展/gi，/w增加/v一个/mq新的/a策略/gi对/p策略模式/gi来说/uls非常容易/l，/w基本上/d可以/v在/p不/d改变/v原有/v代码/gi的/ude1基础上/nz进行/vn扩展/gi。/w避免/v使用/gi多重/b条件/n，/w如果/c不/d使用/gi策略模式/gi，/w对于/p所有/b的/ude1算法/gi，/w必须/d使用/gi条件/n语句/gi进行/vn连接/gi，/w通过/p条件/n判断/gi来/vf决定/v使用/gi哪/ry一种/nz算法/gi，/w在/p上/f一篇/nz文章/gi中/f我们/rr已经/d提到/v，/w使用/gi多重/b条件/n判断/gi是/vshi非常/d不/d容易/ad维护/gi的/ude1。/w策略模式/gi的/ude1缺点/gi主要/b有/vyou两/nz个/q：/w维护/gi各个/rz策略/gi类/gi会/v给/p开发/gi带来/v额外/b开销/n，/w可能/v大家/rr在/p这/rzv方面/n都/d有/vyou经验/gi：/w一般来说/vl，/w策略/gi类/gi的/ude1数量/n超过/v5/nz个/q，/w就/d比较/gi令人/v头疼/a了/ule。/w必须/d对/p客户端/gi（/w调用者/n）/w暴露/v所有/b的/ude1策略/gi类/gi，/w因为/c使用/gi哪种/ry策略/gi是/vshi由/p客户端/gi来/vf决定/v的/ude1，/w因此/c，/w客户端/gi应该/v知道/v有/vyou什么/ry策略/gi，/w并且/c了解/v各种/rz策略/gi之间/f的/ude1区别/gi，/w否则/c，/w后果/gi很/d严重/a。/w例如/v，/w有/vyou一个/mq排序算法/gi的/ude1策略模式/gi，/w提供/v了/ule快速排序/gi、/w冒泡排序/gi、/w选择排序/gi这/rzv三种/nz算法/gi，/w客户端/gi在/p使用/gi这些/rz算法/gi之前/f，/w是不是/v先要/b明白/v这/rzv三种/nz算法/gi的/ude1适用/vi情况/n？/w再/d比如/v，/w客户端/gi要/v使用/gi一个/mq容器/gi，/w有/vyou链表/gi实现/gi的/ude1，/w也/d有数/a组/n实现/gi的/ude1，/w客户端/gi是不是/v也/d要/v明白/v链表/gi和/cc数组/gi有/vyou什么/ry区别/gi？/w就/d这一点/nz来说/uls是/vshi有悖于/v迪米特/nrf法则/gi的/ude1。/w适用/vi场景/gi做/v面向对象设计/gi的/ude1，/w对/p策略模式/gi一定/b很/d熟悉/v，/w因为/c它/rr实质上/nz就是/v面向对象/gi中的/v继承/gi和/cc多态/gi，/w在/p看完/v策略模式/gi的/ude1通用/gi代码/gi后/f，/w我/rr想/v，/w即使/c之前/f从来/d没有/v听说/v过/uguo策略模式/gi，/w在/p开发/gi过程/gi中/f也/d一定/b使用/gi过/uguo它/rr吧/y？/w至少/d在在/d以下/f两/nz种/q情况下/nz，/w大家/rr可以/v考虑/v使用/gi策略模式/gi，/w几/d个/q类/gi的/ude1主要/b逻辑/n相同/a，/w只/d在/p部分/n逻辑/n的/ude1算法/gi和/cc行为/n上/f稍/d有区别/nz的/ude1情况/n。/w有/vyou几/d种/q相/d的/ude1行为/n，/w或者说/c算法/gi，/w客户端/gi需要/v动态/gi地/ude2决定/v使用/gi哪/ry一/nz种/q，/w那么/c可以/v使用/gi策略模式/gi，/w将/d这些/rz算法/gi封装/gi起来/vf供/vi客户端/gi调用/gi。/w策略模式/gi是/vshi一种/nz简单/a常用/a的/ude1模式/gi，/w我们/rr在/p进行/vn开发/gi的/ude1时候/n，/w会/v经常/d有意无意/dl地/ude2使用/gi它/rr，/w一般来说/vl，/w策略模式/gi不会/v单独/d使用/gi，/w跟/p模版/gi方法/gi模式/gi、/w工厂模式/gi等/udeng混合/vn使用/gi的/ude1情况/n比较/gi多/a。/w