#小/a桐学/nz设计/gi模式--模版/nz方法/gi（/wTEMPLATE METHOD/nz）/w
ps/nz:/w最近/t在/p恶补/nz算法/gi和/cc设计模式/nz，/w把/pba这些/rz东西/nmark/nz下来/vf，/w给/p大家/rr一个/mq参考/gi。/w定义/gi看看/v二十三种/nz设计模式/nz中的/v描述/gi―/w―/w定义/gi一个/mq操作/gi中的/v算法/gi的/ude1骨架/n，/w而/cc将/d一/nz些/q步骤/gi延迟/v到/v子类/gm中/f，/w模板方法/gi使得/vi子类/gm可以/v不/d改变/v一个/mq算法/gi的/ude1结构/gi即可/v重定义/nz该/rz算法/gi的/ude1某些/rz特定/b步骤/gi。/w老实/a说/v，/w刚/d看到/v这个/rz定义/gi时/qt，/w我/rr不是/c很/d理解/gi。/w看完/v例子/gi之后/f，/w我/rr才/d明白/v，/w其实/d这/rzv句话/q简单/a地/ude2说/v，/w就是/v将/d具体/a的/ude1实现/gi方法/gi放到/v子类/gm中/f，/w超类/nz提供/v使用/gi抽象/gi方法/gi的/ude1接口/gi。/w好像/v这样/rzv讲/v也/d是/vshi很/d抽象/gi，/w下面/f看看/v实现/gi。/w实现/gi假设/gi你/rr现在/t有/vyou一/nz批/q水果/n出售/v，/w你/rr可以/v将/d它/rr全部/m批发/vn给/p别人/rr，/w这样/rzv赚少一点/nz，/w不过/c你/rr很/d聪明/a，/w你/rr想到/v可以/v将/d它/rr用/p不同/a的/ude1礼品盒/n包装/n，/w分/qt档次/n出售/v，/w来/vf获取/gi更多/ad的/ude1利润/n。/w你/rr将/d水果/n分成/via/nz、/wb/nz、/wc/nz、/wd/nz档次/n，/w每个/r档次/n有/vyou不同/a的/ude1价格/n，/w分别/d是/vshi100/nz，/w80/nz，/w60/nz，/w40。/nz刚好/d你/rr学/v过/uguocoding/nz，/w于是/cc你/rr用/p程序/gi来/vf模拟/gi这个/rz过程/gi，/w常见/a的/ude1做法/n就是/v定义/gi一个/mq转换/gi类/gi进行/vn转换/gi。/w写到/v这里/rzs，/w你/rr可能/v觉得/v还/d不错/a，/w一个/mq方法/gi就/d完成/v。/w但是/c考虑到/v可维护性/gi，/w这/rzv就/d有点/d坑/n了/ule。/w如果/c你/rr以后/f再分/d更多/ad的/ude1等级/n，/w你/rr就/d会/v发现/v你/rr这个/rz处理方法/gi被/pbeiif/nz语句/gi填充/v得/ude3满满的/z，/w看上去/v就/d有点/d晕/vi。/w再考虑到/nz你/rr可能/v不是/c一/nz个人/n维护/gi这段/r代码/gi，/w任何人/r都/d填塞/nz几个/nz类型/gi后/f，/w这个/rz类/gi很快/d就/d变得/vi很/d庞大/a。/w用/p模版/gi方法/gi就/d可以/v令/v它/rr变得/vi很/d清爽/a。/w然后/c每/rz有/vyou一种/nz等级/n，/w就/d新建/v一个/mq类/gi去/vf继承/gipack/nz，/w实现/gipacking/nz方法/gi。/w这样/rzv我们/rr就/d用/p不断/d建/v新的/a类/gi去/vf代替/v了/ule之前/f的/ude1不断/d增加/vif/nz语句/gi，/w虽然/c这样/rzv同样/d会/v导致/gi整个/b工程/n变得/vi庞大/a，/w但是/c维护/gi起来/vf变得/vi更/d方便/a。/w每个/r人/n维护/gi自己/rr的/ude1类/gi，/w不会/v干扰/gi别人/rr的/ude1代码/gi。/w总结/gi从/p上面/f例子/gi可以/v看到/v，/w在/p模版/gi方法/gi中/f，/w子类/gm负责/v具体/a的/ude1实现/gi，/w超类/nz只需/v提供/v执行/v抽象/gi方法/gi的/ude1对外/vn方法/gi就/d可以/v了/ule。/w这个/rz模式/gi和/cc我们/rr平时/t做/vppt/gi类似/a，/w超类/nz相当于/vppt/gi的/ude1模版/gi，/w子类/gm就是/v我们/rr自己/rr的/ude1内容/gi。/w