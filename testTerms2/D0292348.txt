#如何/ryv选择/gi代码/gi测试工具/nz
       /x一/nz、/w如何/ryv建立/gi属于自己/v的/ude1代码测试/gi框架/gi   /x如何/ryv在/p代码/gi走查/nz中/f选择/gi合适/a的/ude1自动化/gi工具/gi，/w一直/d困扰/v着/uzhe嵌入式软件/gi工程师/gi。/w在/p嵌入式软件/gi中/f涉及/v大量/m的/ude1对齐/gi、/w大小/n端/v以及/cc临界/b资源/gi保护/gi等等/udeng，/w再/d加上/v实时性/nz要求/n等/udeng，/w目前/t市面上/n可选/v的/ude1代码/gi测试工具/nz少之又少/l。/w目前/t适合/v嵌入式/gic/nz代码/gi静态/gi测试/gi的/ude1工具/gi在/p国内/s能/v使用/gi到/v的/ude1收费/gi的/ude1有/vyoutestbed/nz、/wqac/nz、/wpclint/nz，/w这些/rz都/d支持/vmisra/nz98/nz和/ccmisra/nz04/nz,/nz但/cmisra/nz的/ude1规则/gi是/vshi灵动/a的/ude1，/w不同/a的/ude1项目/gi和平台/n的/ude1侧重/gi也/d不/d一样/uyy，/w并不/d完全/ad适用/vi，/w这个/rz时候/n就/d涉及/v到/v规则/gi定制/n了/ule。/w收费/gi的/ude1工具/gi在/p规则/gi定制/n上/f肯定/v会/v遇到/v瓶颈/gi（/w虽然/c都/d开放/gi第三方/nz的/ude1可/v定制/n的/ude1规则/gi和/cc协议/gi）/w，/w因为/c工具/gi兼顾/v通用性/n，/w工具/gi的/ude1生产商/nnd是/vshi不会/v单独/d为/p某个/rz项目/gi特征/gi去/vf更改/gi分析器/n，/w就算/d同意/v修改/gi，/w也/d需要/v担负/v高昂/a的/ude1设计/gi成本/n。/w /x这样/rzv我们/rr需要/v一个/mq开源/gi的/ude1分析/gi工具/gi，/w可以/v针对/gi公司/nis的/ude1代码规范/gi和/cc项目/gi特点/n进行/vn规则/gi定制/n（/w首先/d规范/gi要/v对比/gimisra/nz标准/gi，/w是/vshi可行/a的/ude1，/w验证/v有效/gi的/ude1，/w且/c规范/gi的/ude1条款/n之间/f是/vshi互补/gi而/cc不是/c互斥/v的/ude1）/w，/w这样/rzv在/p代码/gi编写/gi阶段/gi（/w编码/gi规范/gi检查/gi）/w和/cc代码/gi走查/nz阶段/gi（/w一旦/d项目/gi代码/gi达到/v一定/b量级/n，/w比如/v使用/gi了/uleos/gi\/nzgui/nz\/nz网络协议/nz栈/gi等等/udeng，/w且/c公司/nis追逐/v硬件/gi成本/n，/w需要/v经常/d移植/vn更换/v平台/gi，/w对/p代码/gi编写/gi人员/gi的/ude1要求/n很高/d）/w，/w可以/v利用/v定制/n的/ude1工具/gi，/w帮助/v开发人员/n快速/d定位/gibug/gi，/w并且/c协助/v项目/gi管理人员/nnt在/p代码/gi模块/gi提交/gi时/qt进行/vn规范/gi验证/v和/cc管理/gi。/w /x目前/t开源/gi的/ude1c/nz分析/gi工具/gi使用/gi比较/gi多/a的/ude1有/vyoucppcheck/nz、/wsplint/nz、/wvalgrind/nz，/w其中/rzcppcheck/nz、/wsplint/nz属于/v静态/gi测试工具/nz（/w只/d做/v语义/n分析/gi，/w不/d运行/gi）/w，/wvalgrind/nz是/vshi动态/gi测试工具/nz（/w编译/gi且/c运行/gi代码/gi）/w，/wcppcheck/nz和/ccvalgrind/nz的/ude1侧重点/n是/vshi内存/gi和/cc资源/gi泄漏/gi，/w而/ccsplint/nz较/d两/nz种/q工具/gi来说/uls比较/gi全面/ad，/w这样/rzv对/p后期/f的/ude1规则/gi定制/n可以/v少/a走点/n弯路/n，/w有/vyou一定/b的/ude1平台/gi和/cc基础/gi可以/v搭建/v属于自己/v的/ude1测试/gi架构/gi。/w如果/c公司/nis愿意/v投入/v，/w可以/v结合/vsplint/nz和/ccvalgrind/nz打造/v一个/mq静态/gi和/cc动态/gi兼顾/v的/ude1测试/gi架构/gi，/w能/v覆盖/gi到/v管理/gi流程/gi的/ude1所有/b阶段/gi，/w因为/cvalgrind/nz支持/v覆盖率/n分析/gi统计/gi，/w这个/rz是/vshi评价/gi单元测试/gi的/ude1有效/gi手段/n。/w这个/rz看/v说/v起来/vf容易/ad，/w动起来/nz难/a，/w因为/csplint/nz是/vshi维吉亚/nz大学/gi和/cc麻省理工/nz联合/gi制作/gi的/ude1，/w而/ccvalgrind/nz也/d是/vshi获得/v了/ule第二届/nzgoogle/nz-/nzo/nz'/nzreilly/nz开源/gi代码/gi奖/n的/ude1优秀/gi产品/gi，/w他们/rr的/ude1定制/n都/d需要/v有/vyou丰富/a的/ude1c语言/gi基础/gi（/w都/d是/vshic/nz做/v的/ude1且/c都/d是/vshi百万级/nz的/ude1代码/gi量/n）/w，/w且/c对/p主流/gi的/ude1linux/gi下/f的/ude1开源词/nz法/n分析器/n有/vyou一定/b的/ude1了解/v，/w好/a了/ule，/w大家/rr止步/vi了/ule。/w /x在/p这里/rzs，/w笔者/n告诉/v大家/rr，/w一切/rz看起来/v难/a的/ude1东西/n都/d是/vshi纸老虎/n（/w老毛/n的/ude1名言/n）/w。/w为什么/ryv这么/rz说/v，/w要/v知道/v，/w这些/rz工具/gi使用/gi的/ude1词法/n分析器/n也/d是/vshi别人/rr做/v的/ude1，/w他们/rr也/d是/vshi借用/v了/ule大量/m的/ude1素材/n，/w搭建/v了/ule这个/rz开源/gi的/ude1测试/gi框架/gi，/w但/c不可否认/i他们/rr对/p代码测试/gi做出/v的/ude1贡献/n。/w但/c我们/rr不/d应该/v害怕/v。/w后面/f作者/nnt会/v操刀/nz分解/gisplint/nz和/cc定制/n优化/gi内存/gi溢出/gi分析/gi实例/gi来/vf帮助/v读者/n了解/v这个/rz工具/gi。/w当然/d，/w文章内容/nz为了/p通俗易懂/nz且/c仅/d代表/nnt个人观点/nz，/w难免会/l触怒/v工具/gi的/ude1作者/nnt，/w在/p这里/rzs深表歉意/vn。/w开源/gi之路/r慢慢/d，/w需要/v大家/rr的/ude1无私奉献/vl。/w欢迎/v大家/rr拍砖/nz，/w今天/t写到/v这里/rzs。/w收工/vi。/w