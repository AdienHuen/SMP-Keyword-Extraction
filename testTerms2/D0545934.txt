#分治法/gi_/nz随机/b快速排序/gi
常规/n快速排序/gi基本/a思想/gi：/w /x分解--递归/nz求解/gi /x以下/f是/vshi我/rr认为/v最/d简洁/gi的/ude1快速排序/gi代码/gi红色/gi数字/gi表示/v分割/gi数组/gi的/ude1基准/gi元素/gi，/w左边/f小于/v它/rr，/w右边/f大于/v它/rr。/w蓝色/n下划线/n表示/v将要/d进行/vn排序/gi的/ude1元素/gi。/w总所周知/nz：/w快速排序/gi的/ude1算法/gi平均/a时间/gi为/po/nz(/nznlogn/gi)/nz,/nz因为/c存在/v最差/a的/ude1情况/no/nz(/nzn/nz^/nz2/nz)/nz,/nz这/rzv时间复杂度/gi只是/d平均/a而已/y，/w具体/a到/v某个/rz实例/gi或许/d就/d不是/c这样/rzv了/ule为什么/ryv呢/y？/w因为/c快速排序/gi运行时间/gi与/cc划分/v是否/v对称/gi有关/vn，/w假如/c你/rr的/ude1每次/r划分/v都/d不是/c很/d均匀/a，/w时间复杂度/gi绝对/d不/d可能/v有/vyouo/nz（/wnlogn/gi)/nz,/nz例如/v（/w8/nz,/nz7/nz,/nz6/nz,/nz5/nz,/nz4/nz,/nz3/nz,/nz2/nz,/nz1/nz,/nz0/nz）/w，/w结果/n如/v图/gi：/w这里/rzs可以/v看出/v有/vyou8/nz次/qv递归/gi，/w并/cc没有/v8/nzlog/gi8/nz=/nz7.22/nz,/nz从/p输出/gi可见/c，/w而且/c有些/rz递归/gi是/vshi没有/v意义/n的/ude1。/w那么/c所谓/v的/ude1均匀/a划分/v又是/c什么/ry呢/y？/w在/p某/rz一轮/nz排序/gi时/qt，/w不是/c单一/gi只/d选择/gi首位/n做/v基准/gi（/w如/v上述/b的/ude1常规/n算法/gi）/w，/w而是/c每次/r基准/gi的/ude1选择/gi都/d是/vshi随机/b的/ude1，/w对/p每个/r元素/gi而言/uls概率/gi大致相同/i的/ude1。/w在/p这里/rzs我/rr的/ude1随机/b生成/v数函数/nz是/vshi简单/a的/ude1取/v中位数/gm，/w但/c确实/ad是/vshi有/vyou效果/gi的/ude1，/w递归/gi规模/gi降低成/nz了/ule7/nz次/qv然后/c当/p我/rr优化/gi一下/m随机/b数/n生成/v函数/gi，/w效果/gi更加/d明显/a，/w递归/gi次数/gi基本上/d4/nz，/w5/nz，/w6/nz左右/f看看/v激动/a不/d，/w当时/t我/rr就/d震惊/v了/ule，/w时间复杂度/gi竟然/d可以/v优化/gi大/ao/nz（/wn/nz//nz2/nz)/nz啊/y，/w简直/d是/vshi超神/nz了/ule。/w由此可见/c快速排序/gi的/ude1时间复杂度/gi和/cc划分/v程度/n有/vyou很大/d关系/gi，/w更/d重要/a的/ude1是/vshi随机/b选择/gi策略/gi的/ude1使用/gi，/w会/v显著/ad提高/v快/a排/v的/ude1速度/n。/w