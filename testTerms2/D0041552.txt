#技术主管/nnt必须/d做/v的/ude1事情/n
作为/p一名/nz技术主管/nnt的/ude1工作/gi是/vshi令人/v非常/d振奋/v的/ude1，/w你/rr每天/r都/d需要/v应对/v新的/a挑战/gi，/w要/v解决/v新的/a问题/gi，/w以此/d获得/v很大/d的/ude1满足感/nz。/w但/c有些/rz时候/n，/w为了/p改进/gi你/rr的/ude1团队/gi，/w让/v它/rr变得/vi更/d强大/a，/w你/rr还/d需要/v一/nz些/q提示/gi。/w有/vyou许多种/nz技术/gi可以/v保证/v我们/rr所/usuo生产/gi的/ude1产品质量/nz，/w但/c其中/rz最重要/nz也/d是/vshi最/d强大/a的/ude1一点/m毫无疑问/dl是/vshi反馈/gi循环/gi。/w如/v你/rr所知/v，/w开发新/nz软件/gi比起/v科学研究/nz更/d依赖于/v经验/gi，/w这/rzv也/d是/vshi我们/rr需要/v衡量/v指标/gi以及/cc小型/b的/ude1、/w但/c增量式/nz的/ude1改进/gi的/ude1原因/n，/w只有/c这样/rzv才/d能够/v满足用户/n或/c客户/n的/ude1需求/gi。/w反馈/gi循环/gi是/vshi一种/nz非常/d基础/gi的/ude1、/w但/c又是/c非常/d强大/a的/ude1方法/gi，/w它/rr能够/v帮助/v我们/rr和/cc我们/rr的/ude1团队/gi通过/p每天/r的/ude1努力工作/v最终/d取得成功/i。/w通过/p反馈/gi循环/gi，/w你/rr可以/v保证/v获得/v反馈/gi以及/cc衡量/v指标/gi，/w让/v它们/rr帮助/v你/rr进一步/d改进/gi你/rr的/ude1产品/gi。/w此外/c，/w多亏/v了/ule反馈/gi循环/gi的/ude1存在/v，/w你/rr可以/v将/d这些/rz数据/gi指标/gi展现/v给/p经理层/n或/c技术/gi架构师/gi，/w以/p调整/vn产品/gi的/ude1技术/gi决策/gi，/w并为/c他们/rr展示/gi项目/gi的/ude1进展/vn情况/n，/w以及/cc在/p开发流程/gi中/f你/rr的/ude1团队/gi所/usuo遇到/v的/ude1问题/gi。/w下面/f这些/rz技术/gi中的/v大多/d数/n也许/d已经/d存在/v于/p你/rr的/ude1组织/gi中/f了/ule，/w但/c你/rr或许/d希望/v能够/v获得/v不同/a的/ude1指标/gi，/w或/c缩短/v反馈/gi循环/gi，/w以便/d通过/p更多/ad的/ude1信息/gi来/vf决定/v要/v采取/v哪种/ry最佳/z的/ude1策略/gi。/w在/p本文/r中/f，/w我/rr将/d乐于/v分享/gi一些/m方法/gi，/w以/p帮助/v你/rr实现/gi作为/p一名/nz技术主管/nnt的/ude1最终目标/nz，/w那/rzv当然/d就是/v打造/v一个/mq强壮/a的/ude1技术/gi环境/n，/w让/v开发者/gi们/k可以/v依赖/v这个/rz环境/n，/w并/cc使/v他们/rr每天/r都/d能够/v发挥/v出/vf最高/a的/ude1水平/n，/w让/v他们/rr感到/v安全/gi，/w并且/c清楚/a地/ude2掌握/v代码/gi的/ude1质量/gi。/w结对编程/gi与/cc代码/gi复审/vn有/vyou两/nz种/q技术/gi能够/v为/p你/rr带来/v第一时间/nz的/ude1反馈/gi以及/cc益处/n，/w它们/rr当然/d就是/v结对编程/gi与/cc代码/gi复审/vn。/w让/v我们/rr首先/d从/p结对编程/gi开始/v。/w当/p我们/rr考虑/v这项/r技术/gi的/ude1时候/n，/w首先/d要/v向/p经理/gi证明/v，/w让/v两/nz个人/n同时/c编写/gi同一/b份/q代码/gi的/ude1做法/n是否/v得/ude3。/w如果/c你/rr对/p结对编程/gi已经/d有/vyou了/ule足够/v的/ude1经验/gi，/w那么/c你/rr应该/v能够/v将/d生产力/n的/ude1下降/vi控制/vn在/p15%/nz之内/f，/w同时/c做到/v增加/v代码/gi的/ude1质量/gi，/w并且/c促进/v团队/gi成员/nnt之间/f共享/gi知识/gi，/w这种/r方式/n还/d能够/v帮助/v你/rr在/p开发/gi过程/gi中/f尽早/d地/ude2发现/vbug/gi。/w最后/f一点/m看起来/v只是/d个/q很小/a的/ude1改进/gi，/w但/c尽早/d发现/vbug/gi有助于/v减少/v修复/gibug/gi所/usuo消耗/gi的/ude1精力/n，/w而/cc如果/c你/rr之后/f才/d发现/v这个/rzbug/gi，/w那么/c公司/nis可能会/nz为此/bl付出/v更大/d的/ude1代价/gi，/w因为/c要/v理解/gi一个/mq“/w陈旧/a的/ude1”/w实现/gi方式/n可能/v要/v付出/v两倍/nz、/w甚至/d更多/ad的/ude1精力/n。/w在/p进行/vn结对编程/gi的/ude1过程/gi中/f，/w你/rr需要/v记住/v两件事/nz。/w首先/d，/w你/rr应当/v鼓励/gi团队/gi每天/r进行/vn几/d个/q小时/n的/ude1结对/v，/w并且/c每/rz30/nz分钟/qt变换/gi一次/nz角色/gi。/w其次/c，/w你/rr应当/v创建/gi一种/nz适合/v结对编程/gi的/ude1工作/gi环境/n，/w开发者/gi们/k唯一/b要/v做/v的/ude1就是/v为了/p实现/gi这个/rz软件/gi而/cc编写/gi代码/gi，/w因此/c不要/d安装/gi邮件/n客户端/gi或/c聊天工具/nz，/w只要/c满足/v在/p这个/rz项目/gi上/f工作/gi的/ude1最小化/nz配置/gi就/d足够/v了/ule。/w现在/t让/v我们/rr来看/u一/nz看/v代码/gi复审/vn。/w我/rr经常/d看到/v由于/p时间/gi已经/d接近/v某个/rz迭代/gi的/ude1结束/v，/w甚至/d是/vshi接近/v最终/d的/ude1交付/v期限/gi，/w而/cc选择/gi忽略/v代码/gi复审/vn这个/rz实践/gi的/ude1情况/n。/w代码/gi复审/vn对于/p将/d代码/gi知识/gi传递/v给/p所有/b团队/gi成员/nnt、/w维护/gi代码/gi的/ude1一致性/gi以及/cc从/p技术/gi角度/n改善/v项目/gi来说/uls是/vshi十分/d重要/a的/ude1。/w在我看来/l，/w主要/b问题/gi在于/v代码/gi复审/vn往往/d是/vshi在/p代码/gi完成/v几天/nz之后/f才/d进行/vn的/ude1，/w而/cc如果/c你/rr没有/v采取/v适当/a的/ude1做法/n，/w很可能会/nz失去/v这/rzv一/nz实践/gi所/usuo带来/v的/ude1所有/b益处/n。/w如果/c你/rr想/v从/p这个/rz实践/gi从/p获得/v最大/gm的/ude1益处/n，/w我/rr建议/gi的/ude1做法/n是/vshi，/w当/p你/rr在/p版本控制系统/gi中签/v入/v代码/gi之后/f，/w在/p同一/b天/qt之内/f请/v你/rr的/ude1同事/n帮助/v你/rr检查/gi你/rr的/ude1代码/gi。/w可以/v安排/v在/p一天/nz之中/f专门/d抽出/v一些/m时间/gi用于/v检查/gi其他/rzv开发者/gi的/ude1代码/gi。/w记住/v，/w如果/c代码/gi复审/vn做好/v了/ule，/w它/rr将/d会/v成为/v一种/nz非常/d强大/a与/cc有效/gi的/ude1手段/n。/w增量式/nz设计/gi这一点/nz绝对/d是/vshi我/rr最/d喜爱/v的/ude1反馈/gi循环/gi方式/n，/w如/v你/rr所知/v，/w对/p任何/rz项目/gi进行/vn过度/d的/ude1前期/f设计/gi通常/d会/v导致/gi错误/gi的/ude1假设/gi和/cc误解/gi，/w并且/c在/p技术/gi方面/n会/v进行/vn过多/d的/ude1猜测/v。/w从/p架构/gi的/ude1角度/n来说/uls，/w开发/gi一个/mq项目/gi最好/d的/ude1方式/n是/vshi在/p每个/r项目/gi开始/v时/qt创建/gi刚好/d足够/v的/ude1架构/gi，/w只要/c它/rr能够/v满足/v你/rr和/cc你/rr的/ude1团队/gi着手/v开发/gi就/d好/a。/w然后/c在/p每个/r迭代/gi刚开始/nz的/ude130/nz分钟/qt至/p2/nz小时/n之内/f对/p架构/gi与/cc设计/gi进行/vn增量式/nz的/ude1复审/vn，/w专注/vi于/p这个/rz新迭代/nz必须/d完成/v的/ude1任务/gi。/w通过/p这种/r方式/n，/w你/rr将/d创建/gi出/vf一种/nz合理/a的/ude1架构/gi，/w它/rr能够/v完美/a地/ude2涵盖/v你/rr的/ude1客户/n或/c公司/nis的/ude1需求/gi，/w并/cc促进/v新/a特性/gi的/ude1实现/gi或/c进行/vn重构/gi。/w你/rr将/d看到/v，/w在/p项目/gi的/ude1开始/v阶段/gi，/w你/rr会/v在/p架构/gi上/f投入/v较多/d的/ude1时间/gi，/w但/c等到/v几个迭/nz代/q结束/v之后/f，/w你/rr会/v发现/v在/p架构/gi上/f的/ude1投入/v时间/gi减少/v了/ule，/w你/rr的/ude1架构/gi的/ude1稳定性/n与/cc高质量/nz将/d会/v为/p你/rr带来/v很大/d的/ude1益处/n。/w设计/gi架构/gi的/ude1最佳/z方式/n是/vshi使用/gi一块/s白板/nz，/w这样/rzv就/d能够/v从/p其他/rzv成员/nnt那里/rzs获得/v第一时间/nz的/ude1反馈/gi，/w并且/c你/rr可以/v在/p白板/nz上/f快速/d地/ude2添加/gi、/w修改/gi或/c是/vshi删除/gi任意/d元素/gi。/w记住/v，/w如果/c架构/gi文档/gi不能/v保持/v更新/gi，/w在/p公司/nis中/f就/d起/vf不了/v任何/rz作用/gi。/w既然/c代码/gi本身/rz就/d能够/v解释/gi各种/rz设计/gi决策/gi，/w何必/d还要/d使用/gi各种/rz昂贵/a的/ude1建模/gi软件/gi呢/y？/w我/rr个人/n在/p这/rzv方面/n的/ude1建议/gi是/vshi，/w创建/gi一个/mq高级/a别的/rzv架构图/n，/w让/v它/rr反映/v出/vf系统/gi中的/v主要/b组件/gi是/vshi如何/ryv交互/gi的/ude1，/w这样/rzv就/d能够/v了解/v你/rr的/ude1架构/gi是否/v可行/a，/w或者/c是/vshi需要/v继续/v改善/v。/w在/p这种/r情况下/nz，/w很容易/nz就/d能够/v生成/v这样/rzv一份/nz架构/gi文档/gi，/w并且/c修改/gi它/rr也/d不/d需要/v花费/v很大/d的/ude1精力/n。/w静态/gi分析/gi每/rz一位/nz技术主管/nnt都/d应当/v掌握/v静态/gi分析/gi技术/gi，/w因为/c它/rr能够/v为/p你/rr提供/v实用/a的/ude1指标/gi，/w帮助/v你/rr指出/v项目/gi中的/v潜在/b问题/gi，/w并/cc着重指出/n需要/v改进/gi的/ude1地方/n。/w在/p最/d常见/a的/ude1一/nz些/q技术/gi中/f，/w例如/vjava/gi、/wc#/gi或/cjavascript/gi都/d提供/v了/ule丰富/a的/ude1工具/gi，/w以/p帮助/v你/rr获取/gi有关/vn代码/gi的/ude1信息/gi，/w例如/v代码/gi圈/qv复杂度/gi（/wcyclomatic complexity/nz）/w或/c是/vshi为/p你/rr展现/v项目/gi的/ude1架构/gi。/w在/p服务器上安装/n类/gi于/psonarqube/nz这样/rzv的/ude1工具/gi同样/d能够/v帮助/v你/rr实现/gi这/rzv一/nz目标/gi。/w对于/p你/rr的/ude1团队/gi中所/j使用/gi的/ude1任何/rz一种/nz技术/gi，/w你/rr都/d应当/v设置/gi相应/vi的/ude1规则/gi让/v代码/gi符合/v公司/nis的/ude1规范/gi。/w请/v记住/v定义/gi这些/rz必须/d遵循/gi的/ude1规则/gi，/w并/cc对/p流程/gi进行/vn自动化/gi，/w以/p促进/v你/rr的/ude1团队/gi去/vf检查/gi这些/rz反馈/gi数据/gi，/w并/cc通过/p数据/gi了解到/v当前/t的/ude1问题/gi。/w因为/c衡量/v指标/gi能够/v帮助/v你/rr改善/v现状/gi，/w否则/c你/rr很难/d了解/v某个/rz变更/gi是否/v改善/v了/ule你/rr的/ude1软件/gi。/w版本控制/gi作为/p技术主管/nnt，/w你/rr应当/v成为/v整个/b公司/nis的/ude1代码/gi监护人/nnt。/w如果/c你/rr的/ude1代码/gi一团糟/n，/w那么/c在/p几年/nz、/w甚至/d只是/d几个月/nz之后/f，/w整个/b公司/nis或/c某个/rz团队/gi就/d无法/v继续/v维护/gi这个/rz项目/gi，/w或者/c是/vshi在/p实现/gi新/a特性/gi或/c分析/gi如何/ryv解决/vbug/gi时/qt痛苦万分/i。/w关于/p这一点/nz，/w我/rr建议/gi你/rr牢记/v一点/m，/w并且/c提醒/v你/rr的/ude1同事/n，/w那/rzv就是/v“/w童子军/n规则/gi”/w：/w“/w永远/d保持/v离开/v时/qt的/ude1露营地/nz比/p你/rr发现/v它/rr时/qt更/d整洁/a”/w目前/t最佳/z的/ude1方案/gi是/vshi使用/gigit/gi或/cmercurial/nz。/wgit/gi的/ude1知名度/n更高/d，/w并且/c有/vyou许多公司/nz都/d在/p使用/gi它/rr，/w因此/c也/d意味着/v关于/p它/rr的/ude1资源/gi与/cc文档/gi更多/ad，/w这/rzv也/d是/vshi我/rr推荐/gi你/rr使用/gigit/gi作为/p版本控制系统/gi的/ude1原因/n。/w但/c很/d常见/a的/ude1一种/nz状况/n是/vshi，/w某个/rz公司/nis虽然/c在/p使用/gigit/gi，/w但/c没有/v采取/v任何/rz分支/n策略/gi，/w这/rzv导致/gi每个/r项目/gi都/d处于/v无/v组织/gi状态/gi。/w你/rr应当/v通过/p实现/gi一种/nzgit/gi流/gi或/cgithub/gi流/gi策略/gi以/p避免出现/v这种/r情形/n。/w你/rr会/v发现/v，/w实现/gi这/rzv两/nz种/q策略/gi之一/rz会/v提高/v你/rr的/ude1开发者/gi的/ude1生产力/n，/w并且/c能够/v避免/v在/p合并/gi不同/a的/ude1分支/n时/qt经常出现/vn的/ude1冲突/gi问题/gi。/w所有/b开发者/gi都/d应/v记得/v的/ude1另一点/nz是/vshi在/p提交/gi代码/gi时/qt适当/a地/ude2使用/gitag/nz，/w并且/c提供/v有/vyou意义/n的/ude1注释/gi。/w尤其/d是/vshi当/p你/rr开发/gi的/ude1软件/gi准备/v公开/ad发行/v或/c是/vshi创建/gi某些/rz类库/gi时/qt，/w在/p创建/gi分发包/nz之前/f对/p你/rr的/ude1每个/r稳定/an版本/n的/ude1代码/gi进行/vntag/nz是/vshi必须/d的/ude1。/w最后/f，/w但/c并非/v最/d不/d重要/a的/ude1一点/m是/vshi，/w在/p开发者/gi提交/gi代码/gi时/qt，/w要求/n他们/rr准确/a地/ude2描述/gi他们/rr改变/v了/ule哪些/ry内容/gi，/w并且/c如果/c可能/v的话/udh，/w尽量/d做到/v频繁/a地/ude2提交/gi，/w这样/rzv能够/v让/v他们/rr更容易/nz撤消/v代码/gi或/c是/vshi处理/vn代码/gi中的/v冲突/gi。/w自动化/gi如果/c在/p公司/nis级别/n上/f还/d没有/v定义/gi自动化/gi的/ude1目标/gi，/w那么/c在/p每个/r项目/gi的/ude1开始/v阶段/gi就/d应当/v进行/vn定义/gi。/w在/p项目开发/gi过程/gi中/f必须/d有/vyou一种/nz可/v复制/gi的/ude1、/w并且/c可/v部署/gi的/ude1解决方案/gi，/w可以/v在/p开发/gi过程/gi中/f不断/d地/ude2重复/gi应用/gi。/w这样/rzv才/d能够/v保证/v最终/d所/usuo交付/v的/ude1产品/gi是/vshi正确/a的/ude1，/w并且/c避免/v接近/v项目/gi交付/v日期/gi时/qt才/d发现/v的/ude1各种/rz问题/gi。/w通常/d来说/uls，/w你/rr应该/v实现/gi以下/f功能/gi的/ude1自动化/gi：/w对/p项目/gi的/ude1各种/rz突变/vi测试/gi、/w集成测试/gi、/w验收/vn测试/gi、/w回归/gi测试/gi与/cc功能测试/gi进行/vn自动化/gi，/w尽可能/d将/d你/rr的/ude1版本控制/gi方案/gi与/cc你/rr使用/gi的/ude1自动化/gi工具/gi结合/v在/p一起/s，/w让/v它/rr测试/gi每次/r代码/gi提交/gi，/w或/c是/vshi每次/r对/pdevelopment/nz或/cmaster/gi分支/n进行/vn合并/gi时/qt运行/gi测试/gi。/w在/p每次/r构建/gi之前/f进行/vn静态/gi分析/gi能够/v帮助/v你/rr确保/v代码/gi标准/gi以及/cc产品/gi的/ude1质量/gi对/p每次/rtag/nz操作/gi或/c发布/gi进行/vntag/nz流程/gi及/cc版本控制/gi管理/gi将/d项目/gi部署/gi到/v测试环境/nz中/f，/w以便/dqa/nz人员/gi进行/vn测试/gi将/d项目/gi部署/gi到/v生产/gi环境/n当/p你/rr在/p项目/gi的/ude1开始/v阶段/gi定义/gi了/ule这些/rz步骤/gi之后/f，/w你/rr将/d发现/v，/w当/p你/rr不得不/d在/p某个/rz项目/gi上线/n几个月/nz或/c几年/nz之后/f对/p它/rr进行/vn重新/d编译/gi时/qt能够/v避免/v大部分/n的/ude1常见问题/gi，/w你/rr也/d能够/v在/p代码/gi一次/nz次/qv发布/gi的/ude1过程/gi中/f调整/vn它们/rr的/ude1质量/gi，/w保证/v一个/mq很高/d的/ude1代码/gi标准/gi，/w并/cc获得/v所需/nz的/ude1衡量/v指标/gi，/w以/p计划/gi某种/rz在/p你/rr的/ude1团队/gi或/c整个/b公司/nis之内/f进行/vn改进/gi的/ude1策略/gi敏捷/gi方法/gi你/rr需要/v维护/gi的/ude1东西/n不仅仅/d是/vshi技术/gi流/gi，/w信息流/n也/d是/vshi任何/rz项目/gi取得成功/i的/ude1关键所在/n。/w没错/vi，/w你/rr不是/c一位/nzscrum master/nz，/w但/c你/rr应当/v帮助/vscrum master/nz去/vf促进/v信息/gi的/ude1流动/vn，/w甚至/d帮助/v产品/gi负责人/nnt定义/gi用户/gi故事/gi，/w并/cc了解/v在/p适当/a的/ude1时机/n加入/v一/nz些/q技术性/n的/ude1用户/gi故事/gi以/p改善/v代码/gi质量/gi，/w通过/p指出/v潜在/b的/ude1技术/gi问题/gi帮助/v团队/gi调整/vn用户/gi故事/gi的/ude1规模/gi等等/udeng。/w因此/c，/w出于/v这些/rz以及/cc其它/rz多种/m原因/n，/w对于/p技术主管/nnt来说/uls，/w充分/ad地/ude2了解/v例如/vscrum/nz、/wkanban/nz和/ccxp/nz等/udeng最/d常用/a的/ude1框架/gi是/vshi十分/d重要/a的/ude1。/w因为/c作为/p一名/nz领导/gi，/w你/rr应当/v能够/v通过/p示范/vn的/ude1方式/n领导/gi你/rr的/ude1团队/gi，/w为/p他们/rr展现/v，/w并/cc鼓励/gi他们/rr遵循/gi敏捷/gi的/ude1最佳/z实践/gi，/w并/cc指导/vn他们/rr获得成功/l。/w实践/gi社区/gi（/wcop/nz）/w对于/p任何/rz技术/gi团队/gi来说/uls，/w在/p每天/r的/ude1日常/b工作/gi中/f分享/gi经验/gi和/cc知识/gi，/w从而/c提升/gi自己/rr是/vshi必须/d做到/v的/ude1一件事/nz。/w组织/gi一/nz种/q两/nz周一次/nz或/c每月/r一次/nz的/ude1实践/gi社区/gi能够/v有效地/nz帮助/v我们/rr实现/gi这些/rz目标/gi。/w一般来说/vl，/wcop/nz是/vshi一次/nz讲座/gi，/w技术/gi团队/gi中的/v某些/rz可以/v将/d他/rr或/c她/rr在/p目前/t所/usuo接手/v的/ude1项目/gi中/f使用/gi的/ude1某个/rz优秀/gi的/ude1方案/gi，/w或/c是/vshi某种/rz对/p整个/b团队/gi很/d实用/a的/ude1最新/a技术/gi或/c方法论/n分享/gi给/p大家/rr。/w如果/c公司/nis的/ude1规模/gi足够/v大/a，/w我/rr建议/gi可以/v按照/p技能/gi种类/n划分/v这些/rz会议/gi，/w某个/rzcop/nz专门/d针对/giqa/nz，/w某个/rz针对/gi后端/f开发者/gi，/w另一个/nz针对/gi前端/gi开发者/gi等等/udeng。/w这样一来/dl，/w会议/gi的/ude1内容/gi也/d会/v变得/vi更/d垂直/gi与/cc更/d实用/a，/w而/cc不是/c浪费时间/nz讨论/gi一/nz些/q大家/rr在短期内/l或/c较长/d一段时间/nz内/f不会/v用/p到/v的/ude1技术/gi或/c方法学/nz。/w一次/nz出色/a的/ude1实践/gi社区活动/nz应当/v在/p举办/v前/f7/nz至/p10/nz天/qt开始/v准备/v，/w推举/v出/vf1/nz至/p3/nz个/q演讲者/n，/w让/v每个/r人/n进行/vn20/nz至/p30/nz分钟/qt的/ude1演讲/gi。/w如果/c演讲者/n只有/c一人/nz，/w我/rr建议/gi让/v他/rr准备/v一个/mq最多/ad45/nz分钟/qt的/ude1主题/n，/w然后/c将/d活动/gi的/ude1第/mq2/nz部分/n用于/v问答/gi与/cc讨论/gi。/w在/p会议/gi中/f设立/v一位/nz协调者/n是/vshi必须/d的/ude1，/w至少/d在/p第/mq2/nz阶段/gi，/w他/rr可以/v鼓励/gi与会者/n分享/gi他们/rr对于/p演讲/gi内容/gi的/ude1想法/gi。/w保持/v整个/b会议/gi环境/n更/d友好/a并且/c易于/vd合作/vn，/w这/rzv有助于/v团队/gi在/p表现/v它们/rr的/ude1技巧/gi时/qt更为/d自信/gi。/w这种/r方式/n也/d能够/v产生/v一种/nz共享/gi的/ude1知识/gi，/w通过/p它/rr促进/v在/p整个/b组织/gi中/f引入/v新技术/nz和/cc方法学/nz的/ude1过程/gi。/w作为/p技术主管/nnt，/w你/rr应当/v有/vyou能力/gi组织/gi这种/r会议/gi，/w促进/v大家/rr的/ude1交流/gi，/w并且/c找到/v让/v整个/b部门/gi或/c公司/nis都/d感兴趣/a的/ude1主题/n。/w有时候/d，/w为了/p打破/v每日/r工作/gi的/ude1重复性/n，/w我/rr建议/gi可以/v一共/d观看/v一/nz些/q技术/gi会议/gi的/ude1视频/gi或/c是/vshi会议/gi讲座/gi，/w或/c是/vshi邀请/v某些/rz外部/f的/ude1演讲者/n为/p团队/gi分享/gi一/nz些/q垂直/gi的/ude1主题/n，/w然后/c对此/d进行/vn开放式/b的/ude1讨论/gi。/w总结/gi以上/f所说/c的/ude1这些/rz都/d是/vshi作为/p一个/mq技术主管/nnt应当/v掌握/v的/ude1关键/n工作/gi与/cc技术/gi，/w并且/c应当/v在/p他/rr或/c她/rr的/ude1每日/r工作/gi中/f鼓励/gi同事/n也/d这么/rz做/v。/w你/rr必须/d保持/v灵活/a，/w并/cc拥有/v足够/v的/ude1技能/gi，/w在/p任何/rz情况下/nz都/d采取/v正确/a的/ude1方式/n，/w让/v它/rr保持/v与/cc你/rr的/ude1业务/gi需求/gi一致/a，/w并且/c符合/v公司/nis的/ude1战略/gi。/w最后/f，/w但/c并非/v最/d不/d重要/a的/ude1是/vshi，/w我/rr乐于/v为/p你/rr分享/gi我/rr最/d喜爱/v的/ude1一条言/nz，/w以/p鼓励/gi你/rr开始/v改进/gi你/rr的/ude1标准/gi：/w“/w千里之行/n，/w始于足下/vl”/w /x―/w―/w /x老子/n。/w