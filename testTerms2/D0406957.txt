#docker/gi常用命令/nz
容器/gi生命周期管理/gi /x―/w容器/gi操作/gi运维/gi /x―/w容器/girootfs/nz命令/gi /x―/w镜像/gi仓库/gi /x―/w本地/gi镜像管理/gi /x―/w其他/rzv命令/gi /x―/w各种/rz状态/gi转换/gi：/w结合/v图/gi和/cc命令/gi分类/gi，/w基本/a可以/v把/pbadocker/gi的/ude1主要/b功能/gi过/uguo一/nz遍/qv了/ule理解/gidocker/gi的/ude1特点/n首先/d明确/a技术/gi要点/n，/wdocker/gi技术/gi就是/v基于/p容器/gi的/ude1虚拟化技术/gi，/w相对于/nz其它/rz虚拟化技术/gi，/w它/rr的/ude1特点/n是/vshi：/w*/nz /x轻量级/gi：/w单机/n可以/v轻松/a支持/v上百/jcontainer/nz，/w让/v各种/rz个位数/nz虚拟化/gi的/ude1方案/gi相形见绌/vl*/nz /x快速/d就绪/vi：/w一秒/nz以内/f启动/gi，/w即使/c是/vshi以/p资源/gi快速/d就绪/vi著称/v的/ude1青云/niaas/gi也/d无法/v相比/vi*/nz /x弱/a安全/gi：/wdocker/gi能够/v对/p多/a种/qos/gi资源/gi进行/vn隔离/vn，/w但是/c它/rr本质/n上/f依托/v于/p内核/gi，/w因此/c所有/b的/ude1内核/gi漏洞/n都/d是/vshidocker/gi的/ude1致命伤/n上述三/nz个/q特点/n都/d不是/c实现/gi上/f的/ude1差异/n，/w而是/c设计方案/nz的/ude1先天/n结果/n，/w因此/c上述/b结论/gi会/v在/p很长/d一段时间/nz内/f有效/gi。/w理解/gi上述/b这些/rz特点/n非常/d重要/a。/w很/d多/a刚/d接触/vdocker/gi的/ude1人/n会/v把/pba它/rr和/cc虚拟机/gi做/v类比/vi，/w然而/c这种/r类比/vi和/ccdocker/gi的/ude1最佳/z实践/gi场景/gi有所/v不同/a，/w一个/mqdocker/gi容器/gi不/d像是/v一/nz台/q虚拟机/gi，/w而/cc更/d像是/v一个/mq服务/gi单元/n，/w如果/c要/v类比/vi，/w反倒/d更/d像/v进程/gi。/w当然/d，/wdocker/gi容器/gi从/p技术/gi层面/n上/f看/v确实/ad也/d就是/v一个/mq进程/gi，/w然而/c这/rzv不是/c关键/n，/w“/w轻量级/gi”/w这个/rz特点/n带来/v的/ude1其实/d是/vshi服务器软件/nz工作方式/gi的/ude1回归/gi。/w不妨/d来/vf看看/v服务器软件/nz的/ude1工作/gi单元/n的/ude1抽象/gi工作方式/gi。/w服务器软件/nz的/ude1抽象/gi模型/gi是/vshi有限/a状态机/gi，/w不难/d想到/v，/w在/p这类/r场景/gi下/f，/w服务/gi单元/n最终/d要/v做/v的/ude1，/w无非/d就是/v下面/f这些/rz事情/n：/w1./nz /x从/p网络/gi得到/v请求/gi2./nz /x结合/v内部/f状态/gi进行/vn计算/gi  /x2.1/nz /x访问/gi独有/v或/c共享/gi的/ude1内存/gi  /x2.2/nz /x访问/gi独有/v或/c共享/gi的/ude1文件系统/gi  /x2.3/nz /x访问/gi其它/rz服务/gi单元/n3./nz /x通过/p同步/gi或者/c异步/gi的/ude1方式/n将/d计算/gi结果/n由/p网络/gi反馈/gi出去/vf最为/d复杂/a的/ude1部分/n当/p属第/nz2/nz步/qv，/w不过/c如果/c考虑到/v服务器软件/nz需要/v进行/vn水平/n扩展/gi，/w业务/gi也/d会/v逐渐/d分布化/nz，/w我们/rr会/v想到/v一句话/l，/w“/w不要/d通过/p共享内存/nz进行/vn通信/gi，/w而是/c要/v通过/p通信/gi共享内存/nz”/w，/w所以/c，/w2.1./nz /x可以/v改为/v访问/gi独有/v的/ude1内存/gi实际上/d，/w由于/p有/vyou2.3/nz的/ude1存在/v，/w2.2/nz /x也/d可以/v简化/gi为/p访问/gi独有/v的/ude1文件系统/gi，/w不过/c文件系统/gi本身/rz的/ude1io/gi性能/gi很差/d，/w一旦/d到/v了/ule这个/rz层面/n，/w往往/d是/vshi分布式/gi和/cc水平/n扩展/gi的/ude1压力/n不大/d的/ude1场景/gi，/w所以/c可以/v保留/v。/w