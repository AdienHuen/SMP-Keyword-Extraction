#如何/ryv让/vNoSQL内存数据库/gi适合/v企业级应用/gi
英文/nz原文/n：/w对于/p每一个/nz关注/v用户/gi体验/v的/ude1web应用/gi或/c移动应用/gi而言/uls，/wnosql/gi内存数据库/gi（/w例如/v开源/gi的/ude1 redis/nz和/ccmemcached/gi）/w正/d逐步/d成为/v事实上/bl的/ude1标准/gi。/w但是/c，/w近几年来/nz，/w大型/b企业/gi在/p采用/v这些/rz数据库/gi方面/n还/d面临/v着/uzhe诸/rz多/a挑战/gi，/w主要/b是/vshi由于/p性能/gi、/w可扩展性/gi和/cc可用性/gi方面/n的/ude1问题/gi。/w非常/d幸运/gi的/ude1是/vshi，/w现代/ntc编程语言/gi（/w例如/vruby/nz、/wnode.js/gi、/wpython/gi等/udeng）/w和/cc开发/gi平台/gi（/w例如/vrails/nz、/wsinatra/nz、/wdjango/nz等/udeng）/w已经/d内置/vn了/ule很/d多/a工具/gi和/cc开发/gi库/n。/w这些/rz工具/gi和/cc开发库/nz能够/v有效/gi利用/v内存数据库/gi的/ude1高性能/gi和/cc各种/rz操作命令/n，/w能够/v实现/gi当前/t流行/v的/ude1多种/m应用/gi项目/gi。/w这些/rz开源项目/gi的/ude1案例/gi包括/v作业/gi管理/gi、/w论坛/gi、/w实时/n分析/gi、/wtwitter/nz克隆/gi、/w地理位置/gg搜索/gi以及/cc高级/a缓存/gi等等/udeng。/w但是/c，/w对于/p这些/rz项目/gi成功/a至关重要/bl的/ude1是/vshi数据库系统/gi的/ude1可用性/gi（/wavailability/nz）/w、/w可扩展性/gi（/wscalability/nz）/w和/cc性能/gi（/wperformance/nz）/w。/w本文/r粗略/a的/ude1介绍/gi如何/ryv利用/v内存数据库/gi构建/gi企业级应用/gi，/w包括/v一/nz些/q技巧/gi和/cc建议/gi；/w这些/rz技巧/gi和/cc建议/gi能够/v解决/v云端/nnosql数据库/gi管理/gi面临/v的/ude1七大/n挑战/gi。/w一/nz、/w可用性/gi（/wavailability/nz）/w无论/c你/rr在/p做/v什么/ry，/w对于/p你/rr的/ude1应用/gi来说/uls数据/gi必须/d是/vshi时刻/n可用/v的/ude1。/w这/rzv对于/p内存数据库/gi来说/uls尤为/d重要/a；/w因为/c，/w如果/c没有/v适当/a的/ude1措施/gi，/w当/p下面/f的/ude1情形/n发生/v时/qt你/rr的/ude1数据/gi将/d会/v部分/n或/c全部/m丢失/v：/w1/nz)/nz /x节点/gi失效/vi（/w在/p云中/ns经常/d发生/v）/w2/nz)/nz /x进程/gi重启/gi（/w你/rr可能/v需要/v不时/d的/ude1进行/vn重启/gi）/w3/nz)/nz /x按/p需要/v扩展/gi（/w我们/rr假设/gi你/rr可能/v需要/v这个/rz）/w对于/p情形/n1/nz和/cc情形/n2/nz有/vyou两/nz种/q方式/n来/vf解决/v；/w情形/n3/nz将/d在/p稍后/d讨论/gi。/w1/nz、/w复制/gi：/w你/rr要/v确保/v将/d你/rr的/ude1数据/gi集/q保存/gi一份/nz到/v集群/gi的/ude1另一节点/nz，/w如果/c是/vshi另一数据中心/nz则/d更为/d可靠/a，/w以便/d应付/v数据中心/gi发生/v故障/gi（/w亚马逊/nrfaws/nz在/p2012/nz年/qt至少/d发生/v了/ule4/nz次/qv故障/gi）/w。/w不幸/a的/ude1是/vshi事情/n并非如此/vl简单/a。/w随便/ad就/d能/v举一个/nz复制/gi非常/d困难/an的/ude1例子/gi：/w一旦/d程序/gi的/ude1写/v频率/n增加/v，/w你/rr会/v发现/v应用服务器/gi写入/gi速度/n远大于/nz复制/gi的/ude1速度/n，/w尤其/d是/vshi在/p主/ag节点/gi和/cc复制/gi节点/gi存在/v网络/gi拥堵/v的/ude1情形/n下/f。/w一旦/d发生/v这种/r情况/n，/w如果/c数据/gi集/q非常/d大/a，/w节点/gi的/ude1复制/gi同步/gi很/d有可能/nz永远/d也/d完/vi不成/v。/w2/nz、/w自动/d切换/vn：/w为什么/ryv需要/v这个/rz？/w内存数据库/gi每秒/d处理/vn的/ude1请求/gi比/p一般/ad数据库/gi通常/d多/a100/nz倍/q，/w这/rzv就/d意味着/v每/rz增加/v一秒/nz宕机/nz时间/gi就/d会/v延迟/v更多/ad的/ude1请求/gi处理/vn并/cc给/p用户/gi带来/v不好/a的/ude1用户/gi体验/v。/w在/p实现/gi自动/d切换/vn时/qt一定/b要/v遵循/gi下面/f的/ude1原则/gi：/w(/nz1/nz)/nz /x确保/v主/ag存储/gi节点/gi一旦/d失效/vi就/d立刻/d切换/vn到/v备用/vn复制/gi节点/gi。/w这/rzv一般/ad基于/p成熟/a健壮/a的/ude1看门狗/gi技术/gi /x（/wwatch dog/nz）/w，/w看门狗/gi持续/vd的/ude1监控/gi节点/gi，/w一旦/d发现/v失效/vi就/d切换/vn到/v健康/a的/ude1复制/gi节点/gi。/w(/nz2/nz)/nz /x对于/p你/rr的/ude1应用程序/nz而言/uls切换/vn过程/gi应/v尽可能/d透明/a；/w最/d理想/n的/ude1情况/n是/vshi无需/v更改/gi任何/rz配置/gi。/w更/d高级/a的/ude1解决方案/gi是/vshi仅仅/d修改/gidns/nz中/f存储/gi节点/gi的/ude1ip/gi地址/gi，/w确保/v修复过程/l在/p几/d秒钟/qt之内/f完成/v。/w(/nz3/nz)/nz /x自动/d切换/vn应当/v基于/pquorum/nz并且/c是/vshi完全一致/i（/wfully consistent/nz）/w或/c最终/d一致/a（/weventually consistent/nz）/w的/ude1。/w讨论/gi下面/f继续/v：/w二/nz、/w网络/gi分割/gi过程/gi中和/vi完成/v后/f的/ude1一致性/gi网络/gi分割/gi（/wnetwork split/nz）/w在/p云中/ns频繁/a发生/v，/w对/p地球上/nz的/ude1分布式存储/gi系统/gi而言/uls也/d是/vshi最/d复杂/a的/ude1问题/gi。/w一旦/d发生/v分割/gi，/w应用程序/nz可能/v只/d会/v找到/v内存数据库/gi的/ude1部分/n节点/gi；/w同时/c，/w每个/rnosql/gi内存数据库/gi节点/gi也/d可能/v只能/v找到/v其他/rzv部分/nnosql数据库/gi节点/gi。/w为什么/ryv说/v这/rzv是/vshi一个/mq非常/d严重/a的/ude1问题/gi呢/y？/w如果/c你/rr的/ude1数据库/gi包含/v一/nz些/q隐蔽/a的/ude1设计/gi缺陷/gi，/w当/p网络/gi分割/gi发生/v时/qt，/w应用程序/nz很可能会/nz把/pba数据/gi写入/gi错误/gi的/ude1节点/gi。/w这/rzv意味着/v，/w当/p网络/gi分割/gi的/ude1情况/n恢复/gi时/qt，/w应用程序/nz之前/f的/ude1写/v请求/gi操作/gi的/ude1数据/gi就/d会/v丢失/v。/w这/rzv对/pnosql/gi内存数据库/gi来说/uls这/rzv是/vshi一个/mq非常/d重要/a的/ude1话题/n，/w因为/cnosql/gi内存数据库/gi每秒/d的/ude1写/v操作/gi数量/n远大于/nz其他/rzvnosql/gi数据库系统/gi。/w一个/mq设计/gi得当/a的/ude1nosql/gi内存数据库/gi是/vshi什么/ry样子/n的/ude1呢/y？/w很/d不幸/a，/w你/rr只能/v从/p下面/f两/nz个/q非常/d糟糕/a的/ude1候选/b中/f进行/vn选择/gi：/w(/nz1/nz)/nz /x如果/cnosql/gi内存数据库/gi是/vshi完全一致/i的/ude1，/w在/p某些/rz情况下/nz你/rr是/vshi不/d允许/v写入/gi任何/rz内容/gi的/ude1，/w除非/c网络/gi分割/gi恢复/gi。/w(/nz2/nz)/nz /x如果/cnosql/gi内存数据库/gi是/vshi最终/d一致/a的/ude1，/w应用程序/nz可以/v对/p“/w读”/nz请求/gi采用/vquorum/nz方法/gi―/w―/w返回/v一个/mq或者/c阻塞/vn。/w注意/v：/w到/v目前为止/i，/w业界/n并不/d存在/v最终/d一致/a的/ude1nosql/gi内存数据库/gi产品/gi，/w所以/c只有/c选项/gi1/nz是/vshi可以/v实际/n应用/gi的/ude1方案/gi。/w三/nz、/w数据/gi的/ude1耐久性/nz（/wdurability/nz）/w尽管/cnosql/gi内存数据库/gi解决方案/gi提供/v了/ule多/a种/q复制/gi选择/gi，/w你/rr还是/c需要/v着重/vd考虑/v数据/gi的/ude1持久化/nz和/cc备份/gi，/w原因/n如下/vi：/w(/nz1/nz)/nz /x或许/d你/rr不想/v为/p内存/gi复制/gi支付/gi额外/b的/ude1费用/n，/w但是/c仍/d希望/v将/d数据/gi集/q保存/gi在/p某个/rz地方/n，/w以便/d在/p遇到/v节点/gi故障/gi时/qt能够/v将/d数据恢复/gi（/w即使/c恢复/gi速度/n很慢/d）/w。/w(/nz2/nz)/nz /x你/rr肯定/v希望/v在/p遇到/v任何/rz故障/gi时/qt（/w比如/v节点/gi故障/gi、/w多/a节点/gi故障/gi、/w数据中心/gi故障/gi等/udeng）/w都/d能/v将/d数据恢复/gi并且/c希望/v保留/v另外/c一个/mq选择/gi―/w―/w将/d数据保存/gi在/p另外/c一个/mq安全/gi的/ude1地方/n，/w即使/c数据/gi不能/v与/cc最新/a的/ude1修改/gi同步/gi。/w(/nz3/nz)/nz /x还有/v其他/rzv一些/m采用/v数据/gi持久化/nz的/ude1理由/n，/w比如/v导入/gi产品/gi数据/gi集/q到/v阶段/gi环境/n，/w以/p便于/v测试/gi。/w现在/t你/rr已经/d确信/v数据/gi持久化/nz是/vshi必要/a的/ude1，/w在/p大多/d数云/nz环境/n中/f你/rr应当/v使用/gi附属/vn在/p云/gi主/ag机上/s的/ude1存储设备/nz（/w像/vaws/nz的/ude1ebs/nz、/wazure/gi的/ude1cloud derive/nz等/udeng）/w。/w如果/c你/rr将/d数据保存/gi在/p本地/gi硬盘/gi，/w当/p遇到/v节点/gi故障/gi时/qt你/rr就/d会/v丢失/v数据/gi。/w一旦/d数据/gi得到/v持久化/nz保存/gi，/w你/rr最大/gm的/ude1挑战/gi将/d变成/v：/w在/p更新/gi数据/gi持久化/nz存储/gi的/ude1同时/c保证/vnosql/gi内存数据库/gi的/ude1速度/n。/w四/nz、/w稳定/an的/ude1性能/ginosql/gi内存数据库/gi（/w例如/vredis/gi或/cmemcached/gi）/w的/ude1设计/gi目标/gi是/vshi：/w在/p毫秒/q延迟/v内/f，/w每秒钟/nz能够/v处理/vn超过/v10/nz万/nz个/q请求/gi。/w但是/c，/w这个/rz数字/gi在/p云/gi环境/n下/f是/vshi很难/d达到/v的/ude1，/w除非/c你/rr遵循/gi以下/f原则/gi：/w1/nz、/w确保/v你/rr的/ude1解决方案/gi使用/gi的/ude1是/vshi功能强大/i的/ude1云主机/gi（/wcloud instance/nz）/w，/w比如/vaws/nz的/ude1 m/nz2.2/nzxlarge/nz//nzm/nz2.4/nzxlarge/nz云主机/gi或者/c是/vshiazure/gi的/ude1a/nz6/nz//nza/nz7/nz云主机/gi，/w而且/c还有/v一个/mq专用/gi环境/n。/w另外/c，/w可以/v实现/gi一种/nz预防/v跨/v不同/a云/gi账户/n的/ude1“/w吵闹/vi的/ude1邻居/n”/w现象/n的/ude1机制/gi。/w此/rzs机制/gi应该/v能/v监控/gi你/rr的/ude1数据集/nz的/ude1性能/gi，/w可/v实时/n监控/gi、/w按/p命令/gi监控/gi、/w基于/p一定/b的/ude1规则/gi去/vf监控/gi、/w或/c根据/p一套/nz机制/gi去/vf监控/gi，/w比如/v当/p发现/v延迟/v超过/v阈/nz就/d自动/d迁移/gi数据/gi集/q到/v另一个/nz节点/gi。/w2/nz、/w避免/v存储/gi的/ude1i/nz//nzo/nz瓶颈/gi，/w确保/v解决方案/gi使用/gi了/ule功能强大/i的/ude1存储设备/nz，/w最好/d是/vshi配置/gi了/uleraid/gi。/w其次/c，/w要/v确保/v在/p“/w请求/gi数/n突然/ad暴增/nz”/w的/ude1情况下/nz也/d不会/v阻塞/vn你/rr的/ude1应用/gi。/w例如/v，/w使用/gi开源/giredis/gi方案/gi，/w你/rr可以/v配置/gislave/nz节点/gi执行/v持久化/nz存储/gi操作/gi；/wmaster/gi节点/gi专注/vi于/p处理/vn用户/gi请求/gi，/w在/p“/w请求/gi数/n突然/ad暴增/nz”/w的/ude1情况下/nz避免/v超时/v现象/n。/w3/nz、/w测试云/nz厂商/gi提供/v的/ude1各种/rz关于/p存储/gii/nz//nzo/nz优化/gi的/ude1建议/gi，/w例如/vaws/nz的/ude1piops/nz。/w大多/d数/n情况下/nz，/w这些/rz建议/gi对/p随机/b访问/gi（/w读/v或/c写/v）/w来说/uls很/d有/vyou用/p；/w但是/c，/w对于/pnosql/gi内存数据库/gi经常/d采用/v的/ude1像/v顺序/gi写/v之类/rz的/ude1情况/n来说/uls就/d没什么/vl优化价/nz。/w4/nz、/w /x如果/c内存数据库/gi基于/p单线/n程架构/nz（/w例如/vredis/gi）/w，/w要/v确保/v不要/d在/p同一个/b线程/gi中/f运行/gi多/a个/q数据库/gi。/w不然/c，/w某个/rz数据库/gi在/p执行命令/n的/ude1过程/gi中/f很/d有可能会/nz阻塞/vn另外/c一个/mq数据库。五/nz、/w网速/nz大多/d数云/nz主机/gi都/d配置/gi了/ule一块/s千兆/q（/w1/nzgbps/nz）/w网卡/gi。/w在/pnosql/gi内存数据库/gi上下/f文中/s，/w此/rzs千兆网/nz卡/n需要/v处理/vn：/w1/nz、/w应用程序/nz的/ude1请求/gi2/nz、/w集群/gi内部/f的/ude1通信/gi3/nz、/w复制/gi4/nz、/w存储/gi访问/gi这/rzv很容易/nz造成/v运行/gi瓶颈/gi。/w因此/c，/w下面/f提供/v一/nz些/q建议/gi可/v解决/v此/rzs问题/gi：/w(/nz1/nz)/nz /x为/p每/rz一/nz台/q云主机/gi配置/gi万/nz兆/vg网卡/gi（/w10/nzgbps/nz，/w但是/c要/v有/vyou心理准备/n，/w它/rr非常/d昂贵/a）/w(/nz2/nz)/nz /x选择/gi能够/v为/p一/nz些/q特殊/a应用/gi在/pvpc/nz内部/f配置/gi多/a块/q千兆/q网卡/gi的/ude1云服务商/gi，/w例如/vaws/nz(/nz3/nz)/nz /x采用/v能够/v在/pnosql/gi内存数据库/gi节点/gi之间/f高效/b分配资源/n的/ude1解决方案/gi以便/d让/v网络/gi阻塞/vn最小六/nz、/w可扩展性/gi（/wscalability/nz）/w对于/p简单/a的/ude1键/n（/wkey /nz//nz value/nz）/w缓存/gi解决方案/gi（/w例如/vmemcached/gi或者/credis/gi的/ude1简单/a应用/gi）/w，/w其/rz扩展/gi不会/v被/pbei认为/v是/vshi严重/a问题/gi；/w因为/c在/p大/a多数/a情况下/nz，/w它/rr只需/v在/p服务器/gi列表/vi中/f增加/v或/c删除/gi节点/gi并/cc修改/gi哈希函数/nz。/w但是/c，/w对于/p实际/n遭遇/v过/uguo此/rzs问题/gi的/ude1人/n就/d会/v意识到/v它/rr仍然/d是/vshi一个/mq令人/v痛苦/an的/ude1问题/gi。/w对于/p此/rzs问题/gi我们/rr有/vyou一/nz些/q建议/gi：/w1/nz、/w采用/v一致性/gi哈希/nrf（/whashing/nz）/w。/w用/p简单/a的/ude1哈希函数/nz（/w例如/v求模/nz）/w做/v扩展/gi时/qt，/w意味着/v遇到/v扩展/gi事件/gi会/v丢失/v所有/b的/ude1键/n数据/gi。/w另一方面/c，/w很/d多/a人/n不/d知道/v的/ude1是/vshi：/w即使/c采用/v一致性/gi哈希函数/nz，/w在/p扩展/gi的/ude1时候/n你/rr仍然/d会/v丢失/v部分/n数据/gi。/w例如/v，/w在/p扩展/gi的/ude1时候/n你/rr会/v丢失/v1/nz//nzn/nz的/ude1键/n数据/gi，/wn/nz是/vshi你/rr扩展/gi后/f的/ude1节点/gi数目/gi。/w所以/c，/w如果/cn/nz比较/gi小/a，/w它/rr就是/v一个/mq很/d痛苦/an的/ude1过程/gi（/w比如/v对/p2/nz个/q节点/gi的/ude1集群/gi采用/v一致性/gi哈希函数/nz进行/vn扩展/gi，/w就/d意味着/v会/v丢失/v1/nz//nz3/nz的/ude1数据/gi）/w。/w2/nz、/w建立/gi一种/nz机制/gi，/w用/p扩展/gi事件/gi同步/gi所有/b的/ude1nosql/gi内存数据库/gi的/ude1客户端/gi，/w以/p预防/v这样/rzv的/ude1事件/gi发生/v―/w―/w在/p扩展/gi过程/gi中/f不同/a的/ude1应用服务器/gi写入/gi到/v不同/a的/ude1节点/gi。/w当/p进行/vn某些/rz复杂/a操作/gi时/qt，/w例如/vredis/gi的/ude1union/nz和/ccintersect/nz操作/gi，/w扩展/gi就/d会/v成为/v非常/d实际/n的/ude1问题/gi。/w这些/rz命令/gi等同于/visql/gi中的/vjoin/nz命令/gi，/w在/p多线程/gi架构/gi下/f，/w如果/c不/d增加/v一定/b的/ude1延迟/v和/cc复杂性/gi，/w这些/rz操作/gi就/d不能/v实现/gi。/w应用程序/nz级/q的/ude1分片/gi（/wsharding/nz）/w能够/v解决/v一定/b的/ude1问题/gi，/w因为/c它/rr允许/v在/p分片/gi级/q运行/gi一/nz些/q复杂/a命令/gi。/w但是/c，/w这/rzv需要/v很复杂/nz的/ude1设计/gi，/w并且/c与/ccnosql/gi内存数据库/gi的/ude1配置/gi有/vyou一定/b的/ude1关联/vn。/w比如/v，/w分片/gi的/ude1应用/gi必须/d注意/v节点/gi上/f存储/gi的/ude1每一个/nz主键/nz；/w扩展/gi事件/gi（/w如/v重/a分片/gi）/w需要/v修改/gi大量/m代码/gi和/cc额外/b的/ude1执行/v开销/n。/w另外/c，/w一/nz些/q人/n声称/v，/w新一代/nz的/ude1超高速/nzram/nz，/w比如/v亚马逊/nrfaws/nz的/ude1high memory cluster eight extra large /nz244/nzgb/nz内存/gi（/wcr/nz1.8/nzxlarge/nz）/w，/w能够/v解决/v节点/gi扩展/gi中/f遇到/v的/ude1大/a多数/a问题/gi。/w但/c现实/n是/vshi有所/v不同/a的/ude1，/w对于/p25/nzgb/nz-/nz30/nzgb/nz数据/gi集/q规模/gi，/w对于/p像/vredis/gi之类/rz的/ude1内存数据库/gi，/w还有/v一/nz些/q其他/rzv的/ude1操作/gi问题/gi会/v阻止/v扩展/gi的/ude1执行/v。/w这些/rz问题/gi与/cc本文/r前面/f提到/v的/ude1挑战/gi密切相关/v，/w像/v复制/gi、/w存储/gii/nz//nzo/nz、/w单核/n的/ude1单线/n程架构/nz限制/vn、/w网络带宽/gi开销/n等/udeng。/w七/nz、/w巨大/a的/ude1运维/gi开销/nnosql/gi内存数据库/gi在/p处理/vn所有/b的/ude1操作/gi方面/n会/v产生/v巨大/a的/ude1额外/b开销/n。/w你/rr需要/v对/p这些/rz技术/gi进行/vn深入/ad了解/v，/w以便/d在/p紧要关头/n能/v做出/v正确/a的/ude1决策/gi。/w同时/c，/w因为/c这些/rz技术/gi更新/gi频率/n很快/d（/w可能/v是/vshi非常/d快/a）/w，/w你/rr还要/d时刻/n关注/v这些/rz系统/gi的/ude1趋势/gi和/cc最新/a变化/gi。/w八/nz、/w结论/gi正如/v我们/rr上面/f所说/c的/ude1一样/uyy，/w为了/p更好/d的/ude1利用/vredis/gi、/wmemcached/gi等/udeng开源技术/gi带给/v我们/rr的/ude1优势/gi，/w我们/rr需要/v对/p这些/rz技术/gi进行/vn深入/ad了解/v和/cc掌握/v。/w对于/p企业/giit/gi团队/gi来说/uls，/w为了/p能够/v在/p企业/gi环境/n中/f使用/ginosql/gi内存数据库/gi，/w了解/v如何/ryv更好/d的/ude1应对/v这些/rz挑战/gi就/d显得/v尤为/d重要/a。/w不是/c我/rr持有偏见/i，/w我/rr强烈建议/nz寻找/v一/nz些/q能够/v攻克/v可扩展性/gi和/cc高可用性/n限制/vn而/cc不/d损害/v功能/gi和/cc性能/gi的/ude1商业/n解决方案/gi；/w因为/c执行/v这些/rz内部/f操作/gi需要/v该/rz领域/gi的/ude1高级/a专家/gi，/w而/cc这/rzv是/vshi非常/d稀少/a的/ude1。/w在/p市场/gi上有/v一/nz些/q关于/predis/gi和/ccmemcached/gi的/ude1nosql/gi服务/gi（/wnosql/gi-/nzas/nz-/nza/nz-/nzservice/gi)/nz；/w我/rr建议/gi你/rr对/p每一个/nz可用/v的/ude1服务/gi进行/vn深入/ad的/ude1比对/d（/w就/d像/vdiy/nz）/w，/w以便/d挑选/v一个/mq最佳/z的/ude1解决方案/gi。/w能够/v实际/n体验/v一下/m这些/rz服务/gi就/d更好/d了/ule，/w很/d多/a服务商/nnd为/p这个/rz目的/gi都/d提供/v了/ule免费/vd体验/v。/w