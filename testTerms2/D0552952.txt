#【/w机房重构/gi】/wSQL语句/gi已/d终止/v
   /x在下/r机/ng将/d消费/vn时间/gi写入/gi数据库/gi时/qt，/w出现/v了/ule一个/mq没有/v遇到/v过/uguo的/ude1错误/gi，/w用/p了/ule将近/d一/nz下午/t的/ude1时间/gi才/d改正过来/i，/w其实/d出错/gi的/ude1原因/n也/d很/d简单/a。/w                      /x“/w语句/gi已/d终止/v”/w，/w首先/d想到/v的/ude1是/vshi自己/rr没有/v那个/rz能力/gi将/d更新/gi语句/gi写成/v终止/v语句/gi吧/y！/w思维/gi往/p这个/rz方向/gi偏/d，/w就/d忽略/v了/ule本身/rz导致/gi问题/gi的/ude1原因/n。/w思维/gi越来越/d偏/d，/w甚至/d怀疑/v是/vshi自己/rr写/v的/ude1sql语句/gi导致/gi数据库/gi死循环/nz了/ule，/w真是/d脑洞/nz大/a开/v。。。/wsql语句/gi如下/vi：/w   /x其实/d仔细/ad看一看/v就/d能/v看到/v错误信息/nz：/w将/d截断/v字符串/gi或/c二进制/gi数据/gi。/w“/w将/d截断/v字符串/gi或/c二进制/gi数据/gi。/w”/w说明/v添加/gi到/v数据库/gi的/ude1信息/gi，/w有的/rz字段/gi已经/d超出/v了/ule数据库/gi里/f的/ude1长度/gi被/pbei截断/v，/w或者/c是/vshi其中/rz的/ude1类型/gi出现/v了/ule不/d匹配/gi！/w其实/d怎样/ryv准确/a的/ude1找到/v调试/gi过程/gi中/f具体/a的/ude1错误/gi，/w以前/f的/ude1博客/gi里面/f已经/d有/vyou了/ule叙述/v：/w《/w》/w，/w这里/rzs就/d不再/d多/a加/v叙述/v。/w   /x这次/r字段/gi超出范围/n的/ude1是/vshi消费/vn时间/gi，/w之前/f设置/gi的/ude1是/vshivarchar/nz(/nz10/nz)/nz类型/gi，/w长度/gi太小/d，/w消费/vn时间/gi计算/gi出/vf的/ude1数/n过/uguo大/a，/w导致/gi了/ule字符串/gi被/pbei截断/v。/w当然/d，/w出现/v问题/gi说明/vvarchar/nz类型/gi没有/v自动/d修剪/vn数据/gi的/ude1功能/gi，/w便/d将/d这个/rz字段/gi设置成/n了/uledecimal/nz类型/gi。/wdecimal/nz可以/v根据/p设计/gi数据库/gi时/qt设置/gi的/ude1长度/gi自动/d修剪/vn数据/gi，/w使/v数据保存/gi时/qt适应/v类型/gi本身/rz的/ude1长度/gi，/w避免/v了/ule数据/gi过长/n被/pbei截断/v的/ude1错误/gi。/w   /x虽然/c知道/v怎么/ryv改/v了/ule，/w但是/c具体/a是/vshi怎么/ryv回事儿/n，/w却/d没有/v查到/v，/w还是/c需要/v大神/nz指教/v的/ude1。/w