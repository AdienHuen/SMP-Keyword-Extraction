#机房/gi合作/vn―/w―/w职责链/gi+/nz策略模式/gi
这/rzv两/nz个/q模式/gi在/p进行/vn个人/n重构/gi的/ude1时候/n也/d使用/gi了/ule，/w当时/t是/vshi懵懵懂懂/nz的/ude1，/w现在/t合作/vn中/f又/d使用/gi了/ule一/nz遍/qv，/w思路/gi清晰/a了/ule很/d多/a，/w感觉/gi这些/rz设计模式/nz之间/f有/vyou千丝万缕/bl的/ude1联系/gi，/w功夫/n还/d不/d到家/a还/d得/ude3慢慢/d的/ude1理一理/nz，/w记得/v有/vyou个/q师哥/n说/v过/uguo“/w到/v最后/f会/v发现/v设计模式/nz其实/d就/d一个”/nz，/w所以/c努力/gi吧/y！/w先/d看看/v这/rzv两/nz个/q模式/gi的/ude1应用/gi。/w职责链/gi：/w确定/v消费/vn时间/gi策略/gi：/w计算/gi不同/a类型/gi卡/n的/ude1消费/vn金额/n职责链模式/gi的/ude1好处/gi比较/gi直接/ad的/ude1就是/v可以/v避免/v使用/gi复杂/a的/ude1if/nz语句/gi，/w解耦/gi了/ule请求者/n和/cc处理/vn者/k，/w而且/c可以/v灵活/a的/ude1增加/v处理/vn者/k，/w不会/v违背/v开放/gi封闭/gi原则/gi。/w职责链模式/gi的/ude1使用/gi，/w是/vshi通过/p其中/rz的/ude1onlinecount/nz来/vf进行/vn的/ude1，/w然后/c由/p调用/gi其中/rz的/ude1counttime/nz(/nz)/nz方法/gi即可/v。/w通过/p时序/n图/gi来/vf整理/gi一/nz下/f逻辑/n策略模式/gi策略模式/gi是/vshi包含/v了/ule不同/a的/ude1计算/gi方法/gi适用/vi于/p不同/a的/ude1情况/n，/w使用者/n可以/v不/d关心/v具体/a调用/gi那个/rz算法/gi，/w可以/v通过/p其中/rz的/ude1countcontext/nz来/vf确定/v。/w可以/v灵活/a的/ude1增加/v计算/gi方法/gi。/w策略模式/gi的/ude1使用/gi是/vshi通过/pcountcontext/nz来/vf进行/vn的/ude1，/w通过/pcountcontext/nz(/nz)/nz方法/gi来/vf确定/v实例化/gi那个/rz子类/gm，/w然后/c在/pcountallcash/nz中/f调用/gi实例化/gi的/ude1子类/gm的/ude1方法/gi。/w总结/gi   /x用/p完/vi这/rzv两/nz个/q模式/gi有/vyou一种/nz感觉/gi，/w模式/gi就是/v把/pba我们/rr本来/d写/v在/p一个/mq类/gi中的/v方法/gi分别/d的/ude1写到/v子类/gm中/f，/w在/p使用/gi的/ude1时候/n根据/p不同/a的/ude1情况/n来/vf实例/gi化子/n类/gi然后/c调用/gi其中/rz的/ude1方法/gi。/w使得/vi客户端/gi调用/gi时/qt不用/d知道/vb/nz层/gi的/ude1方法/gi具体/a是/vshi干什么/vi的/ude1，/w避免/v了/ule在/p使用/gi时/qt使用/gi过多/d的/ude1if/nz语句/gi进行/vn判断/gi，/w一定/b程度/n上/f实现/gi了/uleu/nz层/gi和/ccb/nz层/gi解耦/gi。/w   /x面向对象/gi的/ude1认识/v知识/gi开/v了/ule个头/n，/w欢迎/v大家/rr多多指教/nz！/w