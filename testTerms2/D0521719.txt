#快排/nz的/ude1最坏/gi情况/n
快排/nz的/ude1最坏/gi情况/n可能/v我们/rr每个/r人/n都会/n思考/gi这个/rz问题/gi    /x快/a排/v的/ude1最坏/gi情况/n是/vshi在/p什么/ry时候/n发生/v呢/y？/w？/w  /x我们/rr应该/v怎么/ryv避免/v其/rz不会/v发生/v呢/y？/w   /x下面/f一一/d为/p你/rr解答/v  /x快/a排/v的/ude1运行时间/gi依赖于/v划分/v是否/v平衡/a，/w而/cc平衡/a与否/u又/d依赖于/v用户/gi划分/v的/ude1主元素/gi。/w    /x如果/c划分/v是/vshi平衡/a的/ude1，/w那么/c快速排序/gi算法/gi性能/gi与/cc归并排序/gi一样/uyy。/w  /x如果/c划分/v时/qt不/d平衡/a的/ude1，/w那么/c快速排序/gi的/ude1性能/gi就/d接近/v于/p插入排序/gi了/ule  /x因此/c，/w快排/nz的/ude1最坏/gi情况/n的/ude1发生/v与/cc快速排序/gi中/f主元素/gi的/ude1选择/gi是/vshi有/vyou重大/a的/ude1关系/gi；/w当/p主元素/gi是/vshi如下/vi三种/nz情况/n是/vshi，/w会/v使/v快排/nz性能/gi最差/a    /x在/p分解/gi时/qt每次/r选取/gi的/ude1主元素/gi为/p最小元素/gi  /x在/p分解/gi时/qt每次/r选取/gi的/ude1主元素/gi为/p最大/gm元素/gi  /x这/rzv就/d导致/gi了/ule快排/nz的/ude1递归/gi表达式/gi如下/vi：/w这样/rzv有/vyou主/ag方法/gi可得/v：/w*/nz*/nz此种/r情况/n的/ude1时间复杂度/gi为/p：/wo/nz(/nzn/nz^/nz2/nz)/nz;/nz现在/t关于/p快速排序/gi，/w我们/rr用来/v避免/v最差/a情况/n发生/v的/ude1方法/gi如下/vi：/w    /x主元素/gi的/ude1选取/gi随机化/gb：/w这样/rzv就/d会/v导致/gi每次/r分解/gi一直/d找到/v的/ude1是/vshi最小元素/gi和/cc最大/gm元素/gi作为/p主元素/gi /x的/ude1概率/gi很小/a，/w但/c还是/c可能/v发生/v  /x现在/t，/w能够/v避免/v其/rz不会/v发生/v的/ude1方法/gi如下/vi：/w    /x求/v序列/gi的/ude1中值/n，/w然后/c选取/gi序列/gi的/ude1中值/n作为/p主元素/gi  /x上面/f这种/r方法/gi求/v中值/n和/cc找到/v中值/n的/ude1位置/gi的/ude1时间复杂度/gi为/po/nz(/nzn/nz)/nz；/w  /x-可能/nz有人/r会/v问/v呢/y？/w我们/rr求/v的/ude1得/ude3中值/n在/p序列/gi中/f没有/v怎么办/ryv？/w答案/gi是/vshi：/w找到/v离/v中值/n最近/t的/ude1那个/rz数/n即可/v废话/n了/ule这么/rz多/a，/w希望/v对/p正在/d学习/gi的/ude1你/rr有所/v帮助/v