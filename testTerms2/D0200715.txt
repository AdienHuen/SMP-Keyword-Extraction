#白话/gi浅析/giDDD/nz
序言/n：/wit/gi的/ude1世界/gi，/w各种/rz名词/n、/w缩写/n、/w概念/gi，/w炫/vg酷/ag而/cc又/d玄奥莫测/nz，/w偏偏/d还/d多/a如/v繁星/n。/w要/v弄/v明白/v这些/rz东西/n需要/v勇气/n，/w我们/rr只能/v一个一个/nz来/vf。/w本文/r以/p简单/a直白/a的/ude1语言/gi描述/giddd/nz（/w领域驱动设计/gi）/w的/ude1基本概念/nz，/w不求/v博大精深/vl，/w但/c求/v通俗易懂/nz。/w一/nz、/wddd/nz是/vshi干嘛/nz的/ude1，/w解决/v什么/ry问题/gi？/w传统/n的/ude1软件开发/nz过程/gi，/w从/p需求/gi、/w分析/gi、/w设计/gi到/v编码/gi，/w经历/gi了/ule多/a个/q过程/gi，/w产生/v各种/rz工件/n，/w最终/d实现/gi可以/v运行/gi的/ude1软件系统/gi。/wddd/nz人/n认为/v，/w传统开发/gi过程/gi存在的问题/gi主要/b包括/v：/w1/nz，/w输入输出/gi一环/nz套/q一环/nz，/w任何/rz一个/mq环节/gi出错/gi，/w则/d基于/p此/rzs环节/gi的/ude1后续/vn环节/gi会/v延续/v错误/gi，/w难以/d发现/v、/w难以/d修正/v；/w2/nz，/w各个环节/l的/ude1参与/gi人员/gi技术/gi背景/n各不相同/l，/w缺乏/v通用/gi的/ude1语言/gi描述/gi软件系统/gi，/w导致/gi沟通/gi过程/gi中/f信息/gi失真/vi；/w3/nz，/w软件产品/gi研发/gi的/ude1目的/gi是/vshi最终/d良好/a运行/gi的/ude1代码/gi，/w而/cc过程/gi中/f却/d投入/v了/ule太多/ad的/ude1成本/n产生/v各个环节/l的/ude1输出/gi工件/n；/w那么/cddd/nz是/vshi如何/ryv解决/v这些/rz问题/gi的/ude1？/wddd/nz的/ude1基本/a过程/gi是/vshi：/w领域专家/n和/cc开发人员/n以/p领域/gi通用/gi语言/gi作为/p沟通交流/n的/ude1基础/gi，/w共同完成/l领域/gi模型/gi的/ude1建立/gi，/w领域/gi模型/gi承载/v业务/gi的/ude1同时/c，/w也/d基本/a完成/v了/ule对应/vi的/ude1设计/gi；/w最后/f将/d领域/gi模型/gi基于/p架构/gi映射/gi为/p实现代码/gi，/w就/d完成/v了/ule开发/gi。/w按照/p如此/rzv过程/gi，/w整个/bddd/nz的/ude1开发/gi过程/gi很好/ad的/ude1解决/v了/ule传统开发/gi过程/gi中的/v问题/gi。/w二/nz、/wddd/nz经典/gi分层/v架构/gi  /x领域驱动设计/gi的/ude1经典/gi分层/v架构/gi如上图/i，/w基本/a的/ude1分层/v架构/gi，/w核心/n是/vshidomain/nz层。三/nz、/wdomain/nz层/gi包含/v些/q什么/ry？/w在/pddd/nz的/ude1基本/a架构/gi模型/gi中/f，/wdomain/nz层/gi封装/gi所有/b业务/gi及/cc数据/gi，/w具体/adomain/nz层/gi中/f包含/v哪些/ry模型/gi，/w各自/rr的/ude1作用/gi，/w了解/v了/ule这些/rz也/d就/d基本/a明白/v了/uleddd/nz是/vshi如何/ryv实现/gi业务/gi。/w具体/adomain/nz层/gi涉及/v如下/vi概念/gi：/w1/nz，/w实体/n：/w业务/gi领域/gi中/f需要/v被/pbei唯一/b标识/n的/ude1实体/n对象/gi；/w实体/n封装/gi了/ule所有/b该/rz业务/gi实体/n的/ude1所有/b属性/gi和/cc行为/n；/w2/nz，/w对象/gi：/w业务/gi领域/gi中/f不/d需要/v被/pbei唯一/b标识/n的/ude1实体/n对象/gi；/w通常/d是/vshi实体模型/gi中/f抽象/gi分离出来/i的/ude1一/nz部分/n属性/gi，/w比如/v：/w地址/gi、/w规/ng型号/n信息/gi等/udeng；/w对象/gi通常/d具备/v属性/gi但/c没有/v行为/n，/w依附/v于/p实体/n存在/v，/w可能/v影响/gi实体/n的/ude1具体/a行为/n；/w3/nz，/w聚合/gi（/w根/n、/w一致性/gi）/w：/w在/p实际/n业务/gi中/f，/w一/nz组/n实体/n和/cc对象/gi是/vshi高/a内聚/nz的/ude1，/w属性/gi在/p业务/gi维度/gi上/f也/d需要/v保持/v一致性/gi；/w它们/rr组合/gi在/p一起/s，/w被/pbei当做/v一个/mq整体/n对外/vn提供/v服务/gi，/w这个/rz整体/n就是/v聚合/gi；/wddd/nz中/f，/w不以/c实体/n对外/vn暴露/v行为/n，/w对外/vn提供/v服务/gi的/ude1是/vshi聚合/gi；/w4/nz，/w根/n：/w通常/d聚合/gi是/vshi由/p1/nz个/q或者/c2/nz到/v3/nz个/q实体/n加上/v几个/nz对象/gi组合/gi起来/vf的/ude1，/w根/n是/vshi其中/rz的/ude1一个/mq实体/n，/w负责/v对外/vn提供/v接口/gi和/cc对/p内/f维护/gi业务/gi规则/gi；/w5/nz，/w工厂/gi：/w由于/p聚合/gi的/ude1存在/v，/w领域/gi对象/gi会/v比较复杂/l，/w通过/p工厂/gi来/vf隐藏/v聚合/gi的/ude1创建/gi细节/gi，/w使/v调用/gi方/q能够/v很容易/nz使用/gi聚合/gi就是/v很/d顺理成章/vl的/ude1事情/n了/ule；/w6/nz，/w仓储/vn：/w仓储/vn和/cc工厂/gi一样/uyy，/w都/d是/vshi针对/gi聚合/gi的/ude1，/w聚合/gi不/d只是/d对外/vn提供/v接口/gi的/ude1边界/n，/w也/d是/vshi持久化/nz的/ude1一个/mq边界/n，/w仓储/vn负责管理/n聚合/gi状态/gi的/ude1持久化/nz和/cc聚合/gi对象/gi的/ude1重建/v；/w7/nz，/w领域/gi服务/gi：/w领域/gi服务/gi主要/b用来/v封装/gi不能/v由/p单独/d的/ude1聚合/gi完成/v的/ude1业务/gi功能/gi，/w通常/d是/vshi在/p一个/mq业务/gi场景/gi中/f协调/gi跨/v聚合/gi的/ude1操作/gi；四/nz、/w反思/vn，/w存在的问题/gi：/w1/nz，/w重中之重/n：/w领域/gi通用/gi语言/gi；/w关于/p领域/gi通用/gi语言/gi，/w个人/n觉得/v是/vshiddd/nz实践/gi的/ude1基础/gi，/w没有/v领域/gi通用/gi语言/gi，/w就/d不能/v解决/v沟通/gi的/ude1问题/gi，/w领域专家/n和/cc设计/gi人员/gi就/d无法/v共同完成/l设计/gi；/w实际/n中/f大/a多数/a团队/gi都/d是/vshi依赖于/vuml/gi来/vf完成/v建模/gi，/w而/cc实际上/d这/rzv毕竟/d是/vshi个/q建模/gi的/ude1语言/gi，/w对/p业务/gi领域专家/n也/d是/vshi不小/a的/ude1门槛/n；/w2/nz，/w领域/gi模型/gi是/vshi充血/vi模型/gi；/w模块化/gi了/ule，/w但/c粒度/gi粗/a；/w /x业务/gi实体/n，/w在/p实际/n业务/gi中/f，/w通常/d参与/gi到/v多/a个/q业务/gi中/f去/vf；/w这/rzv意味着/v，/w具体/a的/ude1实体/n和/cc聚合/gi的/ude1行为/n定义/gi，/w受到/v多/a个/q业务/gi的/ude1影响/gi；/w而/cc这/rzv通常/d说明/v实体/n和/cc聚合/gi的/ude1职责/gi不/d单一/gi，/w维护/gi比较复杂/l；/w3/nz，/w团队/gi成员/nnt要求/n高/a（/w我们/rr把/pba整个/b聚合/gi看成/v是/vshi一个/mq整体/n概念/gi，/w要么/c一起/s被/pbei取出/v来/vf，/w要么/c一起/s被删除/gi。/w我们/rr永远/d不会/v单独/d对/p某个/rz聚合/gi内/f的/ude1子/ng对象/gi进行/vn单独/d查询/gi或/c做/v更新/gi操作/gi。/w）/w必须/d通盘/d理解/gi和/cc掌握业务/n，/w否则/c划分/v不出/v合适/a的/ude1高复/nz用/p的/ude1聚合/gi；/w实际/n使用/gi中/f，/w70%/nz的/ude1聚合/gi是/vshi单/b实体/n的/ude1，/w不是/c因为/c70%/nz的/ude1实体/n间/f没有/v关联/vn，/w而是/c因为/c要/v划分/v出/vf合适/a粒度/gi的/ude1聚合/gi太难/d。/w五/nz、/w总结/gi：/w ddd/nz是/vshi一种/nz比较/gi切实可行/vl的/ude1敏捷/gi方法论/n，/w在/p很/d多/a中大型/b的/ude1软件产品/gi中/f取得/v了/ule成功/a，/w但/c也/d对/p产品/gi研发/gi团队/gi提出/v了/ule更高/d的/ude1要求/n。/w如何/ryv使用/gi或/c借鉴/giddd/nz，/w需要/v软件/gi团队/gi根据/p自身/rr的/ude1情况/n慎重考虑/nz。/w