#算法/gi思想/gi篇/q（/w3/nz）/w―/w―/w―/w―/w递归/gi算法/gi
在/p计算机/gi编程/gi应用/gi中/f，/w递归/gi算法/gi对/p解决/v大/a多数/a问题/gi是/vshi十分/d有效/gi的/ude1，/w它/rr能够/v使/v算法/gi的/ude1描述/gi变得/vi简洁/gi而且/c易于/vd理解/gi。/w递归/gi算法/gi有/vyou如下/vi3/nz个/q特点/n。/w /x（/w1/nz）/w递归/gi过程/gi一般/ad通过/p函数/gi或/c子/ng过程/gi来/vf实现/gi。/w /x（/w2/nz）/w递归/gi算法/gi在/p函数/gi或/c子/ng过程/gi的/ude1内部/f，/w直接/ad或者/c间接地/n调用/gi自己/rr的/ude1算法/gi。/w /x（/w3/nz）/w递归/gi算法/gi实际上/d是/vshi把/pba问题/gi转化/gi为/p规模/gi缩小/v了/ule的/ude1同类/n问题/gi的/ude1子问题/gi，/w然后/c再/d递归/gi调用函数/n或/c过程/gi来/vf表示/v问题/gi的/ude1解/v。/w /x在/p使用/gi递归/gi算法/gi时/qt，/w读者/n应该/v注意/v如下/vi4/nz点/gi。/w /x（/w1/nz）/w递归/gi是/vshi在/p过程/gi或/c函数/gi中/f调用/gi自身/rr的/ude1过程/gi。/w /x（/w2/nz）/w在/p使用/gi递归/gi策略/gi时/qt，/w必须/d有一个/nz明确/a的/ude1递归/gi结束/v条件/n，/w这/rzv称为/v递归/gi出口/vn。/w /x（/w3/nz）/w递归/gi算法/gi通常/d显得/v很/d简洁/gi，/w但是/c运行/gi效率/gi较低/d，/w所以/c一般/ad不/d提倡/v用/p递归/gi算法/gi设计/gi程序/gi。/w /x（/w4/nz）/w在/p递归/gi调用/gi过程/gi中/f，/w系统/gi用/p栈/gi来/vf存储/gi每/rz一/nz层/gi的/ude1返回/v点/gi和/cc局部/n量/n。/w如果/c递归/gi次数/gi过多/d，/w则/d容易/ad造成/v栈溢/nz出/vf，/w所以/c一般/ad不/d提倡/v用/p递归/gi算法/gi设计/gi程序/gi。/w /x下面/f两/nz个/q例子/gi说明/v递归/gi算法/gi的/ude1思想/gi：/w /x（/w1/nz）/w汉诺塔/nrf问题/gi：/w /x代码/gi如下/vi：/w运行/gi结果/n：/w          /x（/w2/nz）/w阶乘/gm问题/gi：/w     /x代码/gi如下/vi：/w运行/gi结果/n：/w /x