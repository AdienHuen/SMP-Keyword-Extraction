#吐槽/nzScrum/nz，/w说说/vAgile/nz
让/v我/rr吐槽/nz先/d1./nz /x风云突起/nz现在/t的/ude1工作/gi最/d开始/v并/cc不是/cscrum/nz模式/gi，/w计划经济/n模式/gi，/w计划/gi到/v连/ulianbug/gi都/d要/v老板/gi分配/gi的/ude1状态/gi。/w突然/ad有一天/d公司/nis开始/v号召/v快速/d适应/v变化/gi。/w革/vg自己/rr的/ude1命/n，/w抢/v别人/rr的/ude1路/n，/w让/v别人/rr无处/d可/v走/v，/w成为/v变革/gi的/ude1主题/n。/w2015/nz号称/v是/vshi自我/rr革命/vn的/ude1一年/nz。/w说/v到/vagile/nz，/w自然/n最先/d想到/v的/ude1是/vshi就是/vscrum/nz。/w于是/cc下面/f就/d开始/v炸锅/nz了/ule，/w高喊/v着/uzhe口号/n向/pscrum/nz大跃进/n。/w从上到下/nz生生/n将/dscrum/nz搞成/v了/ule群众运动/n。/w各种/rzscrum/nz分享/gi，/w内部/f培训/gi，/w外部/f培训/gi，/w每/rz一个/mq有/vyou空地/n的/ude1角落/n都/d被/pbei白板/nz占据/v。/w会议室/n，/w角落/n，/w位置/gi都/d是/vshi站/vi会/v的/ude1阵地/n。/w按理说/vl都/d已经/d全员/n动员/v了/ule，/w应该/v情况/nscrum/nz越/d走/v越/d顺/v才/d对/p。/w但是/c1/nz年/qt下来/vf，/w乎/y没/d看到/v团队/gi真正/d的/ude1敏捷/gi起来/vf，/w会/v倒是/d越/d开/v越/d顺/v，/w每次/r会议/gi的/ude1内容/gi越来越/d发散/vn，/w时间/gi越来越/d长/a.../w /x.../w。/w2./nz /x邯郸/ns学步/nz大老板/nz搭台/v，/w小老板/nz指挥/v唱戏/vi。/w刚开始/nz有/vyou老板/gi连/ulianscrum/nz是/vshi什么/ry估计/gi还/d没/d弄/v明白/v，/w看着/v别人/rr每天/r站/vi会/v，/w也/d开始/v有样学样/nz，/w一个/mq4/nz、/w5/nz个人/n的/ude1团队/gi，/w就/d敢/v每天/r上午/t安排/v一个/mq小时/n的/ude1scrum meeting/nz（/w花点/n时间/gigoogle/nz一下/magile/nz//nzscrum/nz真的/d很难/d！/w你/rr懂/v的/ude1）/w./nz /x每天/r把/pba状态/gi过/uguo一/nz遍/qv，/w状态/gi包括/v但/c不限/v于/p做/v了/ule什么/ry，/w结果/n是/vshi什么/ry，/w怎么做/nz的/ude1，/w怎么/ryv想/v的/ude1，/w打算/gi怎么做/nz.../w /x.../w./nz。/w玛/nz超过/v一个/mq小时/n是/vshi常有/d的/ude1事/n。/w最/d奇葩/n的/ude1是/vshi有人/rbbb/nz一个/mq上午/t，/w跟/p你/rr分享/gi他/rr一个/mq问题/gi是/vshi怎么/ryv分析/gi，/w怎么/ryv解决/v，/w怎么/ryv验证/v，/w怕/v不/d明白/v还/d拉/v着/uzhe大家/rr每一步/d的/ude1demo/gi。/w一个/mq上午/t过去/vf，/w下午/t你/rr一验证/nz他/rr的/ude1方法/gi，/w发现/v最简单/nz的/ude1case/gi直接/adfail/nz的/ude1时候/n。/w当时/t就/d感觉/gi一股/nz强大/a的/ude1冲击波/n迎面而来/vl，/w恍惚/a中/f有/vyou种/q看到/v了/ule猴王/nz的/ude1感觉/gi，/w敬仰/vn之/uzhi情/n难以言表/vl，/w唯有/v跟随/v万/nz千猴子/nz猴孙/nz载歌载舞/vl，/w在/p风/n中/f摇摆/v！/w3./nz /x自娱自乐/nz慢慢/d的/ude1，/w一切/rz开始/v上/f了/ule正轨/n，/wbacklog/nz，/wplanning/nz.../w /x有模有样/nz。/w4/nz个/q拜一个/nzsprint/gi，/w虽然/c经常/ddelay release /nz但是/c好歹/d规律/gi了/ule。/w但是/c做/v着/uzhe，/w做/v着/uzhe在/psprint/gi中间/f，/wpo/nz／/wsm/nz会/v突然/ad说/vsprint/gi周期/n是/vshi3/nz个/q拜/v了/ule是/vshi怎么回事/nz。/w提点/v一下/m，/wjira/nz翻出来/l看一下/nz，/w嗯/e，/w搞错/v了/ule，/w原来/d以前/f都/d是/vshi4/nz个/q拜/v。/w好/a，/w过/uguo了/ule一个拜/nz，/w又/d变成/v3/nz个/q拜/v了/ule是/vshi咋回事/nz！/w！/w！/w临近/vrelease/nz，/w今天/t说/vrelease/nz时间/gi是/vshi下/f周二/t，/w大家/rr开始/v计划/gi把/pba一/nz些/q未完成/nz低优先级/l事情/n推迟/v到/v下一个/nzsprint/gi，/w并且/c开始/v做/v测试/gi相关/vn工作/gi。/w过/uguo两/nz天/qt突然/ad变成/vrelease/nz时间/gi是/vshi下/f周五/t。/w到/v了/ule下周一/l，/w再来/drelease/nz时间/gi是/vshi再/d下周/nz....../w /x这个/rz时刻/n估计/gi思路/gi最/d清晰/a的/ude1也/d只有/cpo/nz／/wsm/nz，/w /x深得/vagile/nz的/ude1精髓/n―/w―/w拥抱/v变化/gi，/w虽然/c是/vshi大/a冬天/t，/w抱/v得/ude3太紧/nz也/d难免/v太热/nz烧包/nz啊/y！/w！/w！/w4./nz /x我/rr不入/v地狱/n，/w谁/ry爱/v去/vf谁/ry去/vf码农/nz最/d不/d喜欢/gi的/ude1也许/d就是/v改/v需求/gi。/w码农/nz第二/mq不/d喜欢/gi的/ude1事情/n就是/v每一个/nzfeature/nz都/d有/vyoun/nz种/q方式/n实现/gi，/w但/c总/b有人/r要求/n你/rr用/p一种/nz最/d烂/a的/ude1方法/gi去/vf做/v。/w但是/c，/w码农/nz应该/v是/vshi喜欢/gi敏捷/gi文化/n的/ude1，/w因为/cagile/nz号召/v将/d每/rz一个/mqstory/nz都/d拆分/gi得/ude3足够/v小/a。/w所以/c需求/gi改变/v也/d会/v相应/vi的/ude1被/pbei拆分/gi，/w分解/gi，/w将/d变化/gi无限/b缩小/v，/w所以/c号称/v拥抱/v变化/gi的/ude1agile/nz神奇/a的/ude1将/d一个/mqsprint/gi变得/vi相对/d静止/vn了/ule。/w另外/c敏捷/gi文化/n的/ude1一个/mq重要/a根基/n是/vshi信任/vn，/w基于/p信任/vn的/ude1基础/gi去除/v繁杂/a的/ude1规则/gi、/w流程/gi。/w让/v每个/r码农/nz都/d可以/v放手/vi将/d大部分/n的/ude1精力/n放在/v开发/gi上/f。/w实际/n执行/v中/f，/w当/p一个/mq团队/gi从/p计划/gi驱动/gi的/ude1方式/n转换/gi到/vscrum/nz模式/gi时/qt，/w中层/f管理/gi对/p往/p服务型/n的/ude1管理/gi团队/gi转变/v充满/v了/ule畏惧/v（/w当然/d也/d有可能/nz是/vshi其他/rzv原因/n）/w，/w不愿/nz放手/vi权力/n，/w又/d不敢/d承担责任/nz。/w最/d中/f导致/giscrum/nz跑得/nz不论不类/nz。/w程序猿/nr夹缝/n中/f求生存/v，/w日子/n过/uguo得/ude3反/vi不如/v计划/gi式/k，/w戳/v一下/m走一步/nz的/ude1方式/n。/wscrum/nz的/ude1快/a传统/n的/ude1乱/d，/w这/rzv是/vshi何等/d的/ude1煎熬/vn！/w比如/v：/w1/nz）/w，/wsprint/gi过程/gi中/f，/wpo/nz不能/v在/psprint/gi开始/v的/ude1时候/n确定/v一个/mqsprint/gi中/f需要/v完成/v的/ude1需求/gi，/w随便/ad拉/v几/d个/qbacklog/nz。/w然后/c在/psprint/gi执行/v过程/gi中/f，/w借/v拥抱/v变化/gi之/uzhi名/q，/w随意/ad增加/v新的/abacklog/nz，/w将/d正在/d开发/gi的/ude1backlog/nz移出/v当前/tsprint/gi，/w随意/ad打乱/v开发计划/n。/w玛/nz，/w马上/d要/vrelease/nz还/d在/p换/vfeature/nz，/w这/rzv算/v什么/ry情况/n。/w加/vfeature/nz我/rr能/v理解/gi，/w客户/n需要/v，/w开发/gi好/a的/ude1feature/nz移到/vf下一个/nzsprint/gi，/w我/rr也/d接受/gi。/w玛费/nz了/ule老大/n劲/n设计/gi、/w实现/gi的/ude1代码/gi也/d得/ude3花/n时间/gi移出去/v，/w等/udeng需要/v这个/rzfeature/nz再加/nz进来/vf.../w /x.../w2/nz）/w，/w当前/t架构/gi不能/v适应/v新的/a需求/gi变化/gi，/w需要/v对/p原有/v架构/gi进行/vn改变/v才能/n适应/v新的/a需求/gi时/qt。/wpo/nz／/wsm/nz居然/d第一反应/nz不是/c怎么样/ryv才能/n保证/v满足/v需求/gi的/ude1持续/vd迭代/gi，/w而是/c需要/v做/v这么/rz大/a的/ude1改变/v，/w作为/p“猪”/nz的/ude1你/rr怎么/ryv说服/v更大/d的/ude1老板/gi同意/v花/nefforts/nz去/vf这个/rz改变/v。/w思想/gi，/w思想/gi要/v跟上/v啊/y，/w亲/ng，/w需求/gi是/vshi客户/n说了算/vl啊/y！/w觉悟/n，/w觉悟/n要/v有/vyou啊/y，/w小弟/n，/w升职/vn，/w加薪/v都/d还/d得/ude3靠/v老板/gi！/w3/nz）/w，/wpo/nz将/d计划经济/n的/ude1流程/gi带入/vscrum/nz，/w每/rz一个/mq细节/gi都/d不放过/l，/w每/rz一个/mqfeature/nz的/ude1设计原则/gi，/w实现/gi都/d要/v确保/v自己/rr能/v明白/v，/w最终/d才能/n开始/v实现/gi。/w玛一个/nzfeature/nz我/rr写/v代码/gi才/d只要/c一个拜/nz，/w让/vpo/nz明白/v居然/d要/v花/n两/nz个/q拜/v。/w文档/gi写/v了/ule两/nz轮/qv，/w讲/v要好/a几遍/nz，/w讲/v的/ude1时候/n听/v明白/v了/ule，/w过/uguo几天/nz又/d不/d明白/v了/ule，/w又/d得/ude3重新/d来/vf一/nz遍/qv，/w这/rzv算是/v啥/ry情况/n！/wagileagile/nz与其说是/c一系列/b软件开发/nz的/ude1方法论/n，/w不如说是/c一种/nz观念/n，/w一种/nz思想/gi。/w有/vyou很/d多/a流程/gi框架/gi用于/v敏捷/gi文化/n。/wscrum/nz是/vshi其中/rz最/d出名/a，/w应用/gi最/d广/a的/ude1一种/nz。/w但是/c不管/c是/vshi哪/ry一种/nz都/d仅仅/d是/vshi一种/nz参考/gi，/w并/cc不是/c一个/mq绝对/d的/ude1方法/gi。/w要/v实现/gi敏捷/gi，/w最/d关键/n的/ude1依然/d是/vshi团队/gi，/w而/cc不是/c方法/gi。/w只有/c方法/gi跟/p团队/gi完美/a结合/v才能/n真正/d将/d敏捷/gi的/ude1效果/gi发挥出来/l。/w所以/c没有/v一成不变/vl的/ude1scrum/nz流程/gi，/w流程/gi应该/v根据/p团队/gi成员/nnt配置/gi，/w团队/gi文化/n，/w在/p敏捷/gi过程/gi中/f不断改进/l，/w流程/gi与/cc团队/gi互相/d磨合/vn、/w改进/gi，/w最后/f确定/v一个/mq适合/v团队/gi的/ude1敏捷/gi迭代/gi方式/n。/w鉴于/p个人/n经验/gi，/w资历/n，/w我/rr没法/v在/p这里/rzs讨论/gi正确/a的/ude1scrum/nz流程/gi应该/v是/vshi怎么样/ryv，/w只是/d讨论/gi什么/ry是/vshi我/rr觉得/v不/d对/p的/ude1方法/gi。/w不断/d意识到/v错误/gi，/w在/p错误/gi中/f不停/v修正/v，/w震荡/vn中/f趋向/v稳定/an，/w也/d是/vshi一种/nz不错/a的/ude1方法/gi。/w照着/p教科书/n照搬/vscrum/nz流程/gi，/w都/d是/vshi对/p产品/gi和/cc团队/gi不/d负责/v的/ude1行为/n。/w1./nz /x职责/gi1/nz）/w project owner/nz。/w po/nz是/vshi团队/gi与/cc外部/f的/ude1接口/gi，/w与/cc客户/n合作/vn确定/v产品/gi需求/gi。/w负责/v拟定/v每一个/nzsprint/gi需要/v交付/v的/ude1需求/gi，/w向/p团队/gi输出/gi待办/v事项/n，/w并/cc确定/v优先级/n。/w在/psprint/gi中/f要/v确保/v待办/v事项/n及其/cc进度/gi对/p所有/b项目/gi成员/nnt可见/c。/wpo/nz还/d需要/v确定/v开发/gi团队/gi下一步/nz做/v什么/ry，/wdelay/nz什么/ry来/vf权衡/v范围/n、/w进度/gi以/p确保/v有/vyou最好/d的/ude1产品/gi交付/v。/w2/nz）/wscrum master/nz。/wsm/nz是/vshi团队/gi的/ude1教练/nnt，/w帮助/v团队/gi遵守/v流程/gi，/w协助/vpo/nz创建/gi维护/gi待办/v事项/n列表/vi。/w和/cc开发/gi团队/gi一起/s发现/v并/cc实施/gi技术/gi实践/gi，/w为/p团队/gi清除/v外部/f障碍/gi。/w3/nz）/w开发/gi团队/gi（/w“猪”/nz）/w。/w项目/gi具体/a实施者/nnd，/w负责/v对/p产品/gi的/ude1增量/gi实现/gi。/w开发/gi团队/gi采用/v自/p组织/gi的/ude1方式/n完成/v工作/gi，/w对于/p项目/gi而言/uls，/w开发/gi团队/gi应该/v是/vshi全职/nz的/ude1，/w具有/v完成/v每个/r产品/gi增量/gi所需/nz的/ude1所有/b技能/gi。/w开发/gi团队/gi成语/n与/cc产品/gi负责人/nnt共同/d预测/gi在/p一个/mqsprint/gi里面/f能/v完成/v的/ude1工作/gi，/w并/cc决定/v如何/ryv实现/gi。/w在/p传统/n的/ude1计划/gi式/k开发/gi中/f，/w命令/gi自顶/nz向下/vf，/w一级/b一级/b传达/v，/w每一层/nz都/d有/vyou相应/vi的/ude1责任人/nnt。/w为了/p明确责任/l，/w做/v任何/rz事情/n前/f都/d需要/v详尽/a的/ude1文档/gi，/w提供/v足够/v充分/ad的/ude1理由/n，/w证据/n，/w一级/b级/q申请/v，/w批准/v，/w然后/c立项/vi才能/n开始/v实施/gi。/w创新/gi和/cc敏捷/gi就/d在/p这个/rz冗长/a的/ude1过程/gi中/f被/pbei扼杀/v了/ule。/w在/pscrum/nz中/f，/w所有/b的/ude1执行/v都/d是/vshi基于/p客户/n需求/gi，/w每/rz一个/mqsprint/gi持续/vd迭代/gi，/w交互/gi。/w开发/gi成员/nnt直接/ad作用于/vbacklog/nz，/w并/cc承诺/vn每个/rsprint/gi都/d完成/v相应/vi待办/v事项/n，/w目标/gi明确/a，/w责任/n清晰/a。/w但是/c在/p实际/n实施/gi过程/gi，/wmanager/nz引入/vscrum/nz，/w又/d对/p传统/n的/ude1方式/n依依不舍/vl，/w管理层/n不想/v放权/vi，/w不想/v向/p服务型/n管理/gi转变/v就/d会/v是/vshi什么/ry一种/nz情况/n呢/y。/wpo/nz依然/d用/p瀑布/gi式/k方式/n管理/gi，/w在/psprint/gi过程/gi中/f随意/ad更改/gi待办/v事项/n，/w打乱/v开发计划/n，/w最终/d导致/gi开发/gi效率/gi低下/a。/w按照/pscrum/nz的/ude1方式/n对/p一个/mqsprint/gi能/v完成/v的/ude1工作/gi做/vplan/nz，/w但是/c执行/v过程/gi中/f，/w每/rz一个/mq实现/gi方法/gi都/d需要/vpo/nz或者/c团队/gi外/f的/ude1manager/nz审阅/v，/w批准/v，/w导致/gi项目/gi进展/vn缓慢/a，/w临近/v期限/gi，/w为了/p赶/v进度/gi又/d不得不/d作出/v妥协/vi，/wdelay/nz交互/gi或/c提交/gi一/nz些/q低质量/n代码/gi。/w最终/d导致/giscrum/nz流离/nz于/p形式/gi，/w相比/vi于/p传统/n的/ude1计划/gi是/vshi模式/gi，/w又/d增加/v了/ule更多/ad的/ude1流程/gi，/w会议/gi。/w这种/r混杂/v模式/gi更加/d的/ude1混乱/a，/w低效/gi。/w2./nz /x文化/n团队/gi成员/nnt应该/v有/vyou足够/v的/ude1自信/gi，/w以/p“/w我/rr能/v做到/v”/w的/ude1心态/n去/vf迎接/v，/w支撑/v敏捷/gi。/w敏捷/gi中/f强调/v的/ude1更多/ad的/ude1是/vshi实践/gi，/w通过/p实践/gi去/vf发现/v问题/gi，/w解决问题/v，/w论证/vn问题/gi。/w但是/c传统/n的/ude1方式/n中/f，/w由于/p流程/gi的/ude1限制/vn，/w责任/n的/ude1明确/a划分/v。/w没有人/nz拍板/vi，/w所有人/n都/d不/d敢做/v决定/v，/w总是/d强掉/nz问题/gi，/w但是/c少有/a主动/ad提出/v解决问题/v。/w敏捷/gi中/f，/w团队/gi成员/nnt之间/f是/vshi相互信任/l的/ude1，/w相信/v别人/rr能/v完成/v工作/gi。/w所有/b团队/gi成员/nnt的/ude1工作进度/n是/vshi透明/a的/ude1，/w但是/c完成/v方式/n并不需要/l每/rz一/nz个人/n都/d明了/v。/w所有/b团队/gi成员/nnt都/d相信/v别人/rr会/v在/p规定/n时间/gi内/f用/p最好/d的/ude1方式/n完成/v并/cc交付/v任务/gi。/w团队/gi成员/nnt也/d被/pbei赋予/v足够/v的/ude1信任/vn和/cc自由/a，/w可以/v自主/vd的/ude1设计/gi、/w解决问题/v，/w而/cc不用/d得到/v实现/gi许可/vn。/w团队/gi成员/nnt被/pbei赋予/v了/ule足够/v的/ude1决定权/n可以/v独立/a完成/v自己/rr的/ude1工作/gi，/w又/d与/cc团队/gi其他/rzv成员/nnt相互/d紧密/ad协助/v，/w共同/d解决/v完成/v相关/vn的/ude1工作/gi，/w确保/v不会/v因为/c自己/rr的/ude1工作/gi阻塞/vn别人/rr的/ude1工作/gi。/w实际/n执行/v中/f，/w如果/c团队/gi成员/nnt之间/f没有/v足够/v信任/vn，/w往往/d会/v造成/v过多/d的/ude1干涉/v别人/rr工作/gi，/w剥夺/v别人/rr开发/gi工作/gi中的/v自主权/n，/w导致/gi别人/rr进展/vn缓慢/a，/w同时/c自己/rr也/d因为/c精力/n分散/a，/w而/cc效率/gi低下/a。/w比如/vpo/nz不/d信任/vn团队/gi，/w觉得/v只有/c自己/rr参与/gi其中/rz才能/n把/pba控/v产品质量/nz，/w进度/gi，/w但是/c其实/d对/p每/rz一块/s的/ude1具体/a细节/gipo/nz都/d是/vshi了解/v的/ude1最少/d的/ude1一/nz个人/n，/w参与/gi其中/rz，/w只/d会/v占用/v开发/gi成员/nnt过多/d的/ude1时间/gi去/vf帮助/vpo/nz理解/gi细节/gi。/w同样/d，/w如果/c两/nz个/q开发/gi成员/nnt的/ude1工作/gi相互依赖/nz，/w一人/nz怀疑/v另一个人/nz的/ude1开发/gi不能/v很好/ad契合/v自己/rr的/ude1部分/n，/w不是/c通过/p两/nz个人/n很好/ad的/ude1沟通/gi，/w协商/vn解决问题/v，/w而是/c以为/v自己/rr能力/gi更高/d一筹/n，/w直接/ad指手画脚/n，/w干涉/v别人/rr的/ude1工作/gi，/w结果/n往往/d适得其反/vl，/w久久/d不能/v达成/v一致/a，/w相互/dblock/nz。/w3./nz /x产品/gi交付/v敏捷/gi中/f产品/gi以/p增量/gi的/ude1形式/gi的/ude1交付/v，/w每/rz一个/mqsprint/gi结束/v都/d向/p客户/n交付/v功能/gi增加/v的/ude1产品/gi。/w即使/c收集/v客户/n反馈/gi，/w根据/p客户/n反馈/gi信息/gi，/w实时/n改变/v后面/f的/ude1产品开发/nz策略/gi，/w需求/gi。/w敏捷/gi中的/v变化/gi应该/v是/vshi根据/p客户/n需求/gi，/w调整/vn产品/gi功能/gi，/w待办/v事项/n优先级/n。/w保证/v每一次/d都/d向/p客户/n交互/gi拥有/v最重要/nz增量/gi的/ude1产品/gi。/w传统开发/gi模型/gi中/f，/w产品/gi在/p一个/mq预定/vn的/ude1期限/gi完成/v几乎/d所有/b的/ude1功能/gi后/f再/d交付给/vn用户/gi。/w交互/gi后/f除/p进行/vnbug/gi修复/gi外/f，/w基本/a不在/v进行/vn大/a的/ude1改动/vn。/w如果/c客户/n有/vyou其它/rz的/ude1需求/gi需要/v引入/v，/w则/d需要/v以/prelease/nz升级包/nz的/ude1形式/gi在/p原来/d产品/gi基础上/nz进行/vn升级/vi。/w甚至/d在/p原来/d产品/gi基础上/nz，/w进行/vn大/a的/ude1重构/gi，/w再/d经过/p一个/mq漫长/a的/ude1开发周期/n后/f向/p客户/n交付/v升级换代/vl的/ude1产品/gi。/w敏捷/gi中/f，/w需求/gi的/ude1变化/gi频率/n远/a高于/v传统开发/gi模型/gi。/w敏捷开发/gi中/f，/w有些/rz需求/gi在/p开发/gi的/ude1早期/f不明/v了/ule，/w甚至/d根本/a不存在/ns。/w所以/c在/p敏捷开发/gi中/f，/w开发/gi早期/f可能/v并/cc不能/v确定/v一个/mq能/v适用/vi于/p整个/b项目/gi生命周期/nz的/ude1开发模型/gi，/w架构/gi。/w在/p开发/gi过程/gi中/f，/w需要/v实时/n的/ude1，/w快速/d的/ude1根据/p需求/gi变化/gi在/p不/d影响/gi持续/vd迭代/gi进度/gi的/ude1基础上/nz对/pdesign/gi进行/vn改进/gi。/w所以/c在/p敏捷/gi中/f变化/gi的/ude1是/vshi需求/gi，/w随之/d而/cc变/v的/ude1是/vshi适应/v需求/gi变化/gi的/ude1设计/gi。/w传统开发/gi模型/gi中/f，/w由于/p在/p项目/gi早期/f立项/vi时/qt就/d已经/d确定/v的/ude1项目/gi的/ude1走向/v，/w目标/gi。/w所以/c在/p项目/gi立项/vi是/vshi，/w架构/gi，/w模型/gi就/d已经/d确认/v。/w在/p执行/v过程/gi中/f，/w更多/ad的/ude1变化/gi来自/v于/ppm/nz的/ude1安排/v，/wpm/nz可以/v指定/v每次/rrelease/nz需要/v包含/v的/ude1feature/nz，/wfix/nz哪些/rybugs/nz。/w甚至/dpm/nz可以/v在/p一个/mqrelease/nz周期/n中/f，/w更改/gi需要/vrelease/nz的/ude1事项/n，/w只要/c确保/v项目/gi能/v在/p最后/f的/ude1期限/gi完成/v所有/b的/ude1预期/gi就/d可以/v。/w在/pscrum/nz的/ude1执行/v过程/gi中/f，/w如果/cpo/nz／/wsm/nz打着/v拥抱/v变化/gi的/ude1旗号/n把/pba传统开发/gi模式/gi的/ude1release/nz方式/n带入/v了/ulescrum/nz中/f，/w会/v是/vshi什么/ry情况/n呢/y。/w就是/v可能/v在/psprint/gi做到/v一半/mq的/ude1时候/n，/wpo/nz／/wsm/nz出于/v某种/rz不/d严谨/a的/ude1原因/n打断/v当前/t开发/gi进程/gi，/w把/pba正/d开发/gi的/ude1story/nz挪出/nz当前/tsprint/gi，/w新/a加入/v一/nz些/q其他/rzv待办/v事项/n，/w造成/v开发/gi效率/gi低下/a。/w当然/d在/pscrum/nz模型/gi中/f，/w开发/gi过程/gi中/f完全/ad有可能/nz客户/n出现/v新的/a优先级/n更高/d需求/gi，/w也/d有可能/nz客户/n不在/v需要/v某个/rz正在/d开发/gi的/ude1需求/gi。/w这样的话/l，/w就/d对/ppo/nz／/wsm/nz提出/v了/ule更高/d的/ude1要求/n，/w要求/npo/nz／/wsm/nz有/vyou更高/d的/ude1责任感/n，/w严/a评估/gi新的/a需求/gi的/ude1优先级/n，/w确定/v只/d把/pba特别/d重要/a的/ude1需求/gi插入/gi正在/d开发/gi的/ude1待办/v事项/n中/f。/wpo/nz／/wsm/nz在/p开始/v筛选/vsprint/gi待办/v事项/n时/qt，/w也/d确定/v只/d筛选/vbacklog/nz中/f最重要/nz，/w优先级/n最高/a的/ude1事项/n。/w以/p确保/v尽可能少/d的/ude1影响/gi开发/gi中的/v待办/v事项/n，/w打乱/v开发进度/n。/w杜绝/v传统开发/gi模式/gi中/f权利/n在手/v，/w任/v我/rr胡来/vi的/ude1不负责任/l的/ude1方式/n。/w小结/n鉴于/p个人/n经验/gi有限/a，/w暂时/d能/v想到/v的/ude1就是/v这/rzv几/d点/gi。/w希望/v能/v抛砖引玉/vl，/w收集/v更多/ad的/ude1不/d正确/a的/ude1方式/n，/w正确/a的/ude1方式/n。/w