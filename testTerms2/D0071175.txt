#空间/n索引/gi
转/v自/p：/w在/p介绍/gi空间/n索引/gi之前/f，/w先/d谈谈/v什么/ry叫/vi“索/nz引“/nz。/w对/p一个/mq数据/gi集/q做/v”索/nz引“/nz，/w是/vshi为了/p提高/v对/p这个/rz数据/gi集/q检索/gi的/ude1效率/gi。/w书/gi的/ude1”目/nz录“/nz就是/v这/rzv本书/gi内容/gi的/ude1”索/nz引“/nz，/w当/p我们/rr拿到/v一/nz本/rz新书/n，/w想/v查看/gi感兴趣/a内容/gi的/ude1时候/n，/w我们/rr会/v先/d查看/gi目录/gi，/w确定/v感兴趣/a的/ude1内容/gi会/v在/p哪些/ry页/q里/f，/w直接/ad翻到/v那些/rz页/q，/w就/dok/nz了/ule，/w而/cc不是/c从/p第一/mq章节/n开始/v翻/v，/w一个字/nz一个字/nz地/ude2找/v我们/rr感兴趣/a的/ude1内容/gi，/w直到/v找到/v为止/u，/w这种/r检索/gi内容/gi的/ude1效率/gi也/d太低/nz了/ule，/w如果/c一/nz本书/gi没有/v目录/gi，/w可以/v想象/v有/vyou多么/d不方便/nz…/w可见/c书/gi的/ude1目录/gi有/vyou多/a重要/a，/w索引/gi有/vyou多/a重要/a啊/y！/w现在/t大家/rr对/p索引/gi有/vyou了/ule感性认识/n，/w那/rzv什么/ry是/vshi“/w空间/n索引“/nz呢/y？/w”/w空间/n索引“/nz也/d是/vshi”索/nz引“/nz，/w是/vshi对/p空间/n图形/gi集合/gi做/v的/ude1一个/mq”/w目录/gi“/w，/w提高/v在/p这个/rz图形/gi集合/gi中/f查找/gi某个/rz图形/gi对象/gi的/ude1效率/gi。/w比如说/vl，/w我们/rr在/p一个/mq地图/n图层/n上/f进行/vn矩形/gi选择/gi，/w确定/v这个/rz图层/n上/f哪些/ry图元/n被/pbei这个/rz矩形/gi所/usuo完全/ad包含/v呢/y，/w在/p没有/v”/w空间/n索引“/nz的/ude1情况下/nz，/w我们/rr会/v把/pba这个/rz图层/n上/f的/ude1所有/b图元/n，/w一一/d拿来/vf与/cc这个/rz矩形/gi进行/vn几何/gi上/f的/ude1包含/v判断/gi，/w以/p确定/v到底/d哪些/ry图元/n被/pbei完全/ad包含/v在/p这个/rz矩形/gi内/f。/w您/rr是不是/v觉得/v这样/rzv做/v很/d合理/a呢/y？/w其实不然/dl，/w我们/rr先/d看/v一个网/nz索引/gi的/ude1例子/gi：/w我们/rr对/p这个/rz点/gi图层/n作/v了/ule网/n索引/gi，/w判断/gi哪些/ry点/gi在/p这个/rz矩形/gi选择/gi框内/nz，/w是/vshi不/d需要/v把/pba这个/rz图层/n里/f所有/b的/ude1点/gi都/d要/v与/cc矩形/gi进行/vn几何/gi包含/v运算/gi的/ude1，/w只/d对/pa/nz,/nzb/nz,/nzc/nz,/nzd/nz,/nze/nz,/nzf/nz,/nzg/nz这/rzv七个点/nz做/v了/ule运算/gi。/w可以/v推想/v一下/m，/w如果/c一个/mq点/gi图层/n有/vyou十万个点/nz，/w不/d建立/gi空间/n索引/gi，/w任何/rz地图/n操作/gi都/d将/d对/p整个/b图层/n的/ude1所有/b图元/n遍历/gi一次/nz，/w也/d就是/v要/vfor/nz循环/gi10/nz万/nz次/qv；/w建立/gi索引/gi将/d使得/vifor/nz循环/gi的/ude1次数/gi下降/vi很/d多/a很/d多/a，/w效率/gi自然/n提高/v很/d多/a！/w呵呵/e…/w想必/d大家/rr都/d知道/v空间/n索引/gi的/ude1好处/gi了/ule，/w也/d不知不觉/dl向/p大家/rr介绍/gi了/ule点/gi图层/n的/ude1网/n索引/gi，/w还有/v哪些/ry常用/a的/ude1空间/n索引/gi呢/y？/w这些/rz空间/n索引/gi又/d该/rz如何/ryv实现/gi呢/y？/w带着/vn这样/rzv的/ude1问题/gi，/w下面/f介绍/gi几/d种/q常用/a的/ude1空间/n索引/gi。/w网/n索引/gi /x网/n索引/gi就是/v在/p一个/mq地图/n图层/n上/f，/w按/p每个/r小/a网/n宽/a△/ww/nz,/nz高△/nzh/nz打上/v均匀/a的/ude1网/n，/w计算/gi每个/r图元/n所/usuo占据/v的/ude1网/n或者/c所/usuo经过/p的/ude1网/n单元/n集合/gi，/w /x在/p这些/rz网/n单元/n中/f，/w记录/gi下/f图元/n对象/gi的/ude1地址/gi或者/c引用/gi，/w比如/v：/w声明/gi一个/mq对象/gi二维数/nz组/nlist grid/nz[/nzm/nz]/nz[/nzn/nz]/nz;/nz m/nz代表/nnt网/n的/ude1行数/n，/wn/nz代表/nnt网/n的/ude1列数/nz，/w每个/r数组/gi元素/gi为/p一个/mq“/w集合/gi对象/gi”/w，/w用于/v存储/gi这个/rz网/n单元/n所/usuo关联/vn的/ude1所有/b图元/n的/ude1地址/gi或/c引用/gi，/w这样/rzv网/n索引/gi就/d建立/gi好/a了/ule。/w下一步/nz，/w我们/rr该/rz怎么/ryv用/p这个/rz网/n索引/gi呢/y？/w所有/b的/ude1图形/gi显示/gi和/cc操作/gi都/d可以/v借助于/v“/w空间/n索引”/nz来/vf提高效率/nz。/w举/v几/d个/q例子/gi来/vf说明/v“/w空间/n索引“/nz的/ude1使用/gi：/w /x一/nz、/w放大/v开窗/nz显示/gi，/w正如/v上/f一/nz节/q介绍/gi的/ude1，/w当/p我们/rr在/p地图/n上/f画/v一个/mq矩形/gi想/v放大/v地图/n的/ude1时候/n，/w首先/d得/ude3确定/v放大/v后/f的/ude1地图/n在/p屏幕/gi上/f需要/v显示/gi哪些/ry图元/n？/w所以/c，/w我们/rr需要/v判断/gi这个/rz地图/n中/f有/vyou哪些/ry图元/n全部/m或者/c部分/n落在/v这个/rz矩形/gi中/f。/w判断/gi步骤/gi：/w1/nz，/w确定/v所画/n矩形/gi左上角/nz和/cc右下角/f所在/n的/ude1网/n数组/gi元素/gi；/w即可/v得到/v这个/rz矩形/gi所/usuo关联/vn覆盖/gi的/ude1所有/b网/n集合/gi；/w2/nz，/w遍历/gi这个/rz网/n集合/gi中的/v元素/gi，/w取到/v每个/r网/n元素/gilist/gi中所/j记录/gi的/ude1图元/n；/w3/nz，/w画/v出/vf这些/rz图元/n即可/v。/w（/w当然/d整个/b过程/gi涉及/v到/v两点：/nz1/nz，/w屏幕/gi坐标/gi和/cc地图/n坐标/gi的/ude1互相/d变换/gi；/w2/nz，/w窗口/s裁减/v，/w也/d可以/v不/d裁减/v）/w二/nz、/w包含/v判断/gi，/w给出/v一个/mq点/gipoint/nz和/cc一/nz个/q多边形/apolygon/nz，/w判断/gi点/gi是否/v在/p面/nf内/f，/w首先/d判断/gi这个/rz点/gi所在/n的/ude1网/n，/w是否/v同时/c关联/vn这个/rzpolygon/nz，/w如果/c不是/c，/w表明/v点/gi不在/v面/nf内/f，/w如果/c是/vshi，/w可以/v下一步/nz的/ude1精确/gi解析/gi几何/gi判断/gi，/w或者/c精度/n允许/v的/ude1情况下/nz，/w即/v判断/gipolygon/nz是/vshi包含/vpoint/nz的/ude1。/w另外/c，/wgoogle map/nz应该/v也/d是/vshi采用/v地理/n网/n的/ude1方式/n，/w对/p地图/n图象/n进行/vn索引/gi的/ude1，/w可见一斑/vl，/w网/n索引/gi在/p图形/gi显示/gi，/w选择/gi，/w拓扑/n判断/gi上/f的/ude1广泛应用/l。/w但/c同时/c也/d存在/v很/d严重/a的/ude1缺陷/gi：/w当/p被/pbei索引/gi的/ude1图元/n对象/gi是/vshi线/n，/w或者/c多边形/a的/ude1时候/n，/w存在/v索引/gi的/ude1冗余/n，/w即/v一个线/nz或者/c多边形/a的/ude1引用/gi在/p多/a个/q网/n中都/ns有/vyou记录/gi。/w随着/p冗余/n量/n的/ude1增大/v，/w效率/gi明显/a下降/vi。/w所以/c，/w很/d多学者/nz提出/v了/ule各种/rz方法/gi来/vf改进/gi网/n索引/gi，/w这个/rz将/d在/p下面/f的/ude1章节/n中/f介绍/gi。/w而/cc点/gi图元/n非常适合/i网/n索引/gi，/w不存在/ns冗余/n问题/gi。/w四叉树/nz索引/gi（/wquadtree/nz）/w类/gi于/p前面/f介绍/gi的/ude1网/n索引/gi,/nz也/d是/vshi对/p地理/n空间/n进行/vn网/n划分/v，/w对/p地理/n空间/n递归/gi进行/vn四分/nz来/vf构建/gi四叉树/nz，/w本文/r将/d在/p普通/a四叉树/nz的/ude1基础上/nz，/w介绍/gi一种/nz改进/gi的/ude1四叉树/nz索引/gi结构/gi。/w首先/d，/w先/d介绍/gi一个/mqgis/nz（/wgeographic information system/nz）/w或者/c计算机图形学/gi上/f非常/d重要/a的/ude1概念/gi―/w―/w最小/a外包/nz矩形/gi(/nzmbr/nz-/nzminimum bounding rectangle/nz)/nz：/w /x最小/a外包/nz矩形/gimbr/nz就是/v包围/v图元/n，/w且/c平行/vi于/px/nz，/wy/nz轴/n的/ude1最小/a外接/gm矩形/gi。/wmbr/nz到底/d有/vyou什么/ry用处/n呢/y，/w为什么/ryv要/v引入/v这个/rz概念/gi呢/y？/w因为/c，/w图元/n的/ude1形状/n是/vshi不规则/a的/ude1，/w而/ccmbr/nz是/vshi平行/vi于/px/nz，/wy/nz轴/n的/ude1规则/gi图形/gi，/w设想/vn一下/m，/w如果/c所有/b的/ude1图元/n都/d是/vshi平行/vi于/px/nz，/wy/nz轴/n的/ude1矩形/gi，/w那/rzv针对/gi这样/rzv的/ude1矩形/gi进行/vn几何/gi上/f的/ude1任何/rz判断/gi，/w是不是/v要/v简单/a很/d多/a呢/y？/w不管/c我们/rr人/n自己/rr写/v公式/gi算法/gi或者/c编写程序/n运行/gi，/w是不是/v都/d要/v比/p原本/d复杂/a的/ude1图形/gi几何/gi运算/gi要/v简洁/gi很/d多/a呢/y？/w答案/gi很/d显然/ad。/w然后/c，/w我们/rr再/d介绍/gi一下/mgis/nz空间/n操作/gi的/ude1步骤/gi（/w这个/rz步骤/gi，/w在/p前面/f忘记/v向/p大家/rr说明了/v，/w在/p这里/rzs补充/vn一下/m）/w /x可见/c，/w过滤/gi阶段/gi，/w通过/p空间/n索引/gi可以/v排除/gi掉/v一/nz些/q明显/a不/d符合条件/n的/ude1图元/n，/w得到/v后/f选/v集合/gi，/w然后/c对/p后/f选/v图元/n集合/gi进行/vn精确/gi几何/gi运算/gi，/w得到/v最终/d结果/n。/w大家/rr可能会/nz有/vyou这样/rzv的/ude1疑问/n，/w这样/rzv有/vyou必要/a吗/y？/w是不是/v反而/d把/pba问题/gi复杂化/v了/ule？/w合适/a的/ude1空间/n索引/gi只/d会/v提高/v计算机/gi的/ude1效率/gi，/w没有/v空间/n索引/gi，/w我们/rr无疑/d要/v对/p集合/gi中的/v每个/r图元/n进行/vn精确/gi几何/gi运算/gi，/w而/cc这样/rzv的/ude1运算/gi是/vshi复杂/a的/ude1，/w是/vshi非常/d占用/vcpu/gi的/ude1，/w所以/c需要/v空间/n索引/gi，/w采取/v少量/mq的/ude1内存/gi和/cc简单/a的/ude1cup/nz运算/gi，/w来/vf尽量减少/i那种/r高耗/nzcup/nz的/ude1精确/gi运算/gi的/ude1次数/gi，/w这样/rzv做/v是/vshi完全/ad得/ude3的/ude1。/w至于/p精确/gi的/ude1几何/gi运算/gi到底/d复杂/a在/p哪里/rys，/w该/rz如何/ryv进行/vn精确/gi的/ude1几何/gi运算/gi，/w将/d在/p下面/f的/ude1章节/n中/f详细描述/n，/w这里/rzs主要/b介绍/gi过滤/gi阶段/gi的/ude1空间/n索引/gi。/w /x现在/t，/w让/v我们/rr来/vf具体/a了解/v一下/m“/w四叉树/nz索引”/nz。/w四叉树/nz索引/gi就是/v递归/gi地/ude2对/p地理/n空间/n进行/vn四分/nz，/w直到/v自行/d设定/v的/ude1终止/v条件/n（/w比如/v每个/r节点/gi关联/vn图元/n的/ude1个数/n不/d超过/v3/nz个/q，/w超过/v3/nz个/q，/w就/d再/d四分/nz）/w，/w最终/d形成/v一/nz颗/q有/vyou层次/n的/ude1四叉树/nz。/w图/gi中/f有/vyou数字标识/gi的/ude1矩形/gi是/vshi每个/r图元/n的/ude1mbr/nz，/w每个/r叶子节点/gi存储/gi了/ule本/rz区域/n所/usuo关联/vn的/ude1图元/n标识/n列表/vi和/cc本/rz区域/n地理/n范围/n，/w非/b叶子节点/gi仅/d存储/gi了/ule区域/n的/ude1地理/n范围/n。/w大家/rr可以/v发现/v，/w同样/d存在/v一个/mq图元/n标识/n被/pbei多/a个/q区域/n所/usuo关联/vn，/w相应/vi地/ude2存储/gi在/p多/a个/q叶子节点/gi上/f，/w比如/v“/w6/nz“/w所/usuo代表/nnt的/ude1图元/n，/w分别/d存储/gi在/p四个分/nz枝/ng上/f。/w这样/rzv，/w就/d存在/v索引/gi的/ude1冗余/n，/w与/cc网/n索引/gi存在/v同样/d的/ude1弊端/n。/w下面/f我们/rr介绍/gi一种/nz改进/gi的/ude1四叉树/nz索引/gi，/w或者说/c是/vshi分层/v的/ude1网/n索引/gi。/w /x改进/gi的/ude1四叉树/nz索引/gi，/w就是/v为了/p避免/v这种/r空间/n索引/gi的/ude1冗余/n，/w基本/a改进/gi思路/gi是/vshi：/w让/v每个/r图元/n的/ude1mbr/nz被/pbei一个/mq最/d小区域/nz完全/ad包含/v。/w可以/v看出/v，/w3/nz和/cc13/nz分别/d都/d跨越/v了/ule两/nz个/q区域/n，/w要/v被/pbei一个/mq最/d小区域/nz完全/ad包含/v，/w就/d只能/v是/vshi根/n节点/gi所/usuo代表/nnt的/ude1区域/n，/w2/nz，/w5/nz跨越/v了/ule两/nz个/q区域/n，/w6/nz跨越/v了/ule四个/nz区域/n，/w要/v被/pbei一个/mq最/d小区域/nz完全/ad包含/v，/w就/d只能/v是/vshinw/nz区域/n。/w怎么/ryv判断/gi一个/mq图元/n被/pbei哪个/ry最/d小区域/nz完全/ad包含/v呢/y？/w从/p直观/a上/f看/v，/w递归/gi地/ude2对/p地理/n空间/n进行/vn四分/nz，/w如果/c图元/n与/cc一个/mq区域/n四分/nz的/ude1划分/v线/n相交/vi，/w则/d这个/rz图元/n就/d归属于/l这个/rz区域/n，/w或者/c直到/v不再/d划分/v了/ule，/w那/rzv就/d属于/v这个/rz不再/d划分/v的/ude1区域/n。/w呵呵/e。。。/w可能/v有点/d绕口/nz，/w看图/v，/w结合/v“/w最小/a”“/nz完全/ad包含/v”/w这/rzv两/nz个/q字/n，/w您/rr就/d明白/v了/ule。/w这/rzv颗/q四叉树/nz中/f，/w图元/n的/ude1标识/n不再/d仅仅/d存储/gi在/p叶子节点/gi上/f，/w而是/c每个/r节点/gi都/d有可能/nz存储/gi，/w这样/rzv也/d就/d避免/v了/ule索引/gi冗余/n。/w同时/c每个/r节点/gi存储/gi本/rz节点/gi所在/n的/ude1地理/n范围/n。/w有/vyou了/ule四叉树/nz索引/gi，/w下面/f又/d该/rz如何/ryv利用/v这/rzv颗/q树/gi来/vf帮助/v检索/gi查找/gi呢/y？/w还是/c矩形/gi选择/gi为/p例/n吧/y！/w（/w为什么/ryv我/rr总是/d拿/v这个/rz例子/gi来说/uls事/n呢/y？/w因为/c这个/rz例子/gi简单/a，/w容易/ad理解/gi，/w有/vyou代表性/n！/w）/w我们/rr在/p地图/n上/f画/v一个/mq矩形/gi，/w判断/gi地图/n上/f哪些/ry图元/n落在/v这个/rz矩形/gi里/f或者/c和/cc这个/rz所画/n矩形/gi相交/vi。/w方法/gi很/d多/a，/w这里/rzs介绍/gi一种/nz简单/a的/ude1检索/gi步骤/gi，/w如下/vi：/w1/nz，/w首先/d，/w从/p四叉树/nz的/ude1根/n节点/gi开始/v，/w把/pba根/n节点/gi所/usuo关联/vn的/ude1图元/n标识/n都/d加到/v一个/mqlist/gi里/f；/w2/nz，/w比较/gi此/rzs矩形/gi范围/n与/cc根/n节点/gi的/ude1四个子/nz节点/gi（/w或者/c叫子/n区域/n）/w是否/v有/vyou交集/gi（/w相交/vi或者/c包含/v）/w，/w如果/c有/vyou，/w则/d把/pba相应/vi的/ude1区域/n所/usuo关联/vn的/ude1图元/n标识/n加到/vlist/gi集合/gi中/f，/w如果/c没有/v，/w则/d以下/f这/rzv颗/q子树/gm都/d不再/d考虑/v。/w3/nz，/w以上/f过程/gi的/ude1递归/gi，/w直到/v树/gi的/ude1叶子节点/gi终止/v，/w返回/vlist/gi。/w4/nz，/w从/plist/gi集合/gi中/f根据/p标识/n一一/d取出/v图元/n，/w先/d判断/gi图元/nmbr/nz与/cc矩形/gi有无/v交集/gi，/w如果/c有/vyou，/w则/d进行/vn下面/f的/ude1精确/gi几何/gi判断/gi，/w如果/c没有/v，/w则/d不再/d考虑/v此/rzs图元/n。/w（/w当然/d，/w这里/rzs只/d说/v了/ule一个/mq基本思路/nz，/w其实/d还有/v其他/rzv一些/m不同/a的/ude1方法/gi，/w比如/v，/w结合/v空间数据/nz磁盘/gi的/ude1物理/n存储/gi会/v有/vyou一/nz些/q调整/vn）/w总结/gi：/w改进/gi的/ude1四叉树/nz索引/gi解决/v了/ule线/n，/w面对象/nz的/ude1索引/gi冗余/n，/w具有/v较好/d的/ude1性能/gi，/w而/cc被/pbei大型/b空间数据库/gi引擎/n所/usuo采用/v，/w如/varcsde/gi，/woracle spatial/nz等/udeng，/w同时/c这种/r结构/gi也/d适用/vi于/p空间数据/nz的/ude1磁盘/gi索引/gi，/w配合/v空间/n排序/gi聚类/gi，/w基于/p分形/n的/ude1hilbert/nz算法/gi数据组织/n，/w将/d在/p空间/n数据式/nz的/ude1定义/gi中/f发挥/v重要/a作用/gi。/w