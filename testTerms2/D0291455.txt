#JAVA/gi设计模式/nz之/uzhi桥接模式/gi
转载/v主题/n生活/vn中的/v一个/mq小/a例子/gi　　/nz拿/v汽车/n在/p路上/s行驶/vi的/ude1来说/uls。/w既有/v小汽车/n又/d有/vyou公共汽车/nz，/w它们/rr都/d不但/c能/v在/p市区/s中的/v公路/n上/f行驶/vi，/w也/d能/v在/p高速公路/n上/f行驶/vi。/w这/rzv你/rr会/v发现/v，/w对于/p交通工具/nz（/w汽车/n）/w有/vyou不同/a的/ude1类型/gi，/w它们/rr所/usuo行驶/vi的/ude1环境/n（/w路/n）/w也/d有/vyou不同/a类型/gi，/w在/p软件系统/gi中/f就要/d适应/v两/nz个/q方面/n（/w不同/a车型/n，/w不同/a道路/n）/w的/ude1变化/gi，/w怎样/ryv实现/gi才能/n应对/v这种/r变化/gi呢/y？/w概述/gi　　/nz在/p软件系统/gi中/f，/w某些/rz类型/gi由于/p自身/rr的/ude1逻辑/n，/w它/rr具有/v两/nz个/q或/c多/a个/q维度/gi的/ude1变化/gi，/w那么/c如何/ryv应对/v这种/r“/w多维度/ns的/ude1变化/gi”/w？/w如何/ryv利用/v面向对象/gi的/ude1技术/gi来/vf使得/vi该/rz类型/gi能够/v轻松/a的/ude1沿着/p多/a个/q方向/gi进行/vn变化/gi，/w而/cc又/d不/d引入/v额外/b的/ude1复杂度/gi？/w这/rzv就要/d使用/gibridge/gi模式/gi。/w意图/gi　　/nz将/d抽象/gi部分/n与/cc实现/gi部分/n分离/vi，/w使/v它们/rr都/d可以/v独立/a的/ude1变化/gi。/w /x―/w /x―/w《/w设计模式/nz》/wgof /nz上面/f这些/rz话/n我/rr也/d没/d看懂/nz。/w。/w太/d抽象/gi了/ule，/w但是/c一/nz看/v代码/gi你/rr就/d明白/v是/vshi怎么回事/nz了/ule。/w结构图/gi传统/n的/ude1做法/n缺点/gi:/w /x　　/nz但是/c我们/rr说/v这样/rzv的/ude1设计/gi是/vshi脆弱/gi的/ude1，/w仔细分析/n就/d可以/v发现/v，/w它/rr还是/c存在/v很/d多/a问题/gi，/w首先/d它/rr在/p遵循/gi开放-封闭/nz原则/gi的/ude1同时/c，/w违背/v了/ule类/gi的/ude1单一职责原则/gi，/w即/v一个/mq类/gi只有/c一个/mq引起/v它/rr变化/gi的/ude1原因/n，/w而/cc这里/rzs引起/v变化/gi的/ude1原因/n却/d有/vyou两/nz个/q，/w即/v路/n类型/gi的/ude1变化/gi和/cc汽车/n类型/gi的/ude1变化/gi；/w其次/c是/vshi重复/gi代码/gi会/v很/d多/a，/w不同/a的/ude1汽车/n在/p不同/a的/ude1路上/s行驶/vi也/d会/v有/vyou一/nz部分/n的/ude1代码/gi是/vshi相同/a的/ude1；/w　　/nz再次/d是/vshi类/gi的/ude1结构/gi过于/d复杂/a，/w继承/gi关系/gi太多/ad，/w难于/vd维护/gi，/w最后/f最/d致命/vi的/ude1一点/m是/vshi扩展性/n太差/d。/w如果/c变化/gi沿着/p汽车/n的/ude1类型/gi和/cc不同/a的/ude1道路/n两/nz个/q方向/gi变化/gi，/w我们/rr会/v看到/v这个/rz类/gi的/ude1结构/gi会/v迅速/ad的/ude1变/v庞大/a。/w桥接模式/gi /x　　/nz可以/v看到/v，/w通过/p对象/gi组合/gi的/ude1方式/n，/wbridge /nz模式/gi把/pba两/nz个/q角色/gi之间/f的/ude1继承/gi关系/gi改为/v了/ule耦合/vn的/ude1关系/gi，/w从而/c使/v这/rzv两者/rzv可以/v从容/a自若/nz的/ude1各自/rr独立/a的/ude1变化/gi，/w这/rzv也/d是/vshibridge/gi模式/gi的/ude1本意/n。/w /x　　/nz这样/rzv增加/v了/ule客户程序/n与/cc路/n与/cc汽车/n的/ude1耦合/vn。/w其实/d这样/rzv的/ude1担心/v是/vshi没有/v必要/a的/ude1，/w因为/c这种/r耦合性/nz是/vshi由于/p对象/gi的/ude1创建/gi所/usuo带来/v的/ude1，/w完全/ad可以/v用/p创建型模式/gi去/vf解决/v。/w在/p应用/gi时/qt结合/v创建/gi型/k设计模式/nz来/vf处理/vn具体/a的/ude1问题/gi。/w结合/v上面/f的/ude1例子/gi,/nz增加/v一个/mq维度/gi”/w人/n”/w,/nz不同/a的/ude1人/n开/v着/uzhe不同/a的/ude1汽车/n在/p不同/a的/ude1路上/s行驶/vi(/nz三个/nz维度/gi)/nz;/nz代码/gi如下/vi：/w效果/gi及/cc实现/gi要点/n：/w1．/nz bridge/nz模式/gi使用/gi“/w对象/gi间/f的/ude1组合/gi关系/gi”解/nz耦/nz了/ule抽象/gi和/cc实现/gi之间/f固有/b的/ude1绑定/gi关系/gi，/w使得/vi抽象/gi和/cc实现/gi可以/v沿着/p各自/rr的/ude1维度/gi来/vf变化/gi。/w /x2．/nz /x所谓/v抽象/gi和/cc实现/gi沿着/p各自/rr维度/gi的/ude1变化/gi，/w即/v“子/nz类/gi化”/nz它们/rr，/w得到/v各个子/nz类/gi之后/f，/w便/d可以/v任意/d它们/rr，/w从而/c获得/v不同/a路上/s的/ude1不同/a汽车/n。/w /x3．/nz bridge/nz模式/gi有时候/d类似于/v多/a继承/gi方案/gi，/w但是/c多/a继承/gi方案/gi往往/d违背/v了/ule类/gi的/ude1单一职责原则/gi（/w即/v一个/mq类/gi只有/c一个/mq变化/gi的/ude1原因/n）/w，/w复用性/nz比较/gi差/a。/wbridge/gi模式/gi是/vshi比/p多/a继承/gi方案/gi更好/d的/ude1解决方法/gi。/w /x4．/nz bridge/nz模式/gi的/ude1应用/gi一般/ad在/p“/w两/nz个/q非常/d强/a的/ude1变化/gi维度/gi”/w，/w有时候/d即使/c有/vyou两/nz个/q变化/gi的/ude1维度/gi，/w但是/c某个/rz方向/gi的/ude1变化/gi维度/gi并不/d剧烈/a―/w―/w换言之/cc两/nz个/q变化/gi不会/v导致/gi纵横交错/vl的/ude1结果/n，/w并不一定/d要/v使用/gibridge/gi模式/gi。/w