#java/gi应用/gi一般/ad架构/gi
当/p我们/rr架设/v一个/mq系统/gi的/ude1时候/n通常/d需要/v考虑到/v如何/ryv与/cc其他/rzv系统/gi交互/gi，/w所以/c我们/rr首先/d需要/v知道/v各种/rz系统/gi之间/f是/vshi如何/ryv交互/gi的/ude1，/w使用/gi何种/r技术/gi实现/gi。/w1./nz /x不同/a系统/gi不同/a语言/gi之间/f的/ude1交互/gi现在/t我们/rr常见/a的/ude1不同/a系统/gi不同/a语言/gi之间/f的/ude1交互/gi使用/giwebservice/nz，/whttp/gi请求/gi。/wwebservice/nz，/w即/v“/wweb /nz服务/gi”/w，/w简写/n为/p ws/nz。/w从/p字面上/n理解/gi，/w它/rr其实/d就是/v“/w基于/p web /nz的/ude1服务/gi”/w。/w而/cc服务/gi却是/d双方/n的/ude1，/w有/vyou服务/gi需求方/n，/w就/d有/vyou服务/gi提供/v方/q。/w服务/gi提供/v方/q对外/vn发布/gi服务/gi，/w服务/gi需求方/n调用/gi服务/gi提供/v方/q所/usuo发布/gi的/ude1服务/gi。/w如果说/c得/ude3再/d专业/n一点/m，/wws /nz其实/d就是/v建立/gi在/p http /nz协议/gi上/f实现/gi异构/gi系统/gi通讯/gi的/ude1工具/gi。/w没错/vi！/wws /nz说白了/l还是/c基于/p http /nz协议/gi的/ude1，/w也/d就是说/c，/w数据/gi是/vshi通过/p http /nz进行/vn传输/gi的/ude1。/w最早/d我们/rr是/vshi用/pcxf/nz开发/gisoap/nz服务/gi实现/giws/nz，/w后面/f我们/rr是/vshi用/prest/gi服务/gi实现/giws/nz(/nz这个/rz目前/t使用/gi比较/gi多/a，/w也/d最/d我/rr用得/v最多/ad的/ude1这/rzv一种/nz)/nz。/w基于/pcxf/nz也/d可以/v开发/girest/gi服务/gi，/w不过/c我们/rr一般/ad直接/ad使用/gispringmvc/nz或者/c其他/rzvmvc/gi框架/gi实现/girest/gi服务/gi。/w但是/c在/p很/d多/a人/n的/ude1印象/n中/fweb service/nz的话/udh一般/ad指/v十来年前/nzibm/nz主导/n的/ude1基于/pxml/nz的/ude1各种/rz交互技术/gi，/w现在/t除了/p一/nz些/q公司/nis在用/b之外/f用得/v人/n也/d很少/ad了/ule。/w广义/n的话/udhwebservice/nz就是/vweb /nz服务/gi了/ule，/w一切/rz皆/d服务/gi。/w2./nz /x不同/a系统/gi相同/a语言/gi之间/f的/ude1交互/gi常见/a的/ude1不同/a系统/gi相同/a语言/gi之间/f的/ude1交互/gi用/prpc/nz(/nz远程/gi过程/gi调用/gi)/nz，/w或者/crmi/nz(/nz远程/gi方法/gi调用/gi)/nz实现/gi，/w不用/d对外部/nis提供/v服务/gi，/w当然/d上面/f说/v的/ude1也/d可以/v使用/gi在/p相同/a语言/gi之间/f的/ude1交互/gi,/nz只是/d我/rr常用/a的/ude1是/vshirpc/nz。/w不同/a产品/gi的/ude1架构/gi3./nz /x单个/b产品/gi的/ude1架构/gi演进/vn一般/ad我们/rr只是/d一个/mq产品/gi的/ude1情况下/nz的/ude1架构/gi演进/vn历程/gi，/w如果/c需要/v对外/vn提供/vwebservice/nz，/w通常/d使用/girest/gi服务/gi实现/gi。/w以下/f一段/nz内容/gi来源于/v1./nz /x分布式/gi架构/gi的/ude1演进/vn系统架构/gi演化/gi历程-初始/nz阶段/gi架构/gi初始/b阶段/gi /x的/ude1小型/b系统/gi /x应用程序/nz、/w数据库/gi、/w文件/gi等/udeng所有/b的/ude1资源/gi都/d在/p一台/nz服务器/gi上/f通俗/a称为/vlamp/nz特征/gi：/w应用程序/nz、/w数据库/gi、/w文件/gi等/udeng所有/b的/ude1资源/gi都/d在/p一台/nz服务器/gi上/f。/w描述/gi：/w通常/d服务器/gi操作系统/gi使用/gilinux/gi，/w应用程序/nz使用/giphp/gi开发/gi，/w然后/c部署/gi在/papache/gi上/f，/w数据库/gi使用/gimysql/gi，/w汇集/v各种/rz免费/vd开源/gi软件/gi以及/cc一/nz台/q廉价/a服务器/gi就/d可以/v开始/v系统/gi的/ude1发展/gi之路/r了/ule。/w2./nz /x系统架构/gi演化/gi历程-应用/nz服务/gi和/cc数据服务/n分离/vi好景不长/vl，/w发现/v随着/p系统/gi访问量/nz的/ude1再度/d增加/v，/wwebserver/gi机器/gi的/ude1压力/n在/p高峰期/n会/v上升/vi到/v比较/gi高/a，/w这个/rz时候/n开始/v考虑/v增加/v一台/nzwebserver/gi特征/gi：/w应用程序/nz、/w数据库/gi、/w文件/gi分别/d部署/gi在/p独立/a的/ude1资源/gi上/f。/w描述/gi：/w数据量/n增加/v，/w单/b台/q服务器/gi性能/gi及/cc存储空间/gi不足/an，/w需要/v将/d应用/gi和/cc数据/gi分离/vi，/w并发/gi处理/vn能力/gi和/cc数据/gi存储空间/gi得到/v了/ule很大/d改善/v。/w3./nz /x系统架构/gi演化/gi历程-使用/nz缓存/gi改善/v性能/gi特征/gi：/w数据库/gi中/f访问/gi较/d集中/v的/ude1一小/d部分/n数据存储/gi在/p缓存/gi服务器/gi中/f，/w减少/v数据库/gi的/ude1访问/gi次数/gi，/w降低/v数据库/gi的/ude1访问/gi压力/n。/w描述/gi：/w系统/gi访问/gi特点/n遵循/gi二八/nz定律/n，/w即/v80%/nz的/ude1业务/gi访问/gi集中/v在/p20%/nz的/ude1数据/gi上/f。/w缓存/gi分为/v本地/gi缓存/gi和/cc远程/gi分布式/gi缓存/gi，/w本地/gi缓存/gi访问速度/n更快/d但/c缓存数据/n量/n有限/a，/w同时/c存在/v与/cc应用程序/nz争/v用/p内存/gi的/ude1情况/n。/w4./nz /x系统架构/gi演化/gi历程-使用/nz应用服务器/gi集群/gi在/p做完/v分库/gi分表/n这些/rz工作/gi后/f，/w数据库/gi上/f的/ude1压力/n已经/d降到/v比较/gi低/a了/ule，/w又/d开始/v过/uguo着/uzhe每天/r看着/v访问量/nz暴增/nz的/ude1幸福生活/nz了/ule，/w突然/ad有一天/d，/w发现/v系统/gi的/ude1访问/gi又/d开始/v有/vyou变慢/vi的/ude1趋势/gi了/ule，/w这个/rz时候/n首先/d查看/gi数据库/gi，/w压力/n一切正常/i，/w之后/f查看/giwebserver/gi，/w发现/vapache/gi阻塞/vn了/ule很/d多/a的/ude1请求/gi，/w而/cc应用服务器/gi对/p每个/r请求/gi也/d是/vshi比较/gi快/a的/ude1，/w看来/v /x是/vshi请求/gi数/n太高/d导致/gi需要/v排队/gi等待/gi，/w响应速度/nz变慢/vi特征/gi：/w多/a台/q服务器/gi通过/p负载均衡/gi同时/c向/p外部/f提供/v服务/gi，/w解决/v单台/nz服务器/gi处理/vn能力/gi和/cc存储空间/gi上限/n的/ude1问题/gi。/w描述/gi：/w使用/gi集群/gi是/vshi系统/gi解决/v高并发/gi、/w海量数据/gi问题/gi的/ude1常用/a手段/n。/w通过/p向/p集群/gi中/f追加/v资源/gi，/w提升/gi系统/gi的/ude1并发/gi处理/vn能力/gi，/w使得/vi服务器/gi的/ude1负载/gi压力/n不再/d成为/v整个/b系统/gi的/ude1瓶颈/gi。/w5./nz /x系统架构/gi演化/gi历程-数据库/nz读写/gi分离/vi享受/v了/ule一段时间/nz的/ude1系统/gi访问量/nz高速/b增长/gi的/ude1幸福/a后/f，/w发现/v系统/gi又/d开始/v变慢/vi了/ule，/w这次/r又是/c什么/ry状况/n呢/y，/w经过/p查找/gi，/w发现/v数据库/gi写入/gi、/w更新/gi的/ude1这些/rz操作/gi的/ude1部分/n数据库/gi连接/gi的/ude1资源/gi竞争/vn非常/d激烈/a，/w导致/gi了/ule系统/gi变慢/vi特征/gi：/w多/a台/q服务器/gi通过/p负载均衡/gi同时/c向/p外部/f提供/v服务/gi，/w解决/v单台/nz服务器/gi处理/vn能力/gi和/cc存储空间/gi上限/n的/ude1问题/gi。/w描述/gi：/w使用/gi集群/gi是/vshi系统/gi解决/v高并发/gi、/w海量数据/gi问题/gi的/ude1常用/a手段/n。/w通过/p向/p集群/gi中/f追加/v资源/gi，/w使得/vi服务器/gi的/ude1负载/gi压力/n不在/v成为/v整个/b系统/gi的/ude1瓶颈/gi。/w6./nz /x系统架构/gi演化/gi历程-反向/nz代理/gi和/cccdn/gi加速/gi特征/gi：/w采用/vcdn/gi和/cc反向代理/gi加快/v系统/gi的/ude1 /x访问速度/n。/w描述/gi：/w为了/p应付/v复杂/a的/ude1网络/gi环境/n和/cc不同/a地区/n用户/gi的/ude1访问/gi，/w通过/pcdn/gi和/cc反向代理/gi加快/v用户/gi访问/gi的/ude1速度/n，/w同时/c减轻/v后端/f服务器/gi的/ude1负载/gi压力/n。/wcdn/gi与/cc反向代理/gi的/ude1基本原理/nz都/d是/vshi缓存/gi。/w7./nz /x系统架构/gi演化/gi历程-分布式/nz文件系统/gi和/cc分布式数据库/gi随着/p系统/gi的/ude1不断/d运行/gi，/w数据量/n开始/v大幅度/d增长/gi，/w这个/rz时候/n发现/v分库/gi后/f查询/gi仍然/d会/v有些/rz慢/a，/w于是/cc按照/p分库/gi的/ude1思想/gi开始/v做/v分表/n的/ude1工作/gi特征/gi：/w数据库/gi采用/v分布式数据库/gi，/w文件系统/gi采用/v分布式文件系统/nz。/w描述/gi：/w任何/rz强大/a的/ude1单一/gi服务器/gi都/d满足/v不了/v大型/b系统/gi持续增长/v的/ude1业务/gi需求/gi，/w数据库/gi读写/gi分离/vi随着/p业务/gi的/ude1发展/gi最终/d也/d将/d无法/v满足/v需求/gi，/w需要/v使用/gi分布式数据库/gi及/cc分布式文件系统/nz来/vf支撑/v。/w分布式数据库/gi是/vshi系统/gi数据库/gi拆分/gi的/ude1最后/f方法/gi，/w只有/c在/p单表/nz数据/gi规模/gi非常/d庞大/a的/ude1时候/n才/d使用/gi，/w更/d常用/a的/ude1数据库/gi拆分/gi手段/n是/vshi业务/gi分库/gi，/w将/d不同/a的/ude1业务/gi数据库/gi部署/gi在/p不同/a的/ude1物理/n服务器/gi上/f。/w8./nz /x系统架构/gi演化/gi历程-使用/nznosql/gi和/cc搜索引擎/gi特征/gi：/w系统/gi引入/vnosql数据库/gi及/cc搜索引擎/gi。/w描述/gi：/w随着/p业务/gi越来越/d复杂/a，/w对/p数据存储/gi和/cc检索/gi的/ude1需求/gi也/d越来越/d复杂/a，/w系统/gi需要/v采用/v一/nz些/q非关系型数据库/gi如/vnosql/gi和/cc分数据库/nz查询/gi技术/gi如/v搜索引擎/gi。/w应用服务器/gi通过/p统一/vn数据/gi访问/gi模块/gi访问/gi各种/rz数据/gi，/w减轻/v应用程序/nz管理/gi诸多/m数据源/gi的/ude1麻烦/an。/w9./nz /x系统架构/gi演化/gi历程-业务/nz拆分/gi特征/gi：/w系统/gi上/f按照/p业务/gi进行/vn拆分/gi改造/vn，/w应用服务器/gi按照/p业务/gi区分/v进行/vn分别/d部署/gi。/w描述/gi：/w为了/p应对/v日益/d复杂/a的/ude1业务/gi场景/gi，/w通常/d使用/gi分而治之/nz的/ude1手段/n将/d整个/b系统/gi业务/gi分成/vi不同/a的/ude1产品线/nz，/w应用/gi之间/f通过/p超链接/gi建立/gi关系/gi，/w也/d可以/v通过/p消息队列/gi进行/vn数据/gi分发/v，/w当然/d更多/ad的/ude1还是/c通过/p访问/gi同一个/b数据存储/gi系统/gi来/vf构成/v一个/mq关联/vn的/ude1完整/a系统/gi。/w纵向/n拆分/gi：/w将/d一个/mq大/a应用/gi拆分/gi为/p多/a个/q小/a应用/gi，/w如果/c新/a业务/gi较为/d独立/a，/w那么/c就/d直接/ad将/d其/rz设计/gi部署/gi为/p一个/mq独立/a的/ude1web应用/gi系统/gi纵向/n拆分/gi相对/d较为简单/z，/w通过/p梳理/v业务/gi，/w将/d较少/ad相关/vn的/ude1业务/gi剥离/vi即可/v。/w横向/n拆分/gi：/w将/d复用/gi的/ude1业务/gi拆分/gi出来/vf，/w独立/a部署/gi为/p分布式服务/n，/w新增/v业务/gi只/d需要/v调用/gi这些/rz分布式服务/n横向/n拆分/gi需要/v识别/gi可/v复用/gi的/ude1业务/gi，/w设计/gi服务/gi接口/gi，/w规范/gi服务/gi依赖/v关系/gi。/w10./nz /x系统架构/gi演化/gi历程-分布式/nz服务/gi特征/gi：/w公共/b的/ude1应用/gi模块/gi被/pbei提取/v出来/vf，/w部署/gi在/p分布式/gi服务器/gi上供/v应用服务器/gi调用/gi。/w描述/gi：/w随着/p业务/gi越/d拆/v越/d小/a，/w应用系统/gi整体/n复杂程度/n呈/v指数级/nz上升/vi，/w由于/p所有/b应用/gi要/v和/cc所有/b数据库系统/gi连接/gi，/w最终/d导致/gi数据库/gi连接/gi资源/gi不足/an，/w拒绝服务/l。/wq/nz：/w分布式服务/n应用/gi会/v面临/v哪些/ry问题/gi？/w(/nz1/nz)/nz /x当/p服务/gi越来越/d多/a时/qt，/w服务/giurl/gi配置管理/gi变得/vi非常/d困难/an，/wf/nz5/nz硬件/gi负载/gi均衡器/gi的/ude1单点/n压力/n也/d越来越/d大/a。/w(/nz2/nz)/nz /x当/p进一步/d发展/gi，/w服务/gi间/f依赖/v关系/gi变得/vi错踪/nz复杂/a，/w甚至/d分不清/l哪个/ry应用/gi要/v在/p哪个/ry应用/gi之前/f启动/gi，/w架构师/gi都/d不能/v完整/a的/ude1描述/gi应用/gi的/ude1架构/gi关系/gi。/w(/nz3/nz)/nz /x接着/c，/w服务/gi的/ude1调用量/nz越来越/d大/a，/w服务/gi的/ude1容量/gi问题/gi就/d暴露/v出来/vf，/w这个/rz服务/gi需要/v多少/ry机器/gi支撑/v？/w什么/ry时候/n该/rz加/v机器/gi？/w(/nz4/nz)/nz /x服务/gi多/a了/ule，/w沟通/gi成本/n也/d开始/v上升/vi，/w调/v某个/rz服务/gi失败/vi该/rz找谁/nz？/w服务/gi的/ude1参数/gi都/d有/vyou什么/ry约定/v？/w(/nz5/nz)/nz /x一个/mq服务/gi有/vyou多/a个/q业务/gi消费者/n，/w如何/ryv确保/v服务质量/gi？/w(/nz6/nz)/nz /x随着/p服务/gi的/ude1不停/v升级/vi，/w总/b有些/rz意想不到/vl的/ude1事/n发生/v，/w比如/vcache/gi写错/nz了/ule导致/gi内存/gi溢出/gi，/w故障/gi不可避免/vl，/w每次/r核心/n服务/gi一/nz挂/v，/w影响/gi一大片/nz，/w人心/n慌慌/nz，/w如何/ryv控制/vn故障/gi的/ude1影响面/n？/w服务/gi是否/v可以/v功能/gi降级/vi？/w或者/c资源/gi劣化/nz？/w这个/rz好像/v是/vshi开篇/n的/ude1内容/gi，/w不过/c作者/nnt总结/gi得/ude3不错/a，/w我/rr就/d转载/v一下/m吧/y。/w4./nz /x产品线/nz的/ude1架构/gi还有/v一种/nz就是/v上面/f也/d有/vyou提到/v的/ude1业务/gi拆分/gi。/w现在/t我们/rr需要/v做/v一个/mq产品线/nz，/w我们/rr只/d需要/v一个/mq数据层/nz，/w一个/mq通用/gi业务/gi逻辑层/nz，/w前面/f还有/v各种/rz应用/gi和/cc界面/gi层/gi,/nz不/d需要/v对外部/nis系统/gi(/nz外部/f公司/nis的/ude1系统/gi)/nz提供/v服务/gi的/ude1情况/n以前/f我们/rr一般/ad会/v选择/gi用/pejb/nz等/udeng来/vf构建/gi分布式应用/gi，/w但是/c现在/t我们/rr可以/v使用/gidobbo/nz、/wthrift/nz、/wavro/nz、/whessian/nz这类/rrpc/nz框架/gi来/vf构建/gi分布式应用/gi实现/gi不同/a应用/gi和/cc数据/gi来源/gi的/ude1交互/gi。/w这种/r结构/gi模式/gi下/f我们/rr需要/v对/p其他/rzv公司/nis提供/v服务/gi，/w可以/v专门/d写/v一个/mq应用/gi对外部/nis系统/gi提供/vrest/gi服务/gi。/w一般/ad大多/d数/n互联网服务/nz背后/f都/d要/v访问/gi十几/mq个/q甚至/d几/d百个/q内部/f服务/gi，/w它们/rr之间/f的/ude1通信/gi方式/n一般/ad都/d是/vshirpc/nz：/w就/d像/v访问/gi一个/mq远程/gi方法/gi那样/rzv，/w输入/v参数/gi后/f等待/gi返回/v结果/n。/w这/rzv对于/p构建/gi复杂/a系统/gi是/vshi最/d容易/ad理解/gi的/ude1方式/n。/w如/v下图/n的/ude1模型/gi，/w文件系统/gi，/w缓存/gi那些/rz没有/v画/v出来/vf，/w大家/rr理解/gi就/d行/ng。/w