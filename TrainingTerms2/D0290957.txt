#算法/gi练习/v：/w两/nz数/n之/uzhi和/cc
题目/gi：/w给定/gi一个/mq整型/nz数组/gi，/w是否/v能/v找出/v两/nz个/q数/n使/v其/rz和/cc为/p指定/v的/ude1某个/rz？/w注/v：/w整型/nz数组/gi中/f不存在/ns相同/a的/ude1数/n。/w一/nz、/w解题/gi方法/gi1/nz、/w暴力/n破解法/nz(/nz时间复杂度/gio/nz(/nzn/nz^/nz2/nz)/nz)/nz这/rzv是/vshi最/d容易/ad想到/v的/ude1一种/nz方法/gi，/w即使/c用/p两层/nz循环/gi，/w从/p数/n组里/q取出/v一/nz个数/n，/w然后/c在/p此/rzs数/n之后/f部分/n找出/v另外/c一个数/nz，/w计算/gi两/nz数/n之/uzhi和/cc，/w判断/gi是否/v等于/v指定/v。/w如下/vi：/w此种/r方法/gi的/ude1的/ude1时间复杂度/gi为/po/nz(/nzn/nz^/nz2/nz)/nz，/w那么/c能否/v降低/v此/rzs复杂度/gi呢/y？/w答案/gi是/vshi可以/v的/ude1，/w请/v看/v第二种/nz方法/gi。/w2/nz、/w排序/gi加/v首尾/n指针/gi（/w时间复杂度/gio/nz(/nznlogn/gi)/nz）/w先/d对数/gi组/n进行/vn从小到大/nz的/ude1排序/gi，/w然后/c设置/gi首尾/n指针/gi，/w从/p首尾两端/nz开始/v移动/vn，/w一次/nz移动/vn一端/n的/ude1指针/gi，/w直至/v两/nz指针/gi相遇/gi或者/c两/nz指针/gi指向/v的/ude1数/n的/ude1和/cc为/p指定/v的/ude1。/w假设/gi两/nz指针/gi为/pi/nz，/wj/nz，/w其中/rzij/nz，/w如果/ca/nz[/nzi/nz]/nz、/wa/nz[/nzj/nz]/nz之/uzhi和/cc大于/v指定/v，/w那么/c要/v找/v的/ude1两/nz个/q数/n一定/b在/pj/nz的/ude1左侧/f，/w如果/ca/nz[/nzi/nz]/nz、/wa/nz[/nzj/nz]/nz之/uzhi和/cc小于/v指定/v，/w那么/c要/v找/v的/ude1两/nz个/q数/n一定/b在/pi/nz的/ude1右侧/f。/w可用/v反证/v法/n证明/v此/rzs结论/gi的/ude1正确性/gi，/w证明/v略/d。/w此种/r算法/gi中/f，/w一/nz开始/v有/vyou一个/mq排序/gi，/w最好/d的/ude1排序/gi的/ude1时间复杂度/gi可为/co/nz(/nznlogn/gi)/nz，/w比如/v堆排序/gi、/w归并排序/gi、/w快速排序/gi。/wwhile/nz循环/gi至多/d扫描/gi一/nz遍数/n组/n，/w所以/c其/rz时间表/n复杂度/gi为/po/nz(/nzn/nz)/nz。/w由此/d可得/v，/w最终/d的/ude1时间复杂度/gi为/po/nz(/nznlogn/gi)/nz。/w那么/c能否/v再/d降低/v时间复杂度/gi呢/y？/w答案/gi还是/c可以/v的/ude1，/w但是/c这时/rzt需要/v一个/mq额外/b的/ude1存储空间/gi，/w请/v看/v第三种/nz方法/gi。/w3/nz、/w利用/v哈希表/nz（/w时间复杂度/gio/nz(/nzn/nz)/nz）/w将/d复杂度/gi为/po/nz(/nznlogn/gi)/nz降低/v至/po/nz(/nzn/nz)/nz，/w首先/d想到/v的/ude1是/vshi哈希表/nz，/w因为/c哈希表/nz的/ude1查找时间/l复杂度/gi为/po/nz(/nzn/nz)/nz。/w扫描/gi一/nz遍数/n组/n，/w将/d其/rz数组/gi各个/rz保存/gi至/p哈希表/nz中/f，/w比如/v键/n：/w数/n组--索引/nz。/w然后/c再次/d开始/v从头/d扫描/gi数组/gi，/w检查/gi指定/v与/cc当前/t的/ude1差/a是否/v在/p哈希表/nz中/f（/w特殊/a情况/n：/w如果/c遇到/v差/a为/p当前/t时/qt，/w那么/c不应/v返回/v，/w因为/c数组/gi中的/v是/vshi不/d相同/a的/ude1）/w。/w程序代码/nz实现/gi说明/v：/w程序/gi中/f使用/gic/nz标准/gi库/n中的/vset/nz代替/v哈希表/nz，/w因为/c标准/gi库/n中/f还/d未/d收录/v哈希表/nz相关/vn部分/n。/w此处/s若/c需要/v两/nz数/n的/ude1索引/gi信息/gi，/w可以/v考虑/v使用/gimap/nz。/w因为/cset/nz、/wmap/nz内部/f使用/gi的/ude1是/vshi红黑树/gi数据结构/gi，/w查找/gi效率高/nz，/w具体/a的/ude1复杂度/gi，/w我/rr还/d没/d好好/d研究/gi，/w呵呵/e。/w希望/v此处/s用/pset/nz代替/v哈希表/nz，/w不要/d引起/v误会/vn，/w姑且/d将/d它/rr理解/gi为/p查找/gi复杂度/gi为/p常数/n时间/gi的/ude1东西/n吧/y。/w此种/r算法/gi中/f，/w哈希表/nz的/ude1查找/gi是/vshi常数/n时间/gi，/w所以/c时间复杂度/gi为/po/nz（/wn/nz）/w，/w空间/n复杂度/gi为/po/nz（/wn/nz）/w，/w即/v数组/gi大小/no/nz（/wn/nz）/w。/w二/nz、/w扩展/gi问题/gi如果/c要/v返回/v其中/rz所有/b的/ude1可能/v或者/c数组/gi里面/f存在/v相同/a的/ude1数/n，/w那么/c应当/v怎么/ryv解决/v呢/y？/w相信/v有/vyou了/ule以上/f的/ude1知识/gi，/w这个/rz解决/v起来/vf也/d不难/d。/w一个/mq是/vshi开辟/v一个/mq保存/gi结果/n的/ude1数组/gi，/w搜索/gi完整/a个数/n组/n空间/n；/w另外/c一个/mq无非/d就是/v让/v哈希表/nz中/f多/a存放点/n数据/gi。/w系列/n文章/gi说明/v:/w1./nz本/rz系列/n文章/gi[/nz算法/gi练习/v]/nz,/nz仅仅/d是/vshi本人/rr学习/gi过程/gi的/ude1一个/mq记录/gi以及/cc自我/rr激励/vn,/nz没有/v什么/ry说教/vn的/ude1意思/n。/w如果/c能/v给/p读者/n带来/v些/q许/v知识/gi及/cc感悟/gi，/w那/rzv是/vshi我/rr的/ude1荣幸/a。/w2./nz本/rz系列/n文章/gi是/vshi本人/rr学习/gi陈东锋/nz老师/gi《/w进军/v硅谷/ns，/w程序员/gi面试/gi揭秘/v》/w一/nz书/gi而/cc写/v的/ude1一/nz些/q心得体会/nz，/w文章/gi大多/d数/n观点/gi均/d来自/v此书/r，/w特此说明/l！/w3./nz文章/gi之中/f,/nz难免/v有/vyou诸/rz多/a的/ude1错误/gi与/cc不足/an,/nz欢迎/v读者/n批评指正/nz,/nz谢谢/v./nz作者/nnt：/w山丘/n儿/ng转载/v请/v标明/v出处/n，/w谢谢/v。/w原文/n地址/gi：/w