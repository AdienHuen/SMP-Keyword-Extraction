#大话/n设计模式/nz(/nz一/nz)/nz工厂模式/gi
大话/n设计模式/nz(/nz一/nz)/nz工厂模式/gi   /x今天/t主要/b讲解/gi简单工厂模式/gi即/v静态/gi工厂设计模式/gi与/cc工厂模式/gi即/v抽象/gi模式/gi。/w   /x其中/rz，/w简单工厂模式/gi属于/v类/gi的/ude1创建型模式/gi,/nz又/d叫做/v静态/gi工厂方法模式/gi。/w通过/p专门/d定义/gi一个/mq类/gi来/vf负责/v创建/gi其他/rzv类/gi的/ude1实例/gi，/w被/pbei创建/gi的/ude1实例/gi通常/d都/d具有/v共同/d的/ude1父类/nz。/w简单工厂模式/gi包含/v的/ude1角色/gi及其/cc职责/gi   /x1./nz工厂/gi（/wcreator/nz）/w角色/gi /x简单工厂模式/gi的/ude1核心/n，/w它/rr负责/v实现/gi创建/gi所有/b实例/gi的/ude1内部/f逻辑/n。/w工厂/gi类/gi可以/v被/pbei外界/n直接/ad调用/gi，/w创建/gi所需/nz的/ude1产品/gi对象/gi。/w   /x2./nz抽象/gi（/wproduct/nz）/w角色/gi /x简单工厂模式/gi所/usuo创建/gi的/ude1所有/b对象/gi的/ude1父类/nz，/w它/rr负责/v描述/gi所有/b实例/gi所/usuo共有/v的/ude1公共/b接口/gi。/w   /x3./nz具体/a产品/gi（/wconcrete product/nz）/w角色/gi /x简单工厂模式/gi所/usuo创建/gi的/ude1具体/a实例/gi对象/gi。/w优缺点/gi   /x在/p这个/rz模式/gi中/f，/w工厂/gi类/gi是/vshi整个/b模式/gi的/ude1关键所在/n。/w它/rr包含/v必要/a的/ude1判断/gi逻辑/n，/w能够/v根据/p外界/n给定/gi的/ude1信息/gi，/w决定/v究竟/d应该/v创建/gi哪个/ry具体/a类/gi对象/gi。/w   /x用户/gi在/p使用/gi时/qt可以/v直接/ad根据/p工厂/gi类/gi去/vf创建/gi所需/nz的/ude1实例/gi，/w而/cc无需/v了解/v这些/rz对象/gi是/vshi如何/ryv创建/gi以及/cc如何/ryv组织/gi的/ude1。/w有利于/v整个/b软件体系结构/gi的/ude1优化/gi。/w   /x不难/d发现/v，/w简单工厂模式/gi的/ude1缺点/gi也/d正/d体现/v在/p其/rz工厂/gi类/gi上/f，/w由于/p工厂/gi类/gi集中/v了/ule所有/b实例/gi的/ude1创建/gi逻辑/n，/w所以/c“/w高/a内/f聚”/nz方面/n做/v的/ude1并/cc不好/a。/w   /x另外/c，/w当/p系统/gi中的/v具体/a产品/gi类/gi不断/d增多/v时/qt，/w可能会/nz出现/v要求/n工厂/gi类/gi也/d要/v做/v相应/vi的/ude1修改/gi，/w扩展性/n并不/d很好/ad。/w /x示例/gi图/gi如/v图/gi1/nz-/nz1/nz所示/nz：/w      /x工厂方法模式/gi同样/d属于/v类/gi的/ude1创建型模式/gi又/d被/pbei称为/v多态/gi工厂模式/gi /x、/w抽象工厂模式/gi。/w工厂方法模式/gi的/ude1意义/n是/vshi定义/gi一个/mq创建/gi产品/gi对象/gi的/ude1工厂/gi接口/gi，/w将/d实际/n创建/gi工作/gi推迟/v到/v子类/gm当中/f。/w心/n工厂/gi类/gi不再/d负责/v产品/gi的/ude1创建/gi，/w这样/rzv核心/n类/gi成为/v一个/mq抽象工厂/gi角色/gi，/w仅/d负责/v具体/a工厂子/nz类/gi必须/d实现/gi的/ude1接口/gi，/w这样/rzv进一步/d抽象化/nz的/ude1好处/gi是/vshi使得/vi工厂方法模式/gi可以/v使/v系统/gi在/p不/d修改/gi具体/a工厂/gi角色/gi的/ude1情况下/nz引进/v新的/a产品/gi。/w抽象工厂模式/gi包含/v的/ude1角色/gi及其/cc职责/gi      /x1./nz抽象工厂/gi（/wcreator/nz）/w角色/gi /x:/w工厂方法模式/gi的/ude1核心/n，/w任何/rz工厂/gi类/gi都/d必须/d实现/gi这个/rz接口/gi。/w      /x2./nz具体/a工厂/gi（/w concrete creator/nz）/w角色/gi /x:/w具体/a工厂/gi类/gi是/vshi抽象工厂/gi的/ude1一个/mq实现/gi，/w负责/v实例化/gi产品/gi对象/gi。/w      /x3./nz抽象/gi（/wproduct/nz）/w角色/gi /x:/w工厂方法模式/gi所/usuo创建/gi的/ude1所有/b对象/gi的/ude1父类/nz，/w它/rr负责/v描述/gi所有/b实例/gi所/usuo共有/v的/ude1公共/b接口/gi。/w      /x4./nz具体/a产品/gi（/wconcrete product/nz）/w角色/gi /x工厂方法模式/gi所/usuo创建/gi的/ude1具体/a实例/gi对象/gi。/w工厂方法模式/gi和/cc简单工厂模式/gi比较/gi      /x工厂方法模式/gi与/cc简单工厂模式/gi在结构上/l的/ude1不同/a不是/c很/d明显/a。/w工厂方法/gi类/gi的/ude1核心/n是/vshi一个/mq抽象工厂/gi类/gi，/w而/cc简单工厂模式/gi把/pba核心/n放在/v一个/mq具体/a类/gi上/f。/w     /x工厂方法模式/gi之所以/c有/vyou一/nz个别/a名叫/v多态性/gb工厂模式/gi是因为/c具体/a工厂/gi类/gi都/d有/vyou共同/d的/ude1接口/gi，/w或者/c有/vyou共同/d的/ude1抽象/gi父类/nz。/w /x当/p系统/gi扩展/gi需要/v添加/gi新的/a产品/gi对象/gi时/qt，/w      /x仅仅/d需要/v添加/gi一个/mq具体/a对象/gi以及/cc一个/mq具体/a工厂/gi对象/gi，/w原有/v工厂/gi对象/gi不/d需要/v进行/vn任何/rz修改/gi，/w也/d不/d需要/v修改/gi客户端/gi，/w很好/ad的/ude1符合/v了/ule“/w开放/gi－/w封闭/gi”/w原则/gi(/nzocp/nz)/nz。/w      /x而/cc简单工厂模式/gi在/p添加/gi新产品/nz对象/gi后/f不得不/d修改/gi工厂方法/gi，/w扩展性/n不好/a，/w不/d满足/vocp/nz原则/gi。/w /x工厂方法模式/gi退化/vi后/f可以/v演变成/v简单工厂模式/gi。/w示例/gi图/gi如/v图/gi1/nz-/nz2/nz所示/nz2./nz美文/n美图/nz