#浅谈/gi如何/ryv辨别/gi程序员/gi的/ude1水平高低/gi
技术/gi差/a是/vshi什么样/ryv的/ude1体验/v?/nz在/p这里/rzs仅/d了解/v下/f如何/ryv辨别/gi程序员/gi的/ude1几种/nz方法/gi。/w1/nz、/w如果/c可以/v的话/udh，/w直接/ad给/p他/rr安排/v个/qdebug/gi任务/gi。/w看/v他/rr是/vshi怎么/ryv面对/v大量/m复杂/a的/ude1代码/gi，/w层层/q缩小/v范围/n，/w最终/d定位/gi根本/a愿意/v，/w并且/c给出/v修补/v解决方案/gi。/w看/v是/vshi直接/ad独立/a完成/v，/w还是/c稍带/nz提醒/v，/w或/c是/vshi不断/d提醒/v，/w还是/c无法/v得到/v任何/rz结果/n。/w2/nz、/w在/p提问/gi问题/gi上/f，/w尽量/d提问/gi灵活/a问题/gi，/w开发性/n问题/gi，/w看/v他/rr的/ude1解决/v思路/gi。/w3/nz、/w在/p提问/gi方式/n上/f，/w可以/v不断/d的/ude1提问/gi，/w不断/d的/ude1设问/nz，/w反问/v。/w在/p项目/gi整体/n实现/gi上/f，/w在/p具体/a细节/gi上/f，/w在/p完成/v某个/rz功能/gi上/f可能/v遇到/v哪些/ryapi/gi?/nz为什么/ryv要用/v这个/rzapi/gi?/nz采用/v什么样/ryv的/ude1设计模式/nz?/nz后台/gi数据库/gi怎么/ryv设计/gi?/nz如何/ryv维护/gi，/w代码/gi上/f如何/ryv做到/v模块化/gi，/w低/a耦合/vn?/nz....../w4/nz、/w如果/c自己/rr是/vshi项目/gi负责人/nnt或/c对/p算法/gi比较/gi精通/v，/w可以/v问及/v相关/vn算法/gi。/w算法/gi是/vshi程序/gi非常/d重要/a的/ude1一个/mq层面/n。/w5/nz、/w不妨/d看看/v写/v的/ude1代码/gi吧/y!/nz写/v的/ude1代码/gi质量/gi怎么样/ryv，/w命名/v是否/v规范/gi，/w目录/gi是否/v规范/gi，/w结构/gi是否/v清晰/a等/udeng。/w6/nz、/w如果/c可以/v的话/udh，/w还/d可以/v看看/v他/rr的/ude1团队/gi协作/gi能力/gi，/w续航/vn能力/gi，/w抗压/nz能力/gi等等/udeng。/w注/v：/w以上/f为/p个人/n经验/gi仅供/nz参考/gi，/w不具备/v代表/nnt辨别/gi程序员/gi水平高低/gi依据/n。/w