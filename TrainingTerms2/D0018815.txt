#网站/gi静态/gi化/v处理/vn―/wweb前端/gi优化/gi―/w下/f【/w终篇/nz】/w
本篇/r继续/vweb前端/gi优化/gi的/ude1讨论/gi，/w开始/v我/rr先/d讲/v个/q我/rr所/usuo知道/v的/ude1一个/mq故事/gi，/w有/vyou家/q大型/b的/ude1企业/gi顺应时代/n发展/gi的/ude1潮流/n开始/v投身于/v互联网/gi行业/gi了/ule，/w它们/rr为此/bl专门/d设立/v了/ule一个/mq事业部/nis，/w不过/c该/rz企业/gi把/pba这个/rz事业部/nis里/f的/ude1人事/n成本/n，/w系统运维/gi成本/n特别/d是/vshi硬件/gi采购/vn的/ude1成本/n都/d由/p总公司/nis来/vf承担/v，/w当然/d互联网/gi业务/gi上/f的/ude1市场营销/nz成本/n这块/r还是/c由/p该/rz事业部/nis自己/rr承担/v，/w可是/c网站/gi一年/nz运维/gi下来/vf，/w该/rz公司/nis发现/v该/rz事业部/nis里/f最大/gm的/ude1成本/n居然/d不是/c市场营销/nz的/ude1开销/n，/w而是/c短信/n业务/gi和/cc宽带/n使用/gi上/f的/ude1开销/n，/w是不是/v有点/d让/v人/n感到/v意外/a呢/y？/w下面/f我/rr来/vf分析/gi下/f这个/rz场景/gi吧/y。/w　　/nz短信/n这块/r是/vshi和/cc通讯/gi运营商/gi有关/vn，/w很难/d从根本上/nz解决/v，/w当然/d该/rz企业/gi可以/v考虑/v使用/gi像/v微信/gi这样/rzv的/ude1工具/gi来/vf分摊/v下/f短信/n的/ude1成本/n，/w但是/c宽带/n流量/gi消耗/gi这个/rz问题/gi却/d很难/d有/vyou第二/mq选择/gi了/ule，/w可能/v有人/r会/v感到/v诧异/a，/w一家/n做/v互联网/gi的/ude1企业/gi，/w用户/gi都/d是/vshi使用/gi自己/rr掏钱/vi的/ude1宽/a带来/v上网/v的/ude1，/w为啥/r企业/gi会/v有/vyou宽带/n流量/gi的/ude1成本/n呢/y？/w其实/d互联网/gi公司/nis的/ude1后台/gi服务/gi都/d是/vshi会/v放置/gi在/pidc/gi即/v数据中心/gi里/f的/ude1，/w除非/c你/rr的/ude1企业/gi是/vshi真正/d的/ude1高富帅/nr，/w或者/c你/rr本身/rz的/ude1核心业务/gi就是/v互联网/gi业务/gi，/w这样/rzv的/ude1企业/gi才/d有可能会/nz自建/l数据中心/gi，/w绝大/nz部分/n企业/gi都会/n租用/v第三方/nz的/ude1数据中心/gi，/w而且/c有些/rz企业/gi为了/p容灾/gi还/d会/v在/p不同/a地域/n建立/gi不同/a的/ude1数据中心/gi，/w不同/a数据中心/gi之间/f是/vshi通过/p专线/n来/vf通讯/gi的/ude1，/w而/cc专线/n的/ude1成本/n是/vshi很高/d的/ude1，/w我们/rr想/v让/v自己/rr开发/gi的/ude1网站/gi让/v更多/ad人/n用/p，/w可以/v通过/p改造/vn服务端/nz并发/gi处理/vn能力/gi来/vf达到/v这个/rz目的/gi，/w但是/c这里/rzs还有/v一个/mq制约因素/gi，/w那/rzv就是/v服务端/nz使用/gi的/ude1带宽/n，/w一般而言/vl，/w企业/gi选择/gi多/a大/a带宽/n是/vshi可以/v估算/v出来/vf，/w最终/d采用/v一个/mq合理/a的/ude1带宽/n，/w但是/c，/w如果/c这家/r公司/nis是/vshi电商/gi类型/gi网站/gi，/w就/d很/d有可能/nz碰到/v像/v双十一/nz啊/y，/w或者/c自身/rr做/v大/a促销/vn的/ude1情况/n，/w这个/rz时候/n服务端/nz的/ude1负载/gi压力/n就/d会/v成倍/d增加/v，/w远远/d超出/v平时/t的/ude1网络流量/nz，/w如是/c企业/gi会/v提前/vd扩充/v带宽/n，/w而/cc扩充/v的/ude1带宽/n流量/gi是/vshi昂贵/a的/ude1，/w这样/rzv就/d会/v无形/b增加/v网站运营/gi成本/n。/w如果/c我们/rr不/d去/vf思考/gi成本/n问题/gi，/w当今社会/nz讲求/v环保/n，/w例如/v淘宝/n就/d说/v它们/rr网站/gi没/d完成/v一次/nz交易/gi使用/gi的/ude1电量/n可以/v煮熟/v两/nz个/q鸡蛋/nf，/w它们/rr网站/gi一天/nz下来/vf消耗/gi的/ude1电量/n相当于/v中国/gi一个/mq三线/n城市/gi一/nz天/qt消耗/gi的/ude1电量/n，/w那么/c如果/c我们/rr能/v节约/v每次/r请求/gi消耗/gi的/ude1宽带/n流量/gi其实/d也/d就是/v在/p节约能源/nz，/w所以/c不管/c是从/v成本/n角度/n还是/c从/p环保/n角度/n提高/v宽带/n的/ude1利用率/n都/d是/vshi有/vyou很大/d的/ude1现实意义/nz的/ude1。/w　　/nzweb前端/gi优化/gi里/f有/vyou一个/mq技巧/gi就是/v压缩/gihttp/gi请求/gi的/ude1数据量/n，/w这个/rz技巧/gi很/d多/a人/n都/d是/vshi简单/a认为/vhttp/gi请求/gi的/ude1数据/gi越/d小/a，/w那么/chttp/gi处理速度/n就/d更快/d些/q，/w不过/c我/rr认为/v这/rzv结论/gi其实/d是/vshi一个/mq相对/d的/ude1结论/gi，/w现在/t的/ude1网速/nz是/vshi越来越快/l，/w很/d多/a人/n家里/s接入/vn的/ude1宽带/n已经/d使用/gi上/f了/ule光纤/n，/w50/nz兆/vg，/w百兆/nz的/ude1宽带/n已经/d飞进/nz了/ule寻常/a百姓家/n了/ule，/w那么/c这时候/rzt其实/d网络/gi传输/gi100/nzkb/nz数据/gi和/cc传输/gi300/nzkb/nz数据/gi的/ude1效率/gi差异/n基本/a可以/v忽略不计/l了/ule，/w当然/d并非/v每个/r人/n网络/gi访问速度/n都/d这么/rz快/a，/w例如/v我们/rr使用/gi手机/gi的/ude12/nzg/nz网络/gi上网/v，/w那么/c100/nzkb/nz和/cc300/nzkb/nz的/ude1传输/gi效率/gi还是/c会/v有/vyou很大/d差异/n的/ude1，/w所以/c压缩/gihttp/gi请求/gi大小/n这个/rz手段/n在/p客户端/gi这块/r是/vshi一种/nz解决/v短板/nz的/ude1技巧/gi，/w这个/rz短板/nz就是/v照顾/v那些/rz上网/v速度/n太慢/d的/ude1人/n了/ule，/w而非/c对/p人人平等/nz的/ude1技术手段/n，/w但是/c这个/rz问题/gi换到/v服务端/nz就/d不同/a了/ule，/w减少/vhttp/gi报文/n的/ude1数据/gi大小/n可以/v提升/gi企业/gi对/p宽带/n的/ude1利用率/n，/w是/vshi一种/nz节约/v网站运营/gi成本/n的/ude1一个/mq重要/a手段/n，/w因此/c压缩/gihttp/gi传输数据/n的/ude1大小/n是/vshi一个/mq很/d有/vyou价/n的/ude1技术手段/n。/w　　/nz用来/v压缩/gihttp/gi请求/gi数据/gi大小/n的/ude1手段/n很/d多/a，/w例如/v使用/gigzip/nz压缩/gihttp/gi请求/gi，/w压缩/gi图片/gi等等/udeng，/w不过/c我/rr这里/rzs要/v特别/d说明/v一个/mq手段/n那/rzv就是/v减少/vcookie/gi存储/gi数据/gi的/ude1大小/n，/w这/rzv是/vshi一个/mq常常/d被忽视/l的/ude1压缩/gihttp/gi请求/gi大小/n的/ude1技术手段/n。/w不过/ccookie/gi技术/gi对/p很/d多/a初学者/gi常常/d会/v感到/v差异/n，/wcookie/gi是/vshi客户端/gi的/ude1数据/gi，/w为什么/ryv服务端/nz和/cc客户端/gi都/d能/v操作/gi它/rr，/w难道/d服务端/nz也/d会/v存储/gi一/nz份/qcookie/gi的/ude1备份/gi吗/y？/w之所以/c初学者会/nz对/pcookie/gi使用/gi有/vyou疑问/n，/w这/rzv主要/b是/vshi初学者/gi不/d太/d清楚/acookie/gi信息/gi除了/p保存/gi在/p浏览器端/nz，/w它/rr还/d会/v包含/v在/phttp/gi报/n文头/nz里/f的/ude1，/w每个/rhttp/gi请求/gi响应/v都会/n带着/vncookie/gi信息/gi进行/vn传递/v，/w所以/ccookie/gi既/c可以/v被/pbei客户端/gi操作/gi也/d能/v被/pbei服务端/nz操作/gi，/w如果/c我们/rr忽视/vcookie/gi这个/rz特点/n，/w再/d加上/v我们/rr滥用/vcookie/gi，/w最后/fcookie/gi被/pbei撑满/v了/ule，/w这/rzv也/d就/d意味/n每次/r请求/gi响应/v的/ude1数据量/n会/v增加/v，/w而/cc这些/rz信息/gi可能/v大部分/n都/d不会/v被/pbei使用/gi，/w纯粹/b多余/gi。/w而/cc网站/gi在/p开发/gi和/cc维护/gi时候/n很容易/nz不/d自觉/a的/ude1让/vcookie/gi变得/vi越来越/d多/a，/w越来越/d大/a，/w如果/c我们/rr一/nz开始/v就/d明确/acookie/gi这个/rz特点/n，/w提前/vd设计/gicookie/gi使用/gi规范/gi，/w那么/c就/d可以/v一定/b程度/n上/f规避/vcookie/gi不合理/nz使用/gi导致/gi的/ude1http/gi数据/gi量变/n大/a的/ude1问题/gi。/w如果/c网站/gi使用/gi了/ule单独/d的/ude1静态/gi资源/gi服务器/gi，/w并且/c把/pba静态/gi资源/gi放置/gi在/p单独/d的/ude1域名/gi下面/f，/w这个/rz时候/n我们/rr还要/d避免/v给/p静态/gi资源/gi域名/gi下/f使用/gicookie/gi技术/gi，/w因为/c静态/gi资源/gi基本/a都/d不会/v有/vyou状态/gi信息/gi，/w使用/gicookie/gi只/d会/v无谓/b的/ude1增加/v请求/gi的/ude1数据/gi大小/n。/w　　/nz网络/gi是/vshi存储设备/nz里/f效率/gi最差/a的/ude1，/w如果/c页面/gi加载/gi时候/n还/d有些/rz请求/gi是/vshi一个/mq坏/a请求/gi，/w例如/v页面/gi访问/gi的/ude1某些/rz静态/gi资源/gi突然/ad丢/v了/ule，/w浏览器/gi这个/rz时候/n会/v有/vyou一个/mq容错/gi的/ude1做法/n，/w这个/rz做法/n具体/a是/vshi：/w浏览器/gi不能/v确定/v有/vyou问题/gi的/ude1请求/gi到底/d是因为/c网速慢/n了/ule还是/c找/v不到/v，/w所以/c浏览器/gi会/v多/a次/qv请求/gi这个/rzurl/gi，/w直到/v浏览器/gi认为/v这个/rzurl/gi的确/d是/vshi有/vyou问题/gi无法访问/l了/ule，/w浏览器/gi才/d不/d去/vf继续/v请求/gi了/ule，/w如果/c碰到/v的/ude1资源/gi正好/z是/vshi外部/fjavascript/gi文件/gi，/w那/rzv就/d很/d有可能/nz阻塞/vn整个/b页面/gi的/ude1加载/gi，/w所以/c剔除/v页面/gi里/f的/ude1坏/a请求/gi也/d是/vshi要/v经常/d留心/v的/ude1事情/n。/w　　/nz我们/rr如果/c再进一步/l分析/gi下/fweb前端/gi优化/gi的/ude1一些/m手段/n，/w就/d会/v发现/v很/d多优化/nz手段/n其实/d都/d是/vshi基于/p静态/gi资源/gi来/vf处理/vn的/ude1，/w静态/gi资源/gi的/ude1特点/n就是/v在/p一定/b时间/gi范围内/nz不会/v发生变化/l的/ude1，/w而且/c当/p用户/gi请求/gi静态/gi资源/gi时候/n，/w服务端/nz不/d需要/v任何/rz计算/gi操作/gi即/v消耗/gicpu/gi资源/gi就/d能/v把/pba结果/n返回/v给/p客户端/gi，/w静态/gi资源/gi这种/r不/d参与/gi计算/gi的/ude1特点/n就/d可以/v让/v静态/gi资源/gi和/cc业务/gi应用服务器/gi解耦/gi，/w因此/c我们/rr可以/v把/pba静态/gi资源/gi单独/d抽取/v出来/vf放置/gi在/pcdn/gi或者/c是/vshi请求/gi效率/gi处理/vn更佳/d的/ude1静态/gi资源/gi服务器/gi上/f。/w和/cc静态/gi资源/gi相对/d的/ude1动态/gi资源/gi就/d很难/d做到/v这/rzv点/gi，/w我们/rr仔细/ad回味/v下/f网站/gi后台/gi整个/b应用架构/gi，/w就/d会/v发现/v所有/b网站/gi都会/n使用/gi存储系统/gi即/v基本/a都会/n用/p数据库/gi，/w而且/c应用服务器/gi和/cc数据库/gi又是/c一种/nz紧/d耦合/vn的/ude1关系/gi，/w因为/c我们/rr想/v消除/v存储系统/gi的/ude1状态/gi问题/gi基本/a是/vshi不/d可能/v完成/v的/ude1任务/gi，/w这/rzv就让/v应用服务器/gi没法/v做成/vcdn/gi的/ude1形式/gi，/w因此/c动态/gi资源/gi处理/vn想/v使用/gicdn/gi这种/r减少/v距离/gi对/p网络通讯/nz影响/gi的/ude1手段/n基本/a是/vshi很/d麻烦/an的/ude1。/w我/rr觉得/v网站/gi静态/gi化/v处理/vn其实/d是/vshi根据/pweb前端/gi优化/gi技术/gi产生/v的/ude1技术/gi，/w它/rr让/v网站/gi静态/gi化/v资源/gi和/cc动态/gi资源/gi分离/vi做/v的/ude1更好/d，/w所以/c我/rr说/v网站/gi静态/gi化/v技术/gi是/vshi充分发挥/nzweb前端/gi优化/gi手段/n的/ude1重要/a保证/v，/w这/rzv也/d就是/v我/rr为什么/ryv会/v把/pbaweb前端/gi优化/gi的/ude1内容/gi也/d要/v放在/v网站/gi静态/gi化/v处理/vn系列/n里/f的/ude1原因/n了/ule。/w　　/nz静态/gi资源/gi因为/c在/p一定/b时间/gi里/f不会/v发生变化/l，/w容易/ad被/pbei缓存/gi，/w而且/c浏览器/gi本身/rz也/d有/vyou缓存机制/gi，/w那么/c如果/c我们/rr把/pba静态/gi资源/gi缓/a存在/v浏览器端/nz，/w用户/gi请求/gi网站/gi就/d不/d需要/v再/d去/vf请求/gi网络/gi资源/gi，/w这个/rz效率/gi不/d就/d更高/d了/ule吗/y？/w现实情况/n的确/d是/vshi如此/rzv，/w但是/c我们/rr想/v让/v浏览器/gi端/v充分发挥/nz这个/rz缓存/gi作用/gi其实/d并非/v那么/c简单/a，/w因为/c我们/rr会/v碰到/v如下/vi的/ude1问题/gi,/nz具体/a如下/vi：/w　　/nz问题/gi一/nz：/w网站/gi对/p浏览器/gi的/ude1控制/vn是/vshi一种/nz被动/a控制/vn，/w用户/gi才/d是/vshi控制/vn浏览器/gi的/ude1主动/ad方/q，/w用户/gi的/ude1很/d多/a行为/n都会/n导致/gi网站/gi对/p浏览器/gi的/ude1缓存/gi设计/gi策略/gi失效/vi，/w如果/c缓存/gi失效/vi，/w那么/c用户/gi再/d去/vf访问/gi网站/gi时候/n就/d得/ude3重新/d请求/gi资源/gi，/w所以/c为了/p弥补/v浏览器/gi缓存/gi的/ude1不/d可靠性/gi，/wcdn/gi技术/gi以及/cc静态/gi资源/gi服务器/gi的/ude1使用/gi就/d派上用场/n了/ule。/w　　/nz问题/gi二/nz：/w浏览器/gi缓存/gi网页/gi部分/n资源/gi可以/v让/v网页/gi加载/gi的/ude1更快/d，/w但是/c要/v做到/v这一点/nz之前/f，/w我们/rr首先/d要/v明确/a何时/ryt采用/v，/w同时/c采用/v何种/r方式/n让/v客户端/gi缓存/gi这些/rz可以/v被/pbei缓存/gi的/ude1资源/gi？/w那么/c我们/rr在/p知道/v某个/rz用户/gi要/v访问/gi网站/gi了/ule，/w我们/rr提前/vd把/pba需要/v缓存/gi的/ude1资源/gi发送/gi个/q用户/gi，/w让/v用户/gi先缓/nz存下/nz这些/rz资源/gi，/w这个/rz做法/n肯定/v是/vshi开/v国际/n玩笑/n了/ule，/w一般/ad我们/rr都/d是/vshi在/p用户/gi第一次/nz访问/gi网站/gi时候/n将/d可以/v缓存/gi的/ude1资源/gi缓存/gi起来/vf，/w这个/rz时候/n问题/gi又/d来/vf了/ule，/w那/rzv就是/v用户/gi第一次/nz访问/gi网站/gi时候/n因为/c需要/v缓存/gi的/ude1资源/gi都/d没有/v被/pbei缓存/gi，/w所以/c全部/m的/ude1资源/gi都/d要/v通过/p网络/gi请求/gi下载/gi，/w这个/rz时候/n就/d会/v导致用户/n第一次/nz访问/gi网站/gi页面/gi的/ude1效率/gi很差/d，/w有人/r可能/v认为/v网站/gi又/d不是/c设计/gi为/p访问/gi一次/nz的/ude1产品/gi，/w只要/c资源/gi被/pbei缓存/gi了/ule网页/gi就/d会/v更快/d的/ude1，/w要是/c用户/gi觉得/v第一次/nz访问/gi慢/a了/ule，/w就/d先/d忍忍/nz吧/y，/w以后/f会/v快/a的/ude1，/w这个/rz想法/gi又是/c再/d开/v国际/n玩笑/n了/ule。/w就算/d用户/gi忍受/v了/ule第一次/nz访问/gi慢/a的/ude1情形/n，/w但是/c如果/c用户/gi使用/gi这个/rz网站/gi的/ude1时间/gi间隔/n是/vshi很长/d的/ude1，/w例如/v某些/rz专业性/n的/ude1网站/gi，/w它/rr的/ude1用户/gi可能会/nz很长/d一段时间/nz后/f再/d访问/gi该/rz网站/gi，/w而过/c了/ule这段/r时间/gi后/f，/w浏览器/gi缓存/gi的/ude1资源/gi很/d有可能/nz失效/vi了/ule，/w这个/rz时候/n用户/gi再/d去/vf访问/gi又/d等于/v是/vshi第一次/nz访问/gi了/ule，/w那么/c我们/rr这个/rz缓存/gi设计方案/nz基本/a就是/v无效/vi了/ule。/w　　/nz问题/gi二所/nz反映/v的/ude1问题/gi也/d就/d表明/v我们/rr在/p如何/ryv合理/a使用/gi浏览器/gi缓存/gi这块/r上/f是/vshi需要/v考虑/v用户/gi的/ude1使用场景/gi的/ude1，/w需要/v加入/v一/nz些/q业务/gi性/ng的/ude1策略/gi了/ule，/w只有/c这样/rzv浏览器/gi缓存/gi方案/gi才能/n充分发挥/nz其/rz优势/gi。/w下面/f我/rr就/d来/vf谈论/v下/f浏览器/gi端/v缓存/gi策略/gi设计/gi的/ude1问题/gi了/ule。/w　　/nz首先/d我们/rr来看/u一个/mq场景/gi，/w用户/gi第一次/nz访问/gi网站/gi，/w访问/gi的/ude1是/vshi网站/gi的/ude1首页/gi，/w我们/rr按照/pweb前端/gi优化/gi原则/gi设计/gi了/ule网站/gi首页/gi，/w特别/d是/vshi使用/gi了/ule一个/mq优化/gi原则/gi就是/v把/pbacss/nz合并/gi成/v一个/mq外部/fcss/nz文件/gi，/w把/pbajavascript/gi代码/gi也/d合并/gi成/v一个/mq外部/f文件/gi，/w首页/gi都/d引入/v了/ule这/rzv两/nz个/q外部/f文件/gi，/w这种/r情况/n首页/gi访问/gi至少/d会/v产生/v三/nz个/qhttp/gi请求/gi，/w可是/c网站/gi首页/gi其实/d没有/v那么/c复杂/a，/w也/d就是说/c首页/gi使用/gi的/ude1css/nz代码/gi和/ccjavascript/gi代码/gi其实/d并不/d太多/ad，/w如果/c我们/rr把/pba这些/rz代码/gi就/d放置/gi到/v页面/gi内部/f，/w那么/c首页/gi加载/gi就/d只有/c一个/mq请求/gi，/w虽然/c这/rzv会/v导致/gi这个/rz请求/gi的/ude1数据/gi量变/n大/a，/w不过/c按照/p我/rr前面/f说/v到/v压缩/gihttp/gi请求/gi数据/gi大小/n，/w其实/d在/p提升/gi网络/gi传输速度/nz上/f这个/rz角度/n是/vshi得/ude3商榷/vi的/ude1，/w但是/c多/a个/qhttp/gi请求/gi就/d会/v导致/gi浏览器/gi打开/gi更多/ad连接/gi，/w而/cc每个/r连接/gi的/ude1建立/gi和/cc销毁/v却是/d十分/d消耗/gi计算/gi资源/gi的/ude1，/w那么/c如果/c我们/rr能/v把/pba三个/nz请求/gi合并/gi成/v一个/mq请求/gi完成/v就/d一定会/nz让/v请求/gi处理/vn的/ude1更快/d，/w可是/c这个/rz做法/n就/d会/v导致/gicss/nz和/ccjavascript/gi文件/gi没法/v被/pbei缓存/gi，/w那么/c以后/f想/v复用/gi它们/rr就/d麻烦/an了/ule。/w碰到/v这样/rzv的/ude1问题/gi我们/rr又/d该/rz如何/ryv来/vf抉择/vn了/ule？/w最/d理想/n的/ude1结果/n就是/v二者/rzv兼顾/v，/w但是/c要/v兼顾/v二者/rzv，/w那么/c页面/gi就/d一定/b要/v处理/vn这三/nz个/qhttp/gi请求/gi了/ule，/w我们/rr到底/d能/v不能/v做到/v二者/rzv兼顾/v了/ule？/w答案/gi是/vshi肯定/v的/ude1，/w我们/rr可以/v做到/v的/ude1。/w我们/rr仔细/ad的/ude1分析/gi下/f这个/rz场景/gi，/w就/d会/v发现/v，/w快速/d加载/gi页面/gi和/cc缓存/gi静态/gi资源/gi在/p页面/gi首/q次访问/n这个/rz背景/n下/f其实/d是/vshi两/nz个/q不同/a的/ude1业务操作/gi，/w用户/gi第一次/nz访问/gi首页/gi用户/gi只/d会/v关心/v页面/gi是否/v快速/d被/pbei加载/gi，/w至于/p加载/gi静态/gi资源/gi的/ude1行为/n以及/cc缓存/gi静态/gi资源/gi的/ude1行为/n，/w用户/gi是/vshi不用/d关心/v，/w因此/c我们/rr就/d可以/v拆分/gi这/rzv两/nz个/q操作/gi，/w首先/d是/vshi让/v页面/gi快速/d被/pbei加载/gi，/w等/udeng页面/gi加载/gi完毕/vi后/f，/w我们/rr在/p通过/p异步/gi手段/n来/vf加载/gi外部/f的/ude1静态/gi资源/gi，/w这样/rzv就/d可以/v做到/v二者/rzv兼顾/v了/ule，/w至于/p如何/ryv异步/gi加载/gi静态/gi资源/gi，/w我/rr在/p以前/f的/ude1文章/gi里/f讲述/v过/uguo，/w这/rzv篇文章/n就是/v《/w》/w，/w不/d了解/v这个/rz技术/gi的/ude1朋友/n可以/v看看/v本篇/r文章/gi。/w　　/nz不过/c要/v让/v上面/f的/ude1方案/gi发挥作用/n是/vshi有/vyou一个/mq大/a的/ude1前置条件/gi的/ude1，/w那/rzv就是/v我们/rr要/v判断/gi出/vf用户/gi到底/d是不是/v第一次/nz访问/gi，/w而且/c因为/c外部/f的/ude1css/nz文件/gi和/cc外部/f的/ude1javascript/gi文件/gi都/d被/pbei我们/rr合并/gi成/v了/ule一个/mq文件/gi，/w这/rzv也/d就是说/c首页/gi里/f内嵌/v的/ude1css/nz代码/gi和/ccjavascript/gi代码/gi和/cc外部/f文件/gi是/vshi有/vyou一个/mq冗余/n的/ude1，/w如果/c用户/gi第二次/nz访问/gi时候/n不/d需要/v这些/rz操作/gi了/ule，/w那么/c让/v首页/gi保持/v这个/rz冗余/n是不是/v就/d没有/v这个/rz必要/a了/ule？/w特别/d是/vshijavascript/gi代码/gi，/w重复/gi的/ude1javascript/gi代码/gi总是/d让/v人/n觉得/v不/d放心/v。/w这/rzv两/nz个/q问题/gi的/ude1核心/n还是/c在于/v如何/ryv判断/gi用户/gi是否/v第一次/nz访问/gi，/w判断/gi用户/gi的/ude1行为/n那/rzv就是/v属于/v判断/gi用户/gi状态/gi的/ude1问题/gi了/ule，/w用户/gi的/ude1状态/gi标记/gi在/p服务端/nz使用/gi的/ude1是/vshisession/gi技术/gi，/w浏览器/gi端/v使用/gi的/ude1是/vshicookie/gi技术/gi，/w而/ccsession/gi技术/gi是/vshi一个/mq临时/gi会话/v存储技术/nz，/w因此/c使用/gisession/gi是/vshi没法/v判断/gi用户/gi以前/f是否/v访问/gi过/uguo该/rz网站/gi，/w所以/c这里/rzs只能/v使用/gicookie/gi技术/gi（/w如果/c浏览器/gi支持/vhtml5/gi，/w客户端/gi保存/gi用户/gi状态/gi的/ude1信息/gi手段/n就/d更加/d多/a了/ule，/w不一定/nz非要/b使用/gicookie/gi了/ule）/w，/w也/d就是/v当/p用户/gi第一次/nz访问/gi网站/gi时候/n，/w我们/rr将/d一/nz些/q可以/v标记/gi用户/gi是否/v访问/gi过/uguo网站/gi的/ude1状态/gi信息/gi存储/gi在/pcookie/gi里/f，/w那么/c用户/gi再次/d访问/gi这个/rz网站/gi时候/n，/whttp/gi请求/gi就/d会/v把/pbacookie/gi信息/gi传送/v给/p服务端/nz，/w服务端/nz通过/pcookie/gi信息/gi判定/gi用户/gi是否/v第一次/nz访问/gi，/w这个/rz时候/n服务端/nz可以/v剔除/v页面/gi里/f内嵌/v的/ude1css/nz代码/gi和/ccjavascript/gi代码/gi，/w同时/c可以/v阻止/v浏览器/gi再/d异步/gi加载/gi外部/fcss/nz文件/gi和/cc外部/fjavascript/gi文件/gi行为/n，/w这样/rzv用户/gi再次/d访问/gi网站/gi的/ude1行为/n也/d不会/v被/pbei用户/gi第一次/nz访问/gi行为/n干扰/gi了/ule。/w　　/nz上面/f场景/gi里/f还有/v一个/mq优化/gi手段/n的/ude1使用/gi是/vshi得/ude3商榷/vi的/ude1，/w那/rzv就是/v我们/rr把/pba网站/gi所有/b的/ude1css/nz代码/gi和/ccjavascript/gi代码/gi合并/gi到/v一个/mq文件/gi里/f。/w这里/rzs我/rr首先/d来讲/uls讲/v把/pba所有/bjavascript/gi代码/gi合并/gi成/v一个/mq文件/gi的/ude1问题/gi，/w一个/mq网站/gi会/v包含/v很/d多/a不同/a页面/gi，/w不同/a的/ude1页面/gi因为/c业务/gi场景/gi的/ude1不同/a，/w就/d会/v导致/gi每个/r页面/gi都/d有/vyou专属/b的/ude1处理/vn业务逻辑/gi的/ude1javascript/gi代码/gi，/w如果/c我们/rr简单/a的/ude1认为/v把/pbajavascript/gi代码/gi放置/gi到/v外部/f文件/gi就/d会/v让/v页面/gi加载/gi的/ude1更快/d，/w那么/c当/p我们/rr合并/gi外部/f文件/gi时候/n这些/rz和/cc页面/gi紧/d耦合/vn的/ude1业务/gi代码/gi也/d会/v合并/gi到/v一个/mq文件/gi里/f，/w最后/f就/d会/v导致/gi最终/d的/ude1外部/fjavascript/gi文件/gi变得/vi特别/d大/a，/w对于/p浏览器/gi而言/uls，/wjavascript/gi代码/gi过多/d也/d会/v影响/gi到/v页面/gi的/ude1加载/gi效率/gi和/ccjavascript/gi的/ude1执行/v效率/gi，/w而且/c这个/rz超大/b的/ude1外部/fjavascript/gi文件/gi对于/p某/rz一个/mq功能/gi页面/gi而言/uls有/vyou太多/ad冗余/n的/ude1代码/gi，/w所以/c我们/rr简单/a把/pba全部/m外部/fjavascript/gi文件/gi合并/gi成/v一个/mq外部/fjavascript/gi文件/gi这个/rz做法/n其实/d并/cc不是太好/l，/w因此/c到底/d哪些/ryjavascript/gi外部/f文件/gi应该/v被/pbei合并/gi这/rzv是/vshi有所/v选择/gi的/ude1。/w而且/c把/pba某些/rz业务/gi相关/vn的/ude1javascript/gi代码/gi就/d写/v在/p页面/gi，/w和/cc页面/gi一起/s被/pbei下载/gi可能/v比/p我们/rr单独/d使用/gi外部/f文件/gi的/ude1javascript/gi效率/gi更高/d，/w因为/c单独/d的/ude1外部/fjavascript/gi文件/gi会/v增加/v页面/gihttp/gi请求/gi的/ude1个数/n，/w那么/c我们/rr在/p开发/gi时候/n那些/rzjavascript/gi代码/gi需要/v内/f嵌入/v页面/gi，/w那些/rzjavascript/gi代码/gi要/v把/pba放在/v单独/d外部/f文件/gi里/f这/rzv也/d是/vshi我们/rr要/v注意/v的/ude1策略/gi问题/gi。/w　　/nz我们/rr毫无原则/l的/ude1把/pba外部/fcss/nz文件/gi和/ccjavascript/gi文件/gi合并/gi成少量/nz的/ude1外部/f文件/gi还/d会/v影响/gi到/v网站/gi的/ude1运维/gi和/cc浏览器/gi的/ude1缓存/gi策略/gi，/w特别/d是/vshi缓存/gi策略/gi的/ude1失效/vi机制/gi，/w例如/v网站/gi某个/rz页面/gi做/v了/ulecss/nz代码/gi或者/cjavascript/gi代码/gi的/ude1修改/gi，/w而/cc这些/rz代码/gi上/f生产/gi时候/n要/v被/pbei合并/gi到/v一个/mq外部/f的/ude1css/nz文件/gi和/ccjavascript/gi文件/gi里/f，/w而/cc这些/rz外部/f文件/gi又/d被/pbei很/d多/a网页/gi引用/gi，/w那么/c我们/rr就/d不得不/d让/v很/d多/a无关/v的/ude1网页/gi也/d需要/v刷新/v浏览器/gi缓存/gi，/w如果/c这个/rz修改/gi是/vshi作用于/v公共/b代码/gi这个/rz问题/gi还好/v理解/gi，/w要是/c这个/rz代码/gi是/vshi用于/v营销/gi活动/gi这个/rz特定/b场景/gi下/f，/w那么/c这样/rzv的/ude1刷新/v缓存/gi操作/gi就/d会/v显得/v非常/d没有/v必要/a，/w如果/c有/vyou天/qt营销/gi活动/gi结束/v了/ule，/w我们/rr是不是/v还要/d再/d刷新/v下/f缓存/gi，/w剔除/v多余/gi的/ude1代码/gi呢/y？/w所以/c如何/ryv合并/gi外部/f的/ude1css/nz代码/gi和/ccjavascript/gi代码/gi我们/rr还是/c要/v应该/v根据/p业务/gi场景/gi进行/vn合理/a的/ude1分组/gi的/ude1。/w　　/nzweb前端/gi的/ude1工作/gi是/vshi十分/d繁重/a的/ude1，/w网站/gi是/vshi和/cc终端用户/gi打交道/vi，/w这些/rz终端用户/gi都/d是/vshi网站/gi的/ude1需求方/n，/w而/ccweb前端/gi是/vshi处理/vn终端用户/gi需求/gi的/ude1排头兵/n，/w用户/gi那么/c多/a，/w需求/gi那么/c多/a，/w所以/c网站/gi的/ude1前端/gi页面/gi会/v经常/d的/ude1被/pbei修改/gi，/w修改/gi的/ude1页面/gi就要/d重新/d发布/gi生产/gi，/w这个/rz时候/n我们/rr就要/d刷新/v浏览器/gi的/ude1缓存/gi了/ule，/w那/rzv如何/ryv来/vf刷新/v页面/gi的/ude1缓存/gi了/ule，/w方法/gi其实/d很/d简单/a就是/v改变/v页面/giurl/gi的/ude1参数/gi，/w一般/ad网站/gi的/ude1静态/gi资源/gi的/ude1url/gi后面/f我们/rr会/v专门/d加上/v一个/mq版本号/gi参数/gi，/w例如/v：/w　　/nz我们/rr只要/c改变/v12345/nz这个/rz参数/gi的/ude1就/d能/v让/v浏览器/gi重新/d从/p服务端/nz获取/gi静态/gi资源/gi，/w这个/rz时候/n问题/gi来/vf了/ule，/w如果/c外部/fcss/nz文件/gi或/cjavascript/gi文件/gi被/pbei很/d多页面/nz引用/gi，/w那么/c我们/rr就/d不得不/d去/vf手动/b的/ude1更改/gi页面/gi里/f引用/gi这些/rz外部/f文件/gi的/ude1版本号/gi，/w这个/rz操作/gi难免会/l有/vyou遗漏/v，/w就算/d遗漏/v问题/gi好/a解决/v，/w如果/c我们/rr的/ude1页面/gi是/vshi使用/gi服务端/nz模板/gi开发/gi的/ude1，/w那么/c就/d可能/v导致/gi生产/gi发布/gi时候/n重启/gi生产/gi服务器/gi，/w为了/p静态/gi资源/gi发布/gi重启/gi服务器/gi的确/d让/v人/n感觉/gi有点/d得不偿失/vl。/w那么/c我们/rr又/d如何/ryv来/vf解决/v这个/rz问题/gi呢/y？/w　　/nz我们/rr分析/gi下/f这个/rz问题/gi的/ude1本质/n就是/v页面/gi引用/gi外部/fcss/nz文件/gi和/ccjavascript/gi文件/gi的/ude1行为/n其实/d包含/v一个/mq动态性/n，/w那么/c我们/rr要/v解决/v这个/rz问题/gi就是/v要/v拆分/gi出/vf这个/rz动态性/n，/w也/d就是/v把/pba要/v变化/gi的/ude1版本号/gi这个/rz动态性/n拆分/gi出来/vf进行/vn单独/d处理/vn，/w一般/ad我们/rr就/d会/v通过/p模板/gi语言/gi来/vf重新/d编写/gilink/nz和/ccscript/nz标签/gi的/ude1代码/gi，/w例如/v在/pjsp/gi技术/gi里/f我们/rr可以/v自定义/nz一个/mq标签/gi，/w将/d版本号/gi作为/p参数/gi传入/gi标签/gi里/f，/w当/p项目/gi发布/gi时候/n，/w模板/gi引擎/n会/v根据/p版本/n参数/gi不同/a重新/d编译/gi出/vflink/nz和/ccscript/nz标签/gi，/w但是/c这个/rz做法/n还是/c有/vyou问题/gi的/ude1，/w例如/vjsp/gi页面/gi技术/gi，/w要/v想/v更改/gi版本号/gi就/d得/ude3重启/gi服务/gi，/w所以/c这个/rz时候/n我们/rr把/pba版本号/gi的/ude1计算功能/gi做到/v独立/a的/ude1缓存/gi里/f，/w当文件/n改变/v后/f我们/rr通过/p更改/gi配置/gi刷新/v缓存/gi，/w这样/rzv就/d可以/v不用/d重启/gi服务器/gi就/d能/v刷新/v静态/gi资源/gi的/ude1版本号/gi了/ule。/w如果/c我们/rr网站/gi使用/gi了/ule网站/gi静态/gi化/v处理/vn，/w那么/c我们/rr可以/v把/pba这个/rz操作/gi迁移/gi到/v反向代理/gi这边/rzs来/vf做/v，/w把/pba该/rz操作/gi作为/p动静/n整合/gi的/ude1一/nz部分/n，/w如果/c我们/rr使用/gi了/uleesi/nz技术/gi，/w那么/c无非/d就是/v刷新/v下/fesi/nz对应/vi的/ude1缓存/gi即可/v。/w这个/rz动态/gi刷新/v静态/gi资源/gi版本号/gi的/ude1操作/gi在/p互联网/gi里/f已经/d很/d流行/v了/ule，/w但是/c现在/t大部分/n技术/gi都/d是/vshi关注/v在/p如何/ryv检测/gi静态/gi文件/gi是否/v发生变化/l上/f，/w例如/v使用/gimd/nz5/nz技术/gi计算/gi文件/gi的/ude1md/nz5/nz啊/y，/w或者/c是/vshi修改/gi下/f文件/gi的/ude1名字/n啊/y，/w但是/c这些/rz手段/n使用/gi时候/n都/d没/d考虑到/v是否/v重启/gi服务器/gi的/ude1问题/gi，/w最终/d导致/gi设计方案/nz使用/gi起来/vf比较/gi麻烦/an，/w我/rr觉得/v如何/ryv检测/gi文件/gi是否/v变化/gi很/d重要/a，/w如果/c方案/gi能/v实现/gi在/p检测/gi变化/gi的/ude1基础上/nz做到/v不用/d重启/gi服务器/gi就/d能/v刷新/v缓存/gi，/w这样/rzv才能/n让/v该/rz方案/gi更加/d完整/a和/cc实用/a。/w　　/nzok/nz了/ule，/w终于/d把/pba网站/gi静态/gi系列/n写完/v了/ule，/w后面/f我/rr将/d开启/gi一个/mq新的/a系列/n那/rzv就是/v分布式/gi和/ccsoa/gi，/w本来/d我/rr想/v把/pba分布式/gi和/ccsoa/gi分成/vi两/nz个/q系列/n，/w最近/t觉得/v这/rzv两/nz个/q系列/n合并/gi在/p一起/s比较/gi好/a，/w不过/c写/v新/a系列/n前/f可能/v需要/v一段时间/nz准备/v，/w最近/t一直/d写/v博客/gi都/d没/d抽出/v时间/gi好好/d看书/vi，/w应该/v要/v花点/n时间/gi看书/vi好好学习/n下/f了/ule。/w　　/nz今天/t周五/t了/ule，/w我/rr是/vshi歌手/nnt马上/d要/v开始/v，/w要/v准备/v看电视/nz了/ule，/w最后/f还是/c按照/p惯例/n祝/v大家/rr晚安/v，/w生活/vn愉快/a啦/y。/w