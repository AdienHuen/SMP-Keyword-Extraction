#递归/gi与/cc分治/gi策略/gi（/w一/nz）/w---算法/nz设计/gi与/cc分析/gi
递归/gi与/cc分治/gi策略/gi（/w一/nz）/w简而言之/vl，/w递归/gi就是/v自己/rr调用/gi自己/rr。/w递归/gi算法/gi：/w直接/ad或者/c间接地/n调用/gi自身/rr的/ude1算法/gi。/w递归函数/gm：/w用/p函数/gi自身/rr给出/v定义/gi的/ude1函数/gi。/w注意/v：/w每个/r递归函数/gm都/d必须/d有/vyou非递归/gi定义/gi的/ude1初始/b，/w以/p确保/v递归函数/gm完成/v计算/gi。/w下面/f通过/p两/nz个/q例子/gi来/vf介绍/gi递归/gi的/ude1特点/n例/n1/nz阶乘/gm函数/gi阶/ng乘函数/nz递归/gi地/ude2定义/gi为/p：/wn/nz!/nz=/nz1/nz(/nzn/nz=/nz0/nz)/nz或者/cn/nz!/nz=/nzn/nz(/nzn/nz-/nz1/nz)/nz!/nz(/nzn/nz0/nz)/nz下面/f用/p一段/nz简单/a的/ude1java/gi代码实现/gi这里/rzs是/vshi递归实现/gi：/w下面/f是/vshi迭代/gi实现/gi：/w分析/gi比较/gi一/nz下/f两/nz种/q实现/gi方法/gi：/w递归实现/gi：/w时间复杂度/gio/nz(/nzn/nz)/nz；/w空间/n复杂度/gio/nz(/nzn/nz)/nz。/w迭代/gi实现/gi：/w时间复杂度/gio/nz(/nzn/nz)/nz；/w空间/n复杂度/gio/nz(/nz1/nz)/nz。/w比较/gi可知/v两/nz种/q实现/gi的/ude1时间复杂度/gi等价/vn，/w空间/n复杂度/gi递归/gi占用/v的/ude1略/d大/a一下/m，/w但是/c代码/gi的/ude1结构/gi清晰度/n递归/gi更/d清晰/a一/nz些/q。/w下面/f进行/vn第二/mq个/q例子/gi的/ude1讲解/gi例/n2/nzfibonacci/nz数列/gifibonacci/nz数列/gi的/ude1递归/gi定义/gi为/pf/nz(/nzn/nz)/nz=/nz1/nz(/nzn/nz=/nz0/nz,/nz1/nz)/nz或者/cf/nz(/nzn/nz)/nz=/nzf/nz(/nzn/nz-/nz1/nz)/nzf/nz(/nzn/nz-/nz2/nz)/nz(/nzn/nz1/nz)/nz下面/f用/p一段/nz简单/a的/ude1java/gi代码实现/gi这里/rzs是/vshi递归实现/gi：/w下面/f是/vshi迭代/gi实现/gi：/w分析/gi比较/gi一/nz下/f两/nz种/q实现/gi方法/gi：/w递归实现/gi：/w时间复杂度/gio/nz(/nz1.618/nz的/ude1n/nz次方/n)/nz；/w空间/n复杂度/gio/nz(/nzn/nz)/nz。/w迭代/gi实现/gi：/w时间复杂度/gio/nz(/nzn/nz)/nz；/w空间/n复杂度/gio/nz(/nz1/nz)/nz。/w比较/gi可知/v递归实现/gi的/ude1时间复杂度/gi已经/d非常/d大/a了/ule，/w空间/n复杂度/gi递归/gi占用/v的/ude1略/d大/a一下/m，/w但是/c代码/gi的/ude1清晰度/n递归/gi更/d清晰/a一/nz些/q。/w而/cc真正/d使用/gi起来/vf递归实现/gi的/ude1代码/gi是/vshi无用/vi代码/gi，/w用/pn/nz=/nz40/nz这个/rz数/n测试/gi一下/m便/d知/v，/w递归实现/gi的/ude1耗时/vi太长/n了/ule，/w有兴趣/v的/ude1可以/v测试/gi一下/m。/w下面/f归纳/v一下/m递归/gi算法/gi的/ude1特点/n：/w1./nz简单/a（/w结构/gi清晰/a，/w可读性/n强/a）/w2./nz性能/gi较低/d（/w相比较/nz迭代/gi而言/uls）/w性能/gi较低/d的/ude1原因/n有/vyou以下/f两点：/nz1/nz需/v递归/gi调用/gi工作/gi栈/gi支持/v（/w无法/v避免/v）/w2/nz有可能/nz出现/v子问题/gi重叠/vi现象/n（/w必须/d尽力/d避免/v）/w这里/rzs递归/gi的/ude1主要/b知识点/gi就/d讲完/v了/ule，/w下面/f介绍/gi一下/m文章/gi标题/n的/ude1分治法/gi。/w分治法/gi的/ude1基本/a思想/gi：/w（/w容易/ad）/w分解-递归-/nz（/w容易/ad）/w合并/gi分解/gi：/w讲/v一个/mq大规模/b的/ude1问题/gi分解/gi为/p多/a个/q规模/gi较小/d的/ude1子问题/gi，/w需要/v注意/v的/ude1是/vshi子问题/gi必须/d互相/d独立/a并且/c与/cc原/b问题/gi相同/a。/w这里/rzs用/p一个/mq例子/gi进行/vn讲解/gi：/w归/v（/w合/v）/w并/cc排序/gi。/w这里/rzs留/v在下/r一篇/nz文章/gi介绍/gi，/w睡觉/vi咯/y，/w今天/t学到/v了/ule这些/rz，/w和/cc大家/rr分享/gi一下/m，/w感谢/v大家/rr的/ude1支持/v。/w