#解释器模式/gi Interpreter Pattern/nz
一/nz、/w什么/ry是/vshi解释器模式/giinterpreter/gi模式/gi也/d叫/vi解释器模式/gi，/w是/vshi行为模式/gi之一/rz，/w它/rr是/vshi一种/nz特殊/a的/ude1设计模式/nz，/w它/rr建立/gi一个/mq解释器/gi，/w对于/p特定/b的/ude1计算机程序/gi设计/gi语言/gi，/w用来/v解释/gi预先/d定义/gi的/ude1文法/n。/w简单/a地/ude2说/v，/winterpreter/gi模式/gi是/vshi一种/nz简单/a的/ude1语法/gi解释器/gi构架/n。/w二/nz、/w解释器模式/gi应用场景/gi当/p有/vyou一个/mq语言/gi需要/v解释/gi执行/v,/nz并且/c你/rr可/v将/d该/rz语言/gi中的/v句子/n表示/v为/p一个/mq抽象/gi语法/gi树/gi时/qt，/w可/v使用/gi解释器模式/gi。/w而/cc当/p存在/v以下/f情况/n时/qt该/rz模式/gi效果/gi最好/d：/w该/rz文法/n简单/a对于/p复杂/a的/ude1文法/n,/nz文法/n的/ude1类/gi层次/n变得/vi庞大/a而/cc无法/v管理/gi。/w此时/r语法分析/gi程序/gi生成器/n这样/rzv的/ude1工具/gi是/vshi更好/d的/ude1选择/gi。/w它们/rr无需/v构建/gi抽象/gi语法树/nz即可/v解释/gi表达式/gi,/nz这样/rzv可以/v节省/v空间/n而且/c还/d可能/v节省时间/nz。/w效率/gi不是/c一个/mq关键问题/n，/w最/d高效/b的/ude1解释器/gi通常/d不是/c通过/p直接/ad解释/gi语法分析/gi树/gi实现/gi的/ude1,/nz而是/c首先/d将/d它们/rr转换成/i另一种/nz形式/gi。/w例如/v，/w正则表达式/gi通常/d被/pbei转换成/i状态机/gi。/w但/c即使/c在/p这种/r情况下/nz,/nz转换器/gi仍/d可用/v解释器模式/gi实现/gi,/nz该/rz模式/gi仍/d是/vshi有/vyou用/p的/ude1。/w三/nz、/w解释器模式/gi的/ude1结构四/nz、/w解释器模式/gi的/ude1角色/gi和/cc职责/gicontext/nz解释器/gi上下文/gi环境/n类/gi。/w用来/v存储/gi解释器/gi的/ude1上下文/gi环境/n，/w比如/v需要/v解释/gi的/ude1文法/n等/udeng。/wabstractexpression/nz解释器/gi抽象类/gi。/wconcreteexpression/nz解释器/gi具体/a实现/gi类/gi。/w