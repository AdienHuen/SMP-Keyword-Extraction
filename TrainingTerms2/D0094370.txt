#从/p数据库/gi管理系统/gi选型/n开始/v
    /x从/p数据库/gi管理系统/gi选型/n开始/v概述/gi在/pit/gi应用/gi中/f,/nz数据库/gi是/vshi核心技术/nz./nzit/gi发展/gi几/d十年/nz,/nz主要/b数据库/gi管理系统/gi也/d多达十/nz几/d种/q,/nz选择/gi合适/a的/ude1数据库/gi管理系统/gi(/nzdbms/gi)/nz将/d会/v对/pit/gi项目/gi成败/n起到/v决定性/n的/ude1作用/gi./nz因此/c了解/v不同/a类型/gi的/ude1dbms/gi特点/n，/w应用场景/gi非常/d重要/a。/w数据库/gi管理系统/gi（/wdbms/gi）/w是/vshi企业/gi运营/gi与/cc分析/gi系统/gi的/ude1核心/n部分/n。/w它/rr负责/v存储/gi、/w管理/gi、/w保护/gi数据/gi，/w并为/c业务/gi应用/gi以及/cc终端用户/gi提供/v支持/v。/w然而/c，/w如今/t数据库/gi市场/gi已经/d不再/d是/vshi关系型数据库/gi的/ude1天下/n，/w不同/a类型/gi的/ude1产品/gi都/d拥有/v各自/rr的/ude1特长/n与/cc缺点/gi，/w企业/gicio/gi在/p进行/vn选型/n的/ude1时候/n需要/v仔细/ad考虑/v其/rz利弊/n。/w过去/vf30/nz年/qt当中/f，/w关系型数据库/gi（/wrdbms/gi）/w产品/gi在/p企业/gi系统/gi中/f占据/v了/ule主导地位/nz。/w随着/p服务器/gi成本/n的/ude1不断/d降低/v以及/cc性能/gi的/ude1不断/d提升/gi，/w关系型数据库/gi也/d得到/v了/ule最大限度/nz的/ude1普及/v。/w但是/c在/p互联网/gi时代/gi到来/gi之后/f，/w关系型数据库/gi的/ude1短板/nz就/d愈加/d明显/a了/ule。/w如今/t，/wit/gi部门/gi正在/d试图/v寻找/v处理/vn非结构化/gi数据/gi的/ude1方法/gi。/w与/cc结构化/n数据/gi相比/vi，/w它/rr的/ude1式/k更加/d复杂多变/nz，/w这/rzv使得/vi许多企业/nz不得不/d去/vf考虑/vnosql数据库/gi技术/gi。/w此外/c，/w对于/p存在/v大量/m快速/d交易/gi的/ude1应用/gi，/w或者/c那些/rz需要/v对/p数据/gi进行/vn实时/n复杂/a分析/gi的/ude1应用/gi，/w内存数据库/gi（/win/nz-/nzmemorydatabase/nz）/w或许/d是/vshi个/q不错/a的/ude1选择/gi。/w鉴于/p以上/f的/ude1场景/gi越来越/d多/a地/ude2出现/v在/p企业/gi当中/f，/w如今/t有/vyou不/d少/acio/gi希望/v使用/gi混合型/b的/ude1数据库/gi平台/gi来/vf应对/v上述/b难题/n。/w数据库/gi管理系统/gi类别/gi与/cc模型/gi /x以往/t,/nz大部分/n企业/gi首先/d考虑/v关系型数据库/gi管理系统/gi（/wrdbms/gi）/w。/w大数据/gi浪潮/gi的/ude1席卷/v使得/vi这样/rzv的/ude1情况/n有所/v改变/v，/w它/rr同时/c也/d带来/v了/ule新型/gi的/ude1dbms/gi产品/gi，/w在/p某些/rz特定/b的/ude1场景/gi中/f，/w它/rr能够/v与/cc关系型数据库/gi软件/gi一较高下/l。/w此外/c，/wdbms/gi中/f各种各样/bl的/ude1产品/gi类型/gi还/d在/p不断/d地/ude2添加/gi新的/a技术/gi与/cc功能/gi，/w这/rzv使得/vi整个/b数据库/gi生态系统/nz变得/vi前所未有/vl地/ude2复杂/a。/w关系型数据库/gi优势/gi:/w1./nz在/p使用率/n和/cc市场份额/nz方面/n，/w关系型数据库/gi毫无疑问/dl仍然/d是/vshi领导者/nnt。/w基于/p集合/gi代数/n等/udeng数学/gi概念/gi，/w关系型数据库/gi提供/v了/ule数据/gi的/ude1存储/gi、/w访问/gi以及/cc保护/gi能力/gi，/w同时/c针对/gi大/a多数/a的/ude1交易/gi型/k与/cc分析/gi型/k应用/gi保证/v了/ule其/rz性能指标/nz。/w在/p过去/vf的/ude1三十/nz多年/mq当中/f，/w企业/gi运营/gi数据库/gi管理系统/gi基本上/d都/d采用/v了/ule关系型/b技术/gi。/w其中/rz甲骨文/n（/woracle/gi）/w、/wibm/nz（/wdb/nz2/nz）/w和/cc微软/ntc（/wsql server/gi）/w是/vshi三大巨头/nz。/w针对/gi大/a多数/a的/ude1应用场景/gi，/w关系型数据库/gi都/d体现/v了/ule充分/ad的/ude1适用性/n与/cc可靠性/gi。/w以往/t几乎/d所有/b企业/gi都/d在/p使用/gi关系型数据库/gi来/vf支撑/v核心业务/gi系统/gi。/w当然/d，/w稳定性/n的/ude1代价/gi就是/v高/a成本/n―/w―/w关系型数据库/gi的/ude1价/n往往/d不/d便宜/a。/w2./nz对/pacid/gi原则/gi的/ude1全面/ad支持/v，/w即/v交易/gi的/ude1原子性/nz、/w一致性/gi、/w隔离/vn性/ng与/cc持久性/gi。/wacid/gi能够/v保障/vn所有/b的/ude1交易/gi能够/v正确地/nz执行/v，/w如果/c交易/gi出错/gi，/w它/rr能够/v保证/v关系型数据库/gi回滚/gi到/v执行/v之前/f的/ude1状态/gi。/w /x非关系型数据库/gi(/nznosql/gi)/nz的/ude1出现/v与/cc原因/n鉴于/p关系型数据库/gi如此/rzv强大/a、/w健壮/a的/ude1特性/gi，/w为何/ryv市面上/n还/d会/v出现/v其他/rzv类型/gi的/ude1数据库/gi产品/gi呢/y？/w答案/gi是/vshi，/w基于/pweb/gi的/ude1数据处理/gi与/cc大数据分析/gi需求/gi使得/vi关系型数据库/gi变得/vi力不从心/vl。/w尽管/c关系型数据库/gi也/d能够/v在/p这些/rz场景/gi下/f使用/gi，/w但/c其他/rzv产品/gi能够/v提供/v更/d灵活/a的/ude1模式/gi。/w非/b强/a一致性/gi模型/gi以及/cc更/d小/a的/ude1处理/vn消耗/gi更/d适合/v快速/d变化/gi的/ude1动态/gi环境/n，/w于是/ccnosql/gi进入/v了/ule我们/rr的/ude1帘/ng。/wnosql数据库/ginosql数据库/gi相比/vi于/p关系型数据库/gi提供/v了/ule更/d灵活/a的/ude1数据库/gi模式/gi（/wschema/nz）/w，/w其中/rz每一个/nz数据/gi元素/gi不/d需要/v存在/v于/p每一个/nz数据/gi实体/n当中/f。/w定义/gi更/d松散/a的/ude1数据结构/gi会/v随着/p时间/gi的/ude1推移/vn而/cc进化/vn，/w因此/c在/p一些/m特定/b场景/gi下/fnosql数据库/gi会/v是/vshi更加/d实际/n的/ude1解决方案/gi。/wnosql/gi与/cc关系型数据库/gi的/ude1另外/c一个/mq不同/a就是/v数据/gi一致性/gi的/ude1提供/v方式/n。/w关系型数据库/gi可以/v确保/v存储/gi的/ude1数据/gi永远/d保持/v一致性/gi，/w而/cc大多/d数/nnosql数据库/gi产品/gi提供/v了/ule更/d松散/a的/ude1一致性/gi方式/n。/w事实上/bl，/w关系型数据库/gi产品/gi已经/d可以/v提供/v不同/a级别/n的/ude1数据库/gi锁/v、/w一致性/gi与/cc隔离/vn性/ng，/w而/cc一/nz些/qnosql/gi则/d提供/v了/ule多/a种/q一致性/gi模型/gi，/w可以/v支持/v完整/a的/ude1acid/gi。/wnosql/gi解决/v了/ule一/nz些/q关系型数据库/gi不能/v解决/v的/ude1问题/gi，/w针对/gi海量数据/gi的/ude1处理/vn更/d得心应手/vl。/w数据/gi被/pbei认为/v是/vshi稀疏/a的/ude1，/w不是/c所有/b元素/gi都/d被/pbei填充/v，/w在/p实际/n中/f还有/v很/d多/a的/ude1“/w空白/n空间/n”/w。/w举/v个/q例子/gi，/w就/d像/v一个/mq矩阵/gi中/f有/vyou很/d多/a0。/nz尽管/cnosql/gi在/p特定/b的/ude1数据类型/gi上/f有着/v一定/b优势/gi，/w但/c与/cc关系型数据库/gi相比/vi它/rr的/ude1劣势/n也/d是/vshi非常/d明显/a的/ude1。/w比如/v，/w交易/gi完整性/gi、/w灵活/a索引/gi以及/cc查询/gi易用性/gi的/ude1缺失/n等/udeng。/w此外/c，/wnosql/gi还/d包含/v了/ule四个/nz不同/a的/ude1类别/gi，/w用来/v支持/v不同/a的/ude1应用/gi：/w /x键型/nz数据库/gi（/wkey/gi-/nzvalue/nz）/w  /x文档/gi型/k数据库/gi（/wdocument/nz）/w  /x列式数据库/gi（/wcolumnstore/nz）/w  /x图型/nz数据库/gi（/wgraph/nz）/w /x每/rz一类/b的/ude1nosql数据库/gi都/d是/vshi用/p不同/a的/ude1数据模型/gg，/w并且/c有着/v各自/rr的/ude1专长/n、/w缺陷/gi以及/cc使用场景/gi。/w进行/vnnosql数据库/gi选型/n的/ude1时候/n需要/v对/p不同/a类型/gi的/ude1数据库/gi有/vyou一个/mq深刻/a的/ude1认识/v与/cc理解/gi，/w同时/c需要/v结合/v数据/gi与/cc应用/gi需求/gi。/w内存数据库/gi有时/d也/d称/v为主/vi内存数据库/gi。/w一个/mq内存数据库/gi主要/b通过/p内存/gi来/vf存储/gi数据/gi，/w这/rzv与/cc基于/p磁盘/gi的/ude1存储/gi有所/v不同/a。/w /x内存数据库/gi的/ude1主要/b应用场景/gi就是/v改善/v性能/gi。/w数据存储/gi在/p内存/gi介质/gi当中/f，/wi/nz//nzo/nz延迟/v将/d得到/v大大/d削减/v。/w因为/c机械/n硬盘/gi的/ude1转动/v、/w寻道/gi时间/gi以及/cc传输/gi到/v缓存器/nz的/ude1动作/gi在/p内存/gi中都/ns被/pbei省去/v了/ule。/w内存数据库/gi主要/b针对/gi内存/gi数据/gi访问/gi进行/vn了/ule优化/gi，/w而/cc传统/n数据库/gi则/d是/vshi针对/gi磁盘/gi进行/vn的/ude1数据/gi访问/gi优化/gi。/w内存数据库/gi产品/gi还/d可以/v减少/v开销/n，/w因为/c其/rz内部/f算法/gi通常/d更加/d简单/a，/w需要/v更少/d的/ude1cpu/gi指令/gi。/w另外/c一个/mq发展/gi快速/d的/ude1领域/gi就是/v多/a模型/gi数据库/gi管理系统/gi，/w它/rr支持/v超过/v一种/nz类型/gi的/ude1存储引擎/gi。/w许/v多/anosql数据库/gi产品/gi支持/v一种/nz以上/f的/ude1数据模型/gg，/w比如/v文档/gi型/k与/cc键型/nz。/w关系型数据库/gi产品/gi也/d逐渐/d开始/v支持/vnosql/gi功能/gi，/w比如/v在/p关系型数据库/gi引擎/n之上/f再/d添加/gi列/v数据存储/gi。/w其他/rzv数据库/gi类型/gi与/cc上述/b三种/nz相比/vi就/d小众/nz的/ude1多/a了/ule：/w  xml/nz数据库/gi，/w主要/b支持/vxml/nz数据/gi，/w与/ccnosql/gi的/ude1文档/gi数据库/gi相类/n。/w如今/t大部分/n的/ude1关系型数据库/gi都/d已经/d提供/v了/ulexml/nz支持/v。/w /x列式数据库/gi（/wcolumnar database /nz）/w是/vshisql/gi数据库系统/gi的/ude1一种/nz，/w它/rr主要/b针对/gi多/a行/ng多列/nz读取/gi进行/vn了/ule优化/gi，/w但/c写/v数据/gi方面/n很少/ad优化/gi。/w /x对象/gi数据库/gi在/p上世纪/nz90/nz年代/n非常/d流行/v，/w主要/b因为/c对象/gi编程/gi的/ude1出现/v。/w它/rr与/ccnosql/gi文档/gi数据库/gi相类/n。/w  /x如/vibm ims/nz分级/gi系统/gi以及/cccaidms/nz网络/gi系统/gi，/w主要/b运行/gi在/p大型/b机上/s。/w这/rzv两/nz个/q产品/gi目前/t仍然/d有/vyou不/d少/a企业/gi在/p使用/gi。/w /x选型/n其他/rzv主要/b事项/n /x在/p进行/vn数据库/gi管理系统/gi选型/n的/ude1时候/n，/w有些/rz问题/gi仍然/d需要/v考虑/v。/w平台/gi支持/v。/w目前/t主流/gi的/ude1计算/gi环境/n包括/v了/ulelinux/gi、/wunix/gi、/wwindows/gi以及/cc大型/b机系统/n。/w并/cc不是/c每一个/nz数据库/gi产品/gi都/d支持/v以上四/nz个/q平台/gi。/w厂商/gi支持/v。/w许多/m数据库/gi产品/gi都/d是/vshi开源/gi的/ude1，/w特别/d是/vshinosql数据库/gi。/w开源技术/gi能够/v增加/v灵活性/gi，/w降低成本/v。/w但/c它/rr缺少/v商业化/vn支持/v，/w除非/c你/rr购买/gi了/ule商用/b版/n。/w当/p在/p管理/gi、/w支持/v方面/n遇到/v问题/gi时/qt，/w很/d多/a开源/gi产品/gi的/ude1成本/n就/d会/v直线/n上升/vi。/w选择/gi数据库/gi一体机/nz。/w前者/rzv与/cc硬件/gi进行/vn了/ule预集成/nz，/w并/cc针对/gi数据库/gi应用/gi进行/vn了/ule性能优化/gi，/w打包/vi出售/v，/w开箱/v即/v用/p。/w使用/gi一体机/nz可以/v减少/v部署/gi和/cc配置/gi的/ude1开销/n，/w同时/c厂商会/j为/p硬件/gi软件/gi提供/v一体化/vn的/ude1支持/v。/w云数据库/gi./nz更/d适用/vi于/pit/gi技术人员/nnt比较/gi缺乏/v的/ude1企业/gi，/w数据库/gi运维/gi都/d可以/v由/p云服务商/gi来/vf为/p你/rr解决/v。/w /x总结/gi /x如果/c你/rr正在/d进行/vn数据库/gi选型/n，/w首先/d就/d需要/v确定/v你/rr的/ude1具体/a需求/gi，/w然后/c再/d考察/v不同/a类型/gi的/ude1数据库/gi产品/gi所/usuo提供/v的/ude1不同/a功能/gi，/w它/rr是否/v满足/v你/rr的/ude1需求/gi。/w然后/c再考虑/nz具体/a的/ude1应用场景/gi，/w哪些/ry数据库/gi产品/gi对/p这些/rz应用/gi进行/vn了/ule优化/gi。/w事实上/bl，/w在/p进行/vn决策/gi之前/f有/vyou许多变化/nz的/ude1因素/gi需要/v考虑/v，/w做/v周全/a的/ude1准备/v才能/n做出/v最/d正确/a的/ude1选择/gi。/w