#一/nz张/q图/gi讲清楚/nz高/a可用/v、/w高性能/gi、/w可扩展/nz的/ude1WEB/nz系统架构/gi
转/v自/p：/w前言/gi：/w最近/t在/p与/cc广东/ns互联网/gi基地/nis一起/s进行/vn无线/gi城市/gi集中/v平台/gi的/ude1建设/gi，/w在/p系统设计/gi、/w架构/gi调优/gi上/f做/v了/ule很/d多/a的/ude1探索/v，/w也/d在/p系统集成/gi测试/gi和/cc性能/gi调优/gi中/f遭遇/v了/ule很/d多/a的/ude1烦恼/an，/w心里/s有/vyou一些/m所得/n所/usuo悟/vg，/w希望/v与/cc大家/rr共同/d学习/gi探讨/v。/wweb系统/gi最/d容易/ad出现/v性能/gi故障/gi的/ude1点/gi在/p哪里/rys？/w /x有/vyou很/d多/a人/n对此/d不知/v其然/nz，/w或/c知/v其/rz然而/c不知其所以然/i。/w下面/f这/rzv张/q图/gi，/w是/vshi在/p一个/mq大型/b的/ude1web/gi系统设计/gi中/f，/w经典/gi的/ude1架构设计/nz和/cc分层模式/gi。/w1/nz）/w /x前端/gi负载均衡/gi：/w /x有钱/a的/ude1用/p硬件/gi四层/nz交换/gi（/w想当年/vl雅虎/gi中国/gi2000/nz台/q服务器/gi，/w只用/v了/ule四台/nzalteon/nz就/d搞定/v了/ule）/w，/w没钱/vi的/ude1用/p软件/gi负载均衡/gi（/wlvs/gi、/wnginx/gi）/w2/nz）/w /x多级/b缓存/gi：/w首先/d要/v充分利用/n浏览器/gi的/ude1缓存/gi能力/gi，/w也/d就是/vcookie/gi，/w然后/c要/v在/p服务端/nz利用/v页面缓存/gi机制/gi，/w前些年/t大家/rr喜欢/gi用/psquid/gi，/w现在/tvarnish/nz更/d流行起来/l了/ule，/w有/vyou一个/mq牛/n的/ude1故事/gi是/vshi挪威/nsf的/ude1最大/gm的/ude1在线/vn报纸/nverdens gang/nz(/nzvg/nz./nzno/nz)/nz使用/gi3/nz台/qvarnish/nz代替/v了/ule原来/d的/ude112/nz台/qsquid/gi，/w性能比/n以前/f更好/d，/w这/rzv是/vshivarnish/nz最/d成功/a的/ude1应用/gi案例/gi。/w /x最后/f一个/mq缓存/gi点/gi是/vshi在/p数据库/gi前方/s设置/gi，/w让/v那些/rz经常/d需要/v被/pbei查询/gi，/w但是/c实时性/nz要求/n不/d那么/c高/a的/ude1数据/gi缓存/gi起来/vf，/w避免/v对/p数据库/gi的/ude1频繁/a查询/gi。/w三级/gi缓存/gi可以/v有效/gi的/ude1提升/gi整个/b系统/gi的/ude1性能/gi。/w3/nz）/w应用服务器/gi层面/n：/w先/d考虑一下/n你/rr的/ude1静态/gi页面/gi与/cc动态/gi页面/gi的/ude1占/v比/p，/w然后/c考虑一下/n如何/ryv尽量/d实现/gi动态/gi页面/gi静态/gi化/v，/w把/pba静态/gi的/ude1部署/gi到/vapache/gi上/f，/w动态/gi的/ude1部署/gi到/vtomcat/nz上/f吧/y。/w如果/c你/rr是/vshi一个/mq像/vflicker/nz那样/rzv的/ude1图片/gi共享/gi网站/gi，/w必须/d考虑/v设置/gi单独/d的/ude1图片/gi服务器/gi，/w这/rzv是/vshi淘宝/n血泪史/n告诉/v我们/rr的/ude1真理/n。/w4/nz）/w现在/t要/v考虑/v数据库/gi的/ude1选型/n问题/gi了/ule：/w采用/v关系型数据库/gi还是/c非关系型数据库/gi完全/ad取决于/v你/rr的/ude1业务/gi场景/gi，/w如果/c你/rr要/v实现/gi实时/n要求/n高/a，/w数据/gi一致性/gi要求/n高/a的/ude1场景/gi，/w关系型数据库/gi；/w如果/c你/rr要/v实现/gi海量数据/gi的/ude1查询/gi和/cc高并发/gi，/w非关系型数据库/gi（/w考虑/vfacebook/nz一/nz张/q表/n有/vyou一亿/nz用户/gi，/w如果/c用/p关系型数据库/gi查询/gi。/w磁盘/giio/gi也/d快撑/v不住/d了/ule，/w而非/c关系型数据库/gi则/d完全/ad没有/v这个/rz问题/gi）/w；/w5/nz）/w数据库/gi性能/gi问题/gi之外/f务必/d考虑/v清楚/a数据库/gi的/ude1并发/gi性能/gi：/w通常/d会/v采用/v生产/gi数据库/gi与/cc查询数据库/n分离/vi的/ude1方式/n，/w也/d就是/v著名/a的/ude1mysql/gi的/ude1单主/nz多/a从/p服务/gi方式/n。/w为了/p实现/gi高可用性/nha/nz，/w有的/rz网站/gi比如/v淘宝网/nz，/w在/pmaster/gi之间/f也/d会/v实现/gi集群/gi部署/gi。/w6/nz）/w数据库/gi集群/gi和/cc库表/nz散列/nz:/w上面/f提到/v的/ude1数据库/gi集群/gi由于/p在/p架构/gi,/nz成本/n,/nz扩张性/n方面/n都会/n受到/v所/usuo采用/vdb/nz类型/gi的/ude1限制/vn,/nz于是/cc我们/rr需要/v从/p应用程序/nz的/ude1角度/n来/vf考虑/v改善/v系统架构/gi,/nz库表/nz散列/nz是/vshi常用/a并且/c最/d有效/gi的/ude1解决方案/gi，/w在/p应用程序/nz中将/nnt数据库/gi进行/vn分离/vi,/nz不同/a的/ude1模块/gi对应/vi不同/a的/ude1数据库/gi或者/c表/n,/nz再/d按照/p一定/b的/ude1策略/gi对/p某个/rz页面/gi或者/c功能/gi进行/vn更/d小/a的/ude1数据库/gi散列/nz,/nz比如/v用户表/nz,/nz按照/p用户/giid/nz进行/vn表/n散列/nz,/nz这样/rzv就/d能够/v低成本/nz的/ude1提升/gi系统/gi的/ude1性能/gi并/cc./nz且/c有/vyou很好/ad的/ude1扩展性/n，/wsohu/nz的/ude1论坛/gi就是/v采用/v了/ule这样/rzv的/ude1架构/gi./nz权限/gi：/w公开/ad来自/v：/wlabs/nz声明/gi：/w本文/r仅/d代表/nnt作者/nnt个人观点/nz。/w其/rz原创性/n及/cc文中/s表达/gi的/ude1意见/gi、/w判断/gi、/w数据/gi、/w观点/gi和/cc陈述/v文字/gi等/udeng内容/gi均/d与/cc中国移动/nz研究院/nis无关/v。/w移动/vnlabs/nz博客/gi致力于/v为/pict/nz领域/gi的/ude1研究者/nnt及/cc从业者/n提供/v技术/gi和/cc业务/gi交流/gi的/ude1网络平台/n，/w对/p本文/r中全部/nz或/c部分/n内容/gi的/ude1真实性/n、/w完整性/gi不作/v任何/rz保证/v或/c承诺/vn，/w仅供/nz读者/n参考/gi交流/gi。/w