#大话/n设计模式/nz（/w三/nz /x复制/giVS/nz复用/gi）/w
（/w续/v上篇/b）/w /x小菜/n：/w“/w我/rr明白/v了/ule，/w他/rr说/v用/p任意/d一种/nz面向对象语言/gi实现/gi，/w那/rzv意思/n就是/v要用/v面向对象/gi的/ude1编程/gi方法/gi去/vf实现/gi，/w对/p吗/y？/wok/nz，/w这个/rz我/rr学/v过/uguo，/w只不过/d当时/t我/rr没想到/nz而已/y。/w”/w /x大鸟/nz：/w“/w所有/b编程/gi初学者/gi都会/n有/vyou这样/rzv的/ude1问题/gi，/w就是/v碰到问题/l就/d直觉/n的/ude1用/p计算机/gi能够/v理解/gi的/ude1逻辑/n来/vf描述/gi和/cc表达/gi待/vi解决/v的/ude1问题/gi及/cc具体/a的/ude1求解/gi过程/gi。/w这/rzv其实/d是/vshi用/p计算机/gi的/ude1方式/n去/vf思考/gi，/w比如/v计算器/gi这个/rz程序/gi，/w先/d要求/n输入/v两/nz个数/n和/cc运算/gi符号/gi，/w然后/c根据/p运算/gi符号/gi判断/gi选择/gi如何/ryv运算/gi，/w得到/v结果/n，/w这/rzv本身/rz没有/v错/v，/w但/c这样/rzv的/ude1思维/gi却/d使得/vi我们/rr的/ude1程序/gi只为/c满足/v实现/gi当前/t的/ude1需求/gi，/w程序/gi不/d容易/ad维护/gi，/w不/d容易/ad扩展/gi，/w更/d不/d容易/ad复用/gi。/w从而/c达/v不到/v高质量/nz代码/gi的/ude1要求/n。/w”/w /x小菜/n：/w“/w鸟/n哥/n呀/y，/w我/rr有点/d糊/v涂/v了/ule，/w如何/ryv才能/n容易/ad维护/gi，/w容易/ad扩展/gi，/w又/d容易/ad复用/gi呢/y，/w能/v不能/v具体/a点/gi？/w”/w /x大鸟/nz：/w“/w比如说/vl，/w我/rr现在/t要求/n你/rr再写/v一个/mqwindows/gi的/ude1计算器/gi，/w你/rr现在/t的/ude1代码/gi能/v不能/v复用/gi呢/y？/w”/w小菜/n：/w“/w那/rzv还/d不简单/v，/w把/pba代码/gi复制/gi过去/vf不/d就行了/l吗/y？/w改动/vn又/d不大/d，/w不算/v麻烦/an。/w”/w /x大鸟/nz：/w“/w小菜/n看来/v还是/c小菜/n呀/y，/w有人/r说/v初级/b程序员/gi的/ude1工作/gi就是/vctrlc/nz和/ccctrlv/nz，/w这/rzv其实/d是/vshi非常/d不好/a的/ude1编码/gi习惯/n，/w因为/c当/p你/rr的/ude1代码/gi中/f重复/gi的/ude1代码/gi多/a到/v一定/b程度/n，/w维护/gi的/ude1时候/n，/w可能/v就是/v一场/nz灾难/n。/w越大/d的/ude1系统/gi，/w这种/r方式/n带来/v的/ude1问题/gi越/d严重/a，/w编程/gi有/vyou一/nz原则/gi，/w就是/v用尽/v可能/v的/ude1办法/gi去/vf避免/v重复/gi。/w想想看/l，/w你/rr写/v的/ude1这段/r代码/gi，/w有/vyou哪些/ry是/vshi和/cc控制台/gi无关/v的/ude1，/w而/cc只是/d和/cc计算器/gi有关/vn的/ude1？/w”/w（/w待续/vi）/w出处/n：/w