#导出/gicsv/gi文件/gi中文乱码/gi问题/gi
编码/gi相关/vn基础/gi：/w参考/gi首先/d获取/gi的/ude1中文/gi字符/gi是从/v内存数据库/gi获取/gi的/ude1，/w是/vshi一直/d存储/gi在/p内存/gi中的/v，/w所以/c是/vshiunicode/nz编码/gi，/w然后/c输出/gi到/vcsv/gi文件/gi时/qt，/w默认/v是/vshi采用/v系统/gi的/ude1编码/gi式/k进行/vn写/v文件/gi。/w那么/c在/p某个/rzlinux/gi系统/gi就是/vutf/nz_/nz8/nz，/w在/pwindows/gi就是/vgbk/gi。/w生成/v的/ude1文件/gi是/vshi什么/ry编码/gi式/k的/ude1，/w那么/c在/p系统/gi中/f打开/gi时/qt，/w就/d需要/v选择/gi相应/vi的/ude1解码/gi式/k来/vf打开/gi文件/gi。/w注意/v：/w在/poracle数据库/gi的话/udh，/w他/rr是/vshi有/vyou编码/gi式/k的/ude1。/w所以/c读取/gi时/qt，/w要/v确保/v是/vshi数据库/gi设定/v的/ude1编码/gi式/k。/w当/p在/plinux/gi中/f生成/v的/ude1csv/gi文件/gi是/vshiutf/nz_/nz8/nz编码/gi的/ude1，/w拿到/vwindows系统/gi用/pexcel/gi打开/gi时/qt，/w由于/pexcel/gi默认/v采用/v操作系统/gi的/ude1编码/gi即/vgbk/gi进行/vn解码/gi，/w所以/c导致/gi解码/gi错误/gi，/w出现/v乱码/nz且/c错/v行/ng。/w但/c用/p文本/gi编辑器/gi如/vue/nz打开/gi就/d没有/v问题/gi，/w因为/c它/rr可以/v自适应/gi根据/p文件/gi的/ude1编码/gi式/k进行/vn解码/gi打开/gi文件/gi。/w如果/c需要/v用/pexcel/gi打开/gi的话/udh，/w可以/v用/p文本/gi编辑器/gi打开/gi然后/c另存为/gi选择/gi操作系统/gi可以/v识别/gi的/ude1编码/gi，/w那么/c再/d用/pexcel/gi打开/gi的话/udh就/d没问题/nz。/w像/v平时/t有的/rz文件/gi，/w强制/vd用/pue/nz打开/gi的/ude1时候/n，/w也/d会/v出现/v一堆二/nz进制/v，/w那/rzv也/d是/vshi解码/gi式/k和/cc文件/gi的/ude1编码/gi式/k不/d一致/a导致/gi的/ude1，/w这种/r情况/n由于/p文件/gi实际/n是/vshi正确/a的/ude1，/w因此/c选择/gi正确/a的/ude1解码/gi方式/n进行/vn解码/gi打开/gi文件/gi就/d可以/v了/ule。/w编码/gi基础/gi不管/c是/vshi中文/gi字符/gi还是/c英文/nz字符/gi等/udeng所有/b字符/gi，/w在/pjava/gi的/ude1内存/gi中都/ns是/vshi以/punicode/nz编码/gi比如/vutf-8/gi存储/gi的/ude1。/w读写/gi文件/gi也/d不一定/nz非得/d用/p什么/ry编码/gi写/v。/w只要/c写/v和/cc读/v采用/v相同/a的/ude1编码/gi就/d不会/v出错/gi。/w比如/v某个/rz文件/gi（/w含/v中文/gi）/w是/vshiutf-8/gi编码/gi式/k，/w那么/c在/pjava/gi文件/gi编写/gi读入/gi该/rz文件/gi的/ude1时候/n，/w就/d得用/voutputstreamwriter/nz（/wutf-8/gi）/w进行/vn解码/gi，/w这样/rzv在/p编译/gijava/gi文件/gi时/qt读入/gi的/ude1数据/gi才/d会/v是/vshi正确/a的/ude1。/wjava/gi文件/gi编写/gi完成/v后/f就要/d进行/vn编译/gi，/w在/pjava/gi文件/gi中/f数据读取/gi都会/n存储/gi到/v对象/gi中/f，/w即/v存储/gi在/p内存/gi中/f，/w而/cc内存/gi中都/ns是/vshiunicode/nz编码/gi的/ude1，/w所以/c从文件/l读取/gi时/qt采用/v正确/a的/ude1编码/gi式/k解码/gi，/w那么/c读取/gi的/ude1文件/gi信息/gi就是/v正确/a的/ude1。/w存储/gi到/v内存/gi中/f时/qt，/wjava/gi虚拟/gi机会/gi自动/d将/d其/rz转换/gi为/punicode/nz编码/gi式/k的/ude1信息/gi，/w那么/c信息/gi也/d是/vshi正确/a的/ude1。/w要/v注意/v的/ude1是/vshi编写/gijava/gi文件/gi时/qt，/wjava/gi文件/gi也/d是/vshi有/vyou编码/gi式/k的/ude1（/w即/v每个/r文件/gi都/d是/vshi有/vyou编码/gi式/k的/ude1）/w。/w比如/vutf/nz-/nz8。/nz那么/c编译/gi时/qt，/w若是/c命令行/n采用/vjavac/nz进行/vn编译/gi，/w若/c未指定/l编码/gi类型/gi，/w那么/c就/d会/v采用/v操作系统/gi默认/v的/ude1编码/gi类型/gi来/vf编码/gi，/w比如/v在/p中文/giwindows系统/gi中/f，/w默认/v是/vshigbk/gi，/w此时/r编译/gi的话/udh就/d会/v出现/v乱码/nz，/w即/v编译/gi生成/v的/ude1class/nz文件/gi就/d乱码/nz了/ule，/w那么/c后续/vn就/d无法/v恢复/gi了/ule，/w除非/c是/vshi再/d重新/d编译/gi。/w所以/c一定/b要/v注意/v编译/gi时/qt的/ude1类型/gi，/w这/rzv也/d是/vshi为什么/ryv在/pwindows系统/gi编写/gi的/ude1文件/gi，/w拿到/vlinux/gi系统/gi中/f编译/gi会/v出现/v问题/gi的/ude1原因/n，/wwindows/gi写/v的/ude1文件/gi一般/ad是/vshigbk/gi的/ude1，/w而/cclinux/gi编码/gi一般/ad是/vshiutf-8/gi或/cutf/nz-/nz16/nz的/ude1，/w所以/c在/plinux/gi编译/gi的话/udh就/d会/v出错/gi。/w当然/d，/w在/p输出/gi的/ude1时候/n可以/v指定/v编码/gi式/k，/w比如/vnew outputstreamwriter/nz(/nzos/gi，/w“/wgbk/gi”/w)/nz;/nz那么/c写出/v的/ude1文件/gi就是/vgbk/gi式/k的/ude1，/w在/pwindows系统/gi查看/gi就/d会/v没问题/nz。/w但是/c在/plinux/gi系统/gi中/f查看/gi可能/v就/d会/v有/vyou问题/gi，/w比如/vlinux/gi有/vyou个/q第三方/nz软件/gi默认/v编码/gi是/vshi系统/gi编码/gi即/vutf-8/gi，/w那么/c用来/v解析/gigbk/gi的/ude1就/d会/v出错/gi。/w但是/c在/pide/nz环境/n中/f，/w比如/veclipse/gi和/ccidea/gi，/w它/rr可以/v为/p每个/rjava/gi文件/gi设置/gi字符/gi编码/gi类型/gi，/w而/cc内置/vn的/ude1编译器/gi就/d会/v根据/p此/rzs设置/gi来/vf编译/gijava/gi文件/gi。/w保证/vjava/gi文件/gi编译/gi生成/v的/ude1class/nz文件/gi没有/v问题/gi后/f，/w那么/c后续/vn输出/gi出现/v乱码/nz的话/udh，/w就/d可以/v进行/vn相应/vi解决/v了/ule。/w