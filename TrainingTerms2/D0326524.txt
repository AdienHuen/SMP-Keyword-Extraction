#Redis/gi使用/gi误区/gi
 /x是/vshi目前/t nosql /nz领域/gi的当/a红/a炸子鸡/nf，/w它/rr象/ng一/nz把/pba瑞士军刀/nz，/w小巧/a、/w锋利/a、/w实用/a，/w特别/d适合/v解决/v一/nz些/q使用/gi传统/n关系数据库/gi难以解决/nz的/ude1问题/gi。/w但是/c redis /nz不是/c银弹/nz，/w有/vyou很/d多/a适合/v它/rr解决/v的/ude1问题/gi，/w但是/c也/d有/vyou很/d多/a并不/d适合/v它/rr解决/v的/ude1问题/gi。/w另外/c，/wredis /nz作为/p内存数据库/gi，/w如果/c用/p在/p不/d适合/v的/ude1场合/n，/w对/p内存/gi的/ude1消耗/gi是/vshi很/d可观/a的/ude1，/w甚至/d会/v让/v系统/gi难以承受/nz。/w我们/rr可以/v对系统/l存储/gi使用/gi的/ude1数据/gi以/p两种/nz角度/n分类/gi，/w一种/nz是/vshi按/p数据/gi的/ude1大小/n划分/v，/w分成/vi大数据/gi和/cc小数据/gi，/w另一种/nz是/vshi按/p数据/gi的/ude1冷热/n程度/n划分/v，/w分成/vi冷/a数据/gi和/cc热/a数据/gi，/w热/a数据/gi是/vshi指/v读/v或/c写/v比较/gi频繁/a的/ude1数据/gi，/w反之/c则/d是/vshi冷/a数据/gi。/w可以/v举/v一/nz些/q具体/a的/ude1例子/gi来/vf说明/v数据/gi的/ude1大小/n和/cc冷热属性/gi。/w比如/v网站/gi总的/b注册/gi用户数/n，/w这/rzv明显/a是/vshi一个/mq小/a而/cc热/a的/ude1数据/gi，/w小/a是因为/c这个/rz数据/gi只有/c一个/mq，/w热/a是因为/c注册/gi用户数/n随/p时间/gi变化/gi很/d频繁/a。/w再/d比如/v，/w用户/gi最新/a访问/gi时间/gi数据/gi，/w这/rzv是/vshi一个量/nz比较/gi大/a，/w冷热/n不均/a的/ude1数据/gi，/w大/a是/vshi数据/gi的/ude1粒度/gi是/vshi用户/gi级别/n，/w每/rz一个/mq用户/gi都/d有/vyou数据/gi，/w如果/c有/vyou一千万/nz用户/gi，/w就/d意味着/v有/vyou一千万/nz的/ude1数据/gi，/w冷热/n不均/a是因为/c活跃/a用户/gi的/ude1最新/a访问/gi时间/gi变化/gi很/d频繁/a，/w但是/c可能/v有/vyou很大/d一/nz部/q非/b活跃/a用户/gi访问/gi时间/gi长时间/nz不会/v发生变化/l。/w大体而言/nz，/wredis /nz最/d适合/v处理/vn的/ude1是/vshi小/a而/cc热/a，/w而且/c是/vshi写/v频繁/a，/w或者/c读写/gi都/d比较/gi频繁/a的/ude1热/a数据/gi。/w对于/p大/a而/cc热/a的/ude1数据/gi，/w如果/c其它/rz方式/n很难/d解决问题/v，/w也/d可以/v考虑/v使用/gi redis /nz解决/v，/w但是/c一定/b要/v非常/d谨慎/a，/w防止/gi数据/gi无限/b膨胀/vi。/w原因/n如下/vi：/w首先/d，/w对于/p冷/a数据/gi，/w无论/c大小/n，/w都/d不/d建议/gi放在/v redis /nz中/f。/wredis /nz数据/gi要/v全部/m放在/v内存/gi中/f，/w资源/gi宝贵/a，/w把/pba冷/a数据/gi放在/v其中/rz实在/d是/vshi一种/nz浪费/gi，/w冷/a数据/gi放在/v普通/a的/ude1存储/gi比如/v关系数据库/gi中/f就/d好/a了/ule。/w其次/c，/w对于/p热/a数据/gi，/w尤其/d是/vshi写/v频繁/a的/ude1热/a数据/gi，/w如果/c量/n比较/gi小/a，/w是/vshi最/d适合/v放到/v redis /nz中的/v。/w比如/v上面/f提到/v的/ude1网站/gi总的/b注册/gi用户数/n，/w就是/v典型/n的/ude1 redis /nz用做/v计数器/gi的/ude1例子/gi。/w再/d比如/v论坛/gi最新/a发表/v列表/vi，/w最新/a报名/vi列表/vi，/w可以/v控制/vn数量/n在/p几百/nz到/v一千/nz的/ude1规模/gi，/w也/d是/vshi典型/n的/ude1 redis /nz做/v最新/a列表/vi的/ude1使用/gi方式/n。/w另外/c，/w对于/p量/n比较/gi大/a的/ude1热/a数据/gi（/w或者/c冷热/n不均/a数据/gi）/w，/w使用/gi redis /nz时/qt一定/b要/v比较/gi谨慎/a。/w这种/r类型/gi数据/gi很容易/nz引起/v数据/gi膨胀/vi，/w导致/gi redis /nz消耗/gi内存/gi巨大/a，/w让/v系统/gi难以承受/nz。/w薄荷/n的/ude1一个/mq惨痛教训/n是/vshi把/pba用户/gi关注/v（/w以及/cc被/pbei关注/v）/w数据/gi放在/v redis /nz中/f，/w这/rzv是/vshi一种/nz数据量/n极大/a，/w冷热/n很/d不/d均衡/a的/ude1数据/gi，/w在/p几百万/nz的/ude1用户/gi级别/n就/d占用/v了/ule近/a /x10/nz gb/nz左右/f内存/gi，/w让/v redis /nz变得/vi难以/d应付/v。/w应对/v这种/r类型/gi的/ude1数据/gi，/w可以/v用/p普通/a存储/gi  /x缓存/gi的/ude1方式/n。/w如果/c用/p对了/vl地方/n，/w比如/v在/p小/a而/cc热/a的/ude1数据/gi情形/n，/wredis /nz表现/v很棒/a，/w如果/c用错/v了/ule地方/n，/wredis /nz也/d会/v带来/v昂贵/a的/ude1代价/gi，/w所以/c使用/gi时/qt务必/d谨慎/a。/w