#2015070401/nz /x-/nz EffactiveJava/nz笔记/gi /x-/nz /x第/mq55/nz条/q /x谨慎/a地/ude2进行/vn优化/gi(/nz4/nz)/nz
 /x谨慎/a地/ude2设计/gi程序/gi后/f,/nz有/vyou清晰/a,/nz简明/a,/nz结构/gi良好/a的/ude1实现/gi,/nz那么/c可以/v考虑/v优化/gi问题/gi./nz /x在/p每次/r视图/gi做/v优化/gi前后/f,/nz要/v对/p性能/gi进行/vn评估/gi./nz可能/v惊讶/a的/ude1发现/v优化/gi前后/f对/p性能/gi没有/v影响/gi,/nz或者/c性能/gi下降/vi./nz /x原因/n在于/v什么/ry呢/y?/nz要/v猜/v出程序/nz把/pba时间/gi花费/v在/p哪些地方/nz并不/d容易/ad./nz你/rr认为/v程序/gi慢/a的/ude1地方/n可能/v并/cc没有/v问题/gi./nz此刻/r优化/gi等于/v浪费时间/nz./nz /x大/a多数/a人/n认为/v,/nz程序/gi把/pba80%/nz的/ude1时间/gi花费/v在/p20%/nz的/ude1代码/gi上/f./nz /x性能/gi剖析/gi工具/gi有助于/v你/rr决定/v应该/v把/pba优化/gi的/ude1重心/n当/p在/p哪里/rys./nz工具/gi可以/v提供/v运行/gi时/qt信息/gi,/nz比如/v方法/gi运行时间/gi,/nz被/pbei调用/gi多少/ry次/qv,/nz警告/vn你/rr是否/v改变/v算法/gi./nz jdk/nz带有/v简单/a的/ude1性能/gi剖析器/nz,/nzide/nz有/vyou成熟/a的/ude1性能分析工具/gi./nz /x在/pjava/gi平台/gi进行/vn优化/gi结果/n测量/vn,/nz比/p在/p其他/rzv传统/n平台/gi更/d有/vyou必要/a./nz因为/cjava/gi语言/gi没有/v很强/d的/ude1性能/gi模型/gi,/nz各种/rz操作/gi相对/d开销/n没有/v明确/a定义/gi./nz /x不要/d费力/a去/vf编写/gi快速/d程序/gi,/nz应该/v努力/gi编写/gi好/a的/ude1程序/gi,/nz速度/n自然/n随之而来/vl./nz /x在/p设计/gi系统/gi是/vshi,/nz特别/d考虑/v在/p设计/giapi/gi,/nz线路/n层/gi协议/gi,/nz和/cc永久/b数据式/nz的/ude1时候/n,/nz一定/b要/v考虑/v性能/gi问题/gi./nz在/p构建/gi系统/gi后/f,/nz要/v测试/gi它/rr的/ude1性能/gi./nz如果/c足够/v快/a,/nz那么/c任务/gi完成/v;/nz如果/c不够/a快/a,/nz在/p性能/gi分析器/n帮助/v下/f,/nz找到/v问题/gi根源/n,/nz然后/c设法/v优化/gi系统/gi中/f相关/vn部分/n./nz /x检查/gi所选/v的/ude1算法/gi,/nz再多/d底层/n优化/gi也/d无法弥补/i算法/gi选择/gi的/ude1不当/a,/nz必要/a时/qt重复/gi这个/rz过程/gi,/nz在/p每次/r检查/gi之后/f要/v测量/vn性能/gi,/nz直到/v满意/v为止/u./nz