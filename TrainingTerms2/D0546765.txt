#</nz图论/gm算法/gi之/uzhi2/nz分/qt匹配/gi>/nz    hdu  /nz1281/nz（/w棋盘游戏/gi）/w
题意/n：/w /x给/p一个/mqn/nz*/nzm/nz的/ude1棋盘/gi，/w在/p上面/f放/v上车/v，/w放/v的/ude1车/n之间/f不能/v相互/d攻击/gi(/nz在/p同/p一行/n或者/c同一/b列/v就/d能/v相互/d攻击/gi)/nz，/w并且/c只有/c某些/rz点/gi能/v放/v车/n。/w /x问/v最多/ad能/v放/v多少/ry车/n，/w其中/rz有/vyou多少/ry个子/n必须/d放/v才能/n放/v最多/ad的/ude1车/n。/w这/rzv是/vshi一道/d很好/ad的/ude1理解/gi匈牙利算法/gi的/ude1题目/gi。/w /x首先/d我们/rr求/v最多/ad放/v多少/ry车/n，/w这/rzv是/vshi一个/mq行列/n匹配/gi问题/gi。/w假设/gi我们/rr用/pn/nz个/q左边/f的/ude1点/gi代表/nnt行/ng /x，/wm/nz个/q右边/f的/ude1点/gi放在/v右边/f，/w如果/c一个子/nz(/nzx/nz,/nzy/nz)/nz能/v放/v车/n，/w那么/c将/d左边/f的/ude1x/nz和/cc右边/f的/ude1y/nz连接/gi一起/s建/v一条边/nz。/w这个/rz一个/mq很/d经典/gi的/ude1模型/gi，/w就/d不必/d多少/ry了/ule。/w用/p匈牙利算法/gi求/v一次/nz最大/gm匹配/gi。/w /x后面/f这/rzv一/nz问/v很好/ad。/w首先/d我/rr说说/v最/d暴力/n的/ude1方法/gi。/w记录/gi下/f最大/gm匹配/gi的/ude1中的/v匹配/gi边/k，/w然后/c再/d原图/nz中/f去掉/v这/rzv条/q边/k，/w看/v最大/gm匹配/gi是否/v和/cc原来/d的/ude1相等/vi。/w /x一次/nz匈牙利/nsf的/ude1复杂度/gi是/vshio/nz（/wn/nz*/nzm/nz^/nz2/nz)/nz./nz总共/dn/nz次/qv匈牙利/nsf /x，/w总的/b复杂度/gi是/vshio/nz（/wn/nz^/nz2/nz*/nzm/nz^/nz2/nz）/w /x，/w对于/p这/rzv题/n100/nz的/ude1数据/gi是/vshi能/vac/nz的/ude1。/w但是/c如果/c数据量/n增加/v就要/d换/v个/q方法/gi了/ule。/w /x实际上/d，/w在/p求出/v最大/gm匹配/gi以后/f，/w假设/gi(/nzx/nz-/nzy/nz)/nz是/vshi最大/gm匹配/gi中的/v一条边/nz，/w我们/rr首先/d删掉/v这/rzv条/q边/k，/w并且/c使/vy/nz失陪/v。/w此时/r为/px/nz寻找/v增光路/ns，/w如果/c能/v找到/v，/w说明/v我们/rr用/p另外/c的/ude1一个/mq匹配/gi代替/v了/ule匹配/gi（/wx/nz-/nzy/nz）/w,/nz所以/c(/nzx/nz-/nzy/nz)/nz并非/v必须/d的/ude1。/w否者/nz，/w（/wx/nz-/nzy/nz）/w是/vshi必须/d的/ude1。/w /x注意/v：/w如果/c（/wx/nz-/nzy/nz）/w是/vshi必须/d的/ude1，/w那么/c要/v link/nz[/nzy/nz]/nz=/nzx /nz是/vshi的/ude1x/nz再次/d匹配/giy /nz到达/v最大/gm匹配/gi。/w /x另外/c：/w不管/c(/nzx/nz-/nz)/nz是不是/v必须/d的/ude1，/w都/d必须/d还原/gi图/gi。/w方法/gi一/nz /x暴力/n：/wview code/nz方法/gi2/nz:/w /x一次/nz找/v增广路/giview code/nz