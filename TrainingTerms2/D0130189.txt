#linux/gi设备驱动/gi第一/mq篇/q：/w基础/gi知识点/gi
首先/d，/w我们/rr知道/v驱动/gi是/vshi内核/gi的/ude1一/nz部分/n，/w那么/c驱动/gi在/p内核/gi中/f到底/d扮演/v了/ule什么/ry角色/gi呢/y？/w设备/gi驱动程序/gi在/p内核/gi中的/v角色/gi：/w他们/rr是/vshi一个/mq个/q独立/a的/ude1“/w黑/a盒子/n”/w，/w使/v某个/rz特定/b的/ude1硬件/gi响应/v一个/mq定义/gi良好/a的/ude1内部/f编程/gi接口/gi，/w这些/rz接口/gi完全/ad隐藏/v了/ule设备/gi的/ude1工作/gi细节/gi。/w（/w说白了/l，/w驱动程序/gi除了/p对外/vn提供/v特定/b的/ude1接口/gi外/f，/w任何/rz实现/gi细节/gi对/p应用程序/nz都/d是/vshi不/d可见/c的/ude1。/w）/w用户/gi的/ude1操作/gi通过/p一/nz组/n标准化/vn的/ude1调用/gi执行/v，/w而/cc这些/rz调用/gi独立/a于/p特定/b的/ude1驱动程序/gi。/w驱动程序/gi的/ude1任务/gi是/vshi把/pba这些/rz标准化/vn调用/gi映射/gi到/v实际/n硬件/gi的/ude1设备/gi特有/b操作/gi上/f。/w在/p编写/gi驱动程序/gi时/qt，/w程序员/gi应该/v特别注意/i下面/f这个/rz概念/gi：/w编写/gi访问/gi硬件/gi的/ude1内核/gi代码/gi时/qt，/w不要/d给/p用户/gi强加/vi任何/rz特定/b策略/gi。/w这/rzv句话/q我/rr的/ude1理解/gi是/vshi，/w驱动/gi只/d负责/v实现/gi最/d基本/a的/ude1硬件/gi功能/gi，/w而/cc谁/ry使用/gi此/rzs硬件/gi，/w怎么/ryv使用/gi，/w一般/ad都/d不/d做/v考虑/v。/w不/d带/v策略/gi的/ude1驱动程序/gi包括/v一/nz些/q典型/n的/ude1特征/gi：/w同时/c支持/v同步/gi和/cc异步/gi操作/gi、/w驱动程序/gi能够/v被/pbei多/a次/qv打开/gi、/w充分利用/n硬件/gi特性/gi，/w以及/cc不具备/v用来/v“/w简化/gi任务/gi”/w的/ude1或/c提供/v与/cc策略/gi相关/vn的/ude1软件层/nz等/udeng。/w驱动程序/gi就是/v应用程序/nz与/cc实际/n硬件/gi之间/f的/ude1一个/mq软件/gi层/gi，/w相同/a的/ude1硬件/gi，/w不同/a的/ude1驱动程序/gi可能/v提供/v不同/a的/ude1功能/gi。/w实际/n的/ude1驱动程序/gi设计/gi要/v在/p许/v多/a要/v考虑/v的/ude1因素/gi之间/f做出/v平衡/a。/w总的/b来说/uls，/w驱动程序/gi设计/gi主要/b还是/c综合/vn考虑/v下面三/nz个/q方面/n的/ude1因素/gi：/w提供/v给/p用户/gi尽量/d多/a的/ude1选项/gi、/w编写/gi驱动程序/gi要/v占用/v的/ude1时间/gi以及/cc尽量/d保持/v程序/gi简单/a而/cc不至于/d错误/gi丛生/vi。/w了解/v了/ule驱动/gi在/p内核/gi中/f扮演/v的/ude1角色/gi，/w我们/rr还/d可以/v简单/a了解/v下/f内核/gi中/f包含/v的/ude1其他/rzv模块/gi。/w一般/ad把/pba内核/gi功能/gi分成/vi如下/vi几部分/nz：/w进程/gi管理/gi、/w内存/gi管理/gi、/w文件系统/gi、/w设备控制/gi、/w网络/gi功能/gi。/w操作系统/gi原理/gi上面/f把/pba操作系统/gi的/ude1原理/gi分为/v：/w处理机/gi管理/gi、/w进程/gi管理/gi、/w文件/gi管理/gi、/w存储管理/gi、/w设备管理/gi、/w网络/gi与/cc通信/gi管理/gi、/w用户/gi接口/gi，/w其中/rz处理机/gi管理/gi归根到底/dl其实/d就是/v进程/gi管理/gi。/w因为/c处理器/gi的/ude1分配/gi和/cc执行/v都/d是/vshi以/p进程/gi为/p基本单位/gm的/ude1。/w而/cc存储管理/gi就是说/c的/ude1内存/gi管理/gi。/w进一步/d来看/u，/w电脑/gi上有/v网卡/gi，/w显卡/gi，/w声卡/gi等/udeng，/w还/d可以/v外接/gmu盘/gi，/w打印机/n等等/udeng外设/gi，/w那么/c这么/rz多/a的/ude1设备/gi有/vyou没有/v分类/gi呢/y？/w很/d明显/a，/w根据/p设备/gi的/ude1接口/gi，/w我们/rr可以/v知道/v分为/vusb/gi设备/gi，/w串口/gi设备/gi，/wpci/nz设备/gi，/wspi/nz设备/gi，/wi/nz2/nzc/nz设备/gi等等/udeng，/w那么/c在/plinux/gi内核/gi中/f又/d有样/r的/ude1划分/v呢/y？/w下面/f所述/nz就是/vlinux/gi中/f对/p所有/b设备/gi的/ude1一个/mq分类/gi，/w并/cc描述/gi了/ule相互之间/bl的/ude1简单/a区别/gi。/wlinux/gi中/f设备/gi和/cc模块/gi的/ude1分类/gi：/w字符/gi设备/gi：/w字符/gi设备/gi是/vshi能够/v像/v字/n节流/v(/nz类/gi文件/gi)/nz一样/uyy被/pbei访问/gi的/ude1设备/gi，/w有/vyou字符/gi设备/gi驱动程序/gi来/vf实现/gi这种/r特性/gi。/w字符/gi设备/gi驱动程序/gi通常/d至少/d要/v实现/giopen/nz、/wclose/nz、/wread/nz、/wwrite/gi系统/gi调用/gi。/w字符/gi设备/gi可以/v通过/p文件系统/gi节点/gi来/vf访问/gi，/w这些/rz设备/gi文件/gi和/cc普通/a文件/gi之间/f的/ude1唯一/b差别/n在于/v对/p普通/a文件/gi的/ude1访问/gi可以/v前后/f移动/vn访问/gi位置/gi，/w而/cc大多/d数字/gi符设备/nz是/vshi一个/mq只能/v顺序/gi访问/gi的/ude1数据通道/n。/w一个/mq字符/gi设备/gi是/vshi一/nz种/q字/n节流/v设备/gi，/w对/p设备/gi的/ude1存取/gi只能/v按/p顺序/gi按/p字节/gi的/ude1存取/gi而/cc不能/v随机/b访问/gi，/w字符/gi设备/gi没有/v请求/gi缓冲区/gi，/w所有/b的/ude1访问/gi请求/gi都/d是/vshi按/p顺序/gi执行/v的/ude1。/w但/c事实上/bl现在一/nz些/q高级/a字符/gi设备/gi也/d可以/v从/p指定/v位置/gi一次/nz读取/gi一块/s数据/gi。/w块/q设备/gi：/w块/q设备/gi也/d是/vshi通过/p设备/gi节点/gi来/vf访问/gi。/w块/q设备/gi上/f能够/v容纳/v文件系统/gi。/w在/p大多/d数/nunix/gi系统/gi中/f，/w进行/vni/nz//nzo/nz操作/gi时/qt块/q设备/gi每次/r只能/v传输/gi一个/mq或/c多/a个/q完整/a的/ude1块/q，/w而/cc每块/r包含/v512/nz字节/gi（/w或/c更/d2/nz的/ude1更高/d次幂/nz字节/gi的/ude1数据/gi）/w。/wlinux/gi可以/v让/v应用程序/nz向/p字符/gi设备/gi一样/uyy读写/gi块/q设备/gi，/w允许/v一次/nz传递/v任意/d多/a字节/gi的/ude1数据/gi。/w因而/c，/w块/q设备/gi和/cc字符/gi设备/gi的/ude1区别/gi仅仅/d在于/v内核/gi内部管理/n数据/gi的/ude1方式/n，/w也/d就是/v内核/gi及/cc驱动程序/gi之间/f的/ude1软件/gi接口/gi，/w而/cc这些/rz不同/a对/p用户/gi来讲/uls是/vshi透明/a的/ude1。/w在/p内核/gi中/f，/w和/cc字符/gi驱动程序/gi相比/vi，/w块/q驱动程序/gi具有/v完全/ad不同/a的/ude1接口/gi。/w存储设备/nz一/nz /x般/uyy属于/v块/q设备/gi，/w块/q设备/gi有/vyou请求/gi缓冲区/gi，/w并且/c支持/v随机/b访问/gi而/cc不必/d按照/p顺序/gi去/vf存取数据/n，/w比如/v你/rr可以/v /x先/d存取/gi后面/f的/ude1数据/gi，/w然后/c在/p存取/gi前面/f的/ude1数据/gi，/w这/rzv对/p字符/gi设备/gi来说/uls是/vshi不/d可能/v的/ude1。/wlinux/gi下/f的/ude1磁盘/gi设备/gi都/d是/vshi块/q设备/gi，/w尽管/c在/plinux/gi下有/v块/q设备/gi节点/gi，/w但/c应用程序/nz一般/ad是/vshi通过/p文件系统/gi及其/cc高速缓存/gi来/vf访问/gi块/q设备/gi的/ude1,/nz而/cc不是/c直接/ad通过/p设备/gi节点/gi来/vf读写/gi块/q设备/gi上/f的/ude1数据/gi。/w网络设备/gi：/w网络设备/gi不同于/c字符/gi设备/gi和/cc块/q设备/gi，/w它/rr是/vshi面向/v报文/n的/ude1而/cc不是/c面向/v流/gi的/ude1，/w它/rr不/d支持/v随机/b访问/gi，/w也/d没有/v请求/gi缓冲区/gi。/w由于/p不是/c面向/v流/gi的/ude1设备/gi，/w因此/c将/d网络接口/gi映射/gi到/v文件系统/gi中的/v节点/gi比较/gi困难/an。/w内核/gi和/cc网络设备/gi驱动程序/gi间/f的/ude1通讯/gi，/w完全/ad不同于/c内核/gi和/cc字符/gi以及/cc块/q驱动程序/gi之间/f的/ude1通讯/gi，/w内核/gi调用/gi一套/nz和/cc数据包/gi传输/gi相关/vn的/ude1函数/gi而/cc不是/cread/nz，/wwrite/gi。/w网络接口/gi没有/v像/v字符/gi设备/gi和/cc块/q设备/gi一样/uyy的/ude1设备/gi号/q，/w只有/c一个/mq唯一/b的/ude1名字/n，/w如/veth/nz0/nz、/weth/nz1/nz等/udeng，/w而/cc这个/rz名字/n也/d不/d需要/v与/cc设备/gi文件/gi节点/gi对应/vi。/w由/p上/f大致/d总结/gi下/f字符/gi设备/gi与/cc块/q设备/gi的/ude1区别/gi：/w1/nz、/w字符/gi设备/gi是/vshi面向/v流/gi的/ude1，/w最小/a访问/gi单位/n是/vshi字节/gi；/w而/cc块/q设备/gi是/vshi面向/v块/q的/ude1，/w最小/a访问/gi单位/n是/vshi512/nz字节/gi或/c2/nz的/ude1更高/d次幂/nz。/w2/nz、/w字符/gi设备/gi只能/v顺序/gi按/p字节/gi访问/gi，/w而/cc块/q设备/gi可/v随机/b访问/gi。/w3/nz、/w块/q设备/gi上/f可容纳/v文件系统/gi，/w访问/gi形式/gi上/f，/w字符/gi设备/gi通过/p设备/gi节点/gi访问/gi，/w而/cc块/q设备/gi虽然/c也/d可/v通过/p设备/gi节点/gi访问/gi，/w但/c一般/ad是/vshi通过/p文件系统/gi来/vf访问/gi数据/gi的/ude1。/w而/cc网络设备/gi没有/v设备/gi节点/gi是因为/c，/w网络设备/gi是/vshi面向/v报文/n的/ude1，/w很难/d实现/gi相关/vnread/nz、/wwrite/gi等/udeng文件/gi读写/gi函数/gi。/w所以/c驱动/gi的/ude1实现/gi也/d与/cc字符/gi设备/gi和/cc块/q设备/gi不同/a。/w第一时间/nz获得/v博客/gi更新/gi提醒/v，/w以及/cc更多/ad技术/gi信息/gi分享/gi，/w欢迎/v关注/v个人/n微信/gi公众平台/gi:/w程序员/gi互动/gi联盟/gi(/nzcoder/nz_/nzonline/nz)/nz1./nz直接/ad帮/v你/rr解答/vlinux/gi设备驱动/gi疑问/n点/gi2./nz第一时间/nz获得/v业内十/nz多/a个/q领域/gi技术/gi文章/gi3./nz针对/gi文章/gi内/f疑点/n提出/v问题/gi，/w第一时间/nz回复/v你/rr，/w帮/v你/rr耐心/gi解答/v4./nz让/v你/rr和/cc原创/b作者/nnt成为/v很好/ad的/ude1朋友/n，/w拓展/v自己/rr的/ude1人脉/n资源/gi扫/v一扫/nz下方/f二维码/nz或/c搜索/gi微/ag信号/gicoder/nz_/nzonline/nz即可/v关注/v,/nz我们/rr可以/v在线/vn交流/gi。/w