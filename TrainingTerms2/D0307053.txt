#My summery/nz
这个/rz项目/gi算是/v到/v了/ule一个/mq结点/gm，/w从/p六月份/nz开始/v接手/v，/w七/nz月底/t才/d把/pba项目/gi的/ude1apk/nz与/cc代码/gi交出去/v，/w从头到尾/dl做/v了/ule快/a两/nz个/q月/n，/w毕竟/d是/vshi第一次/nz这/rzv样子/n做/v项目/gi，/w而且/c是/vshi一/nz个人/n负责/v一个/mq完整/a的/ude1学生/gi端的/z项目/gi，/w其中/rz功能/gi虽然/c不/d算是/v很/d特别/d复杂/a，/w但/c比起/v教师/nnt端/v来说/uls功能/gi还是/c多/a了/ule点/gi，/w为了/p保存/gi进度/gi与/cc质量/gi只能/v加/v把/pba劲/n去/vf做/v，/w做完/v后/f，/w确实/ad收获/gi了/ule很/d多/a东西/n。/w关于/p技术/gi上/f的/ude1收获/gi后/f，/w我/rr想/v相对/d几个月/nz之前/f的/ude1我/rr，/w技术水平/nz上/f已经/d感觉/gi有/vyou了/ule极大/a的/ude1提高/v。/w对于/p自定义/nz控件/gi更加/d熟练/a了/ule。/w很/d多/a自定义/nz的/ude1控件/gi，/w比如/v自定义/nz的/ude1图表/gi，/w自定义/nz的/ude1菜单栏/gi，/w自定义/nz的/ude1进度条/nz，/w写/v的/ude1多/a了/ule之后/f已经/d感觉/gi比较/gi熟练/a了/ule，/w对于/pandroid/gi的/ude1一/nz些/qdrawble/nz文件/gi以及/cc一/nz些/q高级/a的/ude1动画/gi效果/gi的/ude1使用/gi，/w已经/d比/p以前/f熟练/a很/d多/a，/w现在/t叫/vi我/rr写/v一些/m如果/c不是/c效果/gi特别/d难/a的/ude1控件/gi，/w我/rr想/v我/rr还是/c也/d比较/gi有/vyou信心/n的/ude1了/ule。/w对于/p设计模式/nz有/vyou了/ule一定/b的/ude1了解/v与/cc体会/gi。/w怎么样/ryv才能/n把/pba代码/gi写/v的/ude1更加/d有/vyou逻辑/n更加/d便于管理/nz与/cc维护/gi，/w这/rzv大概/d归功/vi与/cc你/rr的/ude1代码/gi是/vshi怎么/ryv设计/gi的/ude1。/w之前/f对于/p设计模式/nz了解/v的/ude1并/cc没有/v那么/c深入/ad，/w于是/cc自己/rr额外/b花/n了/ule一小/d段/q时间/gi好好看/a了/ule几/d个/q常见/a的/ude1设计模式/nz。/w每/rz一/nz种/q设计模式/nz都/d有/vyou特定/b的/ude1应用场景/gi，/w不/d应该/v乱用/nz，/w但/c对于/pandrod/nz开发/gi来说/uls，/w如何/ryv做到/v试图/v与/cc逻辑/n分离/vi，/w这个/rz是/vshi很/d重要/a的/ude1，/w尽可能/d的/ude1减少/v主函数/nz的/ude1代码/gi不但/c方便管理/n而且/c更容易/nz捕捉/v错误/gi。/w对于/p代码/gi很少/ad的/ude1时候/n或许/d感受/gi不到/v这种/r好处/gi，/w但/c代码/gi一/nz多/a，/w比如/v有/vyou一/nz千行/nz以上/f时/qt，/w效果/gi就/d明显/a多/a了/ule，/w这种/r对于/p代码/gi设计模式/nz的/ude1重视/v直接影响/v到/v整个/b项目/gi的/ude1性能/gi，/w这/rzv也/d是/vshi我/rr对/p这/rzv方面/n重视/v的/ude1一个/mq原因/n。/w对于/pjava/gi的/ude1一些/m特性/gi有/vyou了/ule更/d深入/ad的/ude1理解/gi。/w对于/p类/gi的/ude1封装/gi与/cc抽象/gi有/vyou了/ule深入/ad的/ude1体会/gi，/w公共/b的/ude1方法/gi抽取/v出来/vf成为/v一个/mq公共/b独立/a的/ude1模块/gi、/w公共/b的/ude1特性/gi抽取/v出来/vf做为/v父类/nz，/w这些/rz便利/an于/p减少/v代码/gi，/w尽可能/d的/ude1解耦/gi便于/v代码/gi的/ude1修改/gi，/w尽可能/d的/ude1减少/v全局变量/gi有利于/v减少/v一/nz些/q难以预料/nz的/ude1异常/gi、/w、/w、/w等等/udeng，/w这些/rz在/p开发/gi过程/gi深深/d的/ude1体会/gi到/v其中/rz的/ude1用处/n。/w除了/p收获/gi之外/f，/w当然/d还有/v一些/m不足/an的/ude1得/ude3改善/v的/ude1。/w先/d思考/gi再/d动手/gi，/w我/rr觉得/v这个/rz已经/d刻/v在/p我/rr的/ude1脑海/n里/f了/ule，/w磨刀不误砍柴工/i大概/d也/d是/vshi这个/rz道理/n。/w另外/c这次/r项目/gi中/f，/w还有/v一些/m考虑到/v不足/an的/ude1地方/n，/w比如说/vl缓存机制/gi，/w列表/vi的/ude1数据/gi如果/c需要/v刷新/v的/ude1还是/c得/ude3缓存/gi下来/vf，/w不然/c刷新/v还/d得/ude3加载/gi数据/gi刷新/v，/w便/d不利于/v用户/gi体验/v。/w这些/rz我/rr相信/v在/p重构/gi与/cc优化/gi后/f便/d极大/a的/ude1减少/v这些/rz问题/gi。/w另外/c，/w总结/gi了/ule一/nz些/q觉得/v自己/rr应该/v要/v保持/v的/ude1习惯/n。/w1./nz有/vyou不懂/v的/ude1方法/gi第一时间/nz查/v参考/gi文档/gi。/w  /x2./nz学会/v画/v流程图/gi，/w学会/v初略/nz的/ude1写出/v各个/rz类/gi之间/f的/ude1关系/gi。/w  /x3./nz每/rz写/v一个/mq模块/gi必须/d进行/vn单元测试/gi。/w  /x4./nz命名/v要/v规范/gi。/w  /x5./nz每天/r花一点/nz时间/gi温故而知新/nz。/w /x6./nz经常/d锻炼身体/nz /x7./nz坚持/v总结/gi与/cc思考/gi