#设计模式/nz（/w11/nz）/w―/w―/w享元/nz(/nzFlyweight/nz)/nz模式/gi
什么/ry是/vshi享元模式/gi？/w享元模式/gi跟/pcache/gi机制/gi类/gi，/w它/rr运用/v共享/gi技术/gi有效地/nz支持/v大量/m细粒度/gi的/ude1对象/gi。/wflyweight/gi通过/p尽可能/d地/ude2与/cc其他/rzv对象/gi共享/gi数据/gi来/vf减少/v对/p内存/gi的/ude1使用/gi。/wflyweight/gi的/ude1经典/gi例子/gi就是/v字符/gi处理器/gi中的/v字符/gi图形/gi。/w如果/c每个/r字符/gi都/d用/p一个/mq单独/d的/ude1图形/gi表示/v，/w则/d会/v占用/v大/a量/n的/ude1空间/n。/w而/cc采用/v字符/gi表/n的/ude1形式/gi，/w只/d保持/v对/p字符/gi图形/gi的/ude1引用/gi关系/gi，/w则/d能/v节省/v大量/m空间/n。/w另一个/nz例子/gi是/vshi字符串/gi的/ude1驻留/v(/nzstring interning/nz)/nz，/w对于/p相同/a的/ude1字符串/gi，/w只/d保留/v一个/mq拷贝/gi。/w享元模式/gi的/ude1适用范围/nz1./nz /x一个/mq应用程序/nz使用/gi了/ule大量/m的/ude1对象/gi2./nz /x大量/m的/ude1对象/gi使用/gi造成了/v很大/d的/ude1内存/gi开销/n。/w3./nz /x对象/gi的/ude1大多/d数/n状态/gi可/v变为/v外部/f状态/gi4./nz /x如果/c删除/gi对象/gi的/ude1外部/f状态/gi，/w那么/c可以/v用/p相对/d较少/ad的/ude1共享/gi对象/gi取代/v很/d多/a组/n对象/gi5./nz应用程序/nz不/d依赖于/v对象/gi标识/n。/w享元模式/gi的/ude1示例/gi下面/f用/p咖啡厅/nis点/gi咖啡/nf来/vf说明/v享元模式/gi，/w其中/rzcoffeeflavour/nz应用/gi了/ule享元/nz。/w