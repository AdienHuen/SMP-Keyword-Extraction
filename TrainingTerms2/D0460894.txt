#重学/njava/gi23/nz种/q设计模式/nz（/w9/nz）/w装饰者模式/gi
跟着/v《/w软件/gi秘笈---设计/nz模式/gi那/rzv点/gi事/n》/w学习/gi预热/vi：/w继承/gi的/ude1缺点/gi：/w当/p修改/gi父/ng类/gi子类/gm全部/m跟着/v变/v，/w子类/gm对象/gi太多/ad时/qt不好/a管理/gi。/w定义/gi：/w装饰者模式/gi（/wdecorator pattern/nz）/w,/nz在/p不/d改变/v原类/nz文件/gi和/cc使用/gi继承/gi的/ude1情况下/nz，/w动态/gi地/ude2扩展/gi一个/mq对象/gi的/ude1功能/gi，/w它/rr是/vshi通过/p创建/gi一个/mq包装/n独享/v，/w也/d就是/v装饰/gi来/vf包裹/n真实/a的/ude1对象/gi。/w（/w1/nz）/w装饰/gi对象/gi和/cc真实/a独/d享有/v相同/a的/ude1接口/gi，/w这样/rzv客户端/gi对象/gi就/d可以/v以/p和/cc真实/a独享/v相同/a的/ude1方式/n和/cc装饰/gi对象/gi交互/gi。/w（/w2/nz）/w装饰/gi对象/gi包含/v一个/mq真实/a对象/gi的/ude1引用/gi（/w3/nz）/w装饰/gi对象/gi接受/gi所有/b来自/v客户端/gi的/ude1请求/gi，/w并/cc把/pba这些/rz请求/gi转发给/v真实/a的/ude1对象/gi。/w（/w4/nz）/w装饰/gi对象/gi可以/v在/p转发/gi这些/rz请求/gi以前/f或/c以后/f增加/v一/nz些/q附加/vn功能/gi。/w这样/rzv就/d确保/v了/ule在/p运行/gi是/vshi，/w不用/d修改/gi给定/gi对象/gi的/ude1结构/gi就/d可以/v在/p外部/f增加/v附加/vn功能/gi。/w在/p面向对象/gi的/ude1设计/gi中/f，/w通常/d是/vshi通过/p继承/gi来/vf实现/gi对/p给/p定类/nz额/n功能/gi扩展/gi，/w然而/c，/w装饰者模式/gi不/d需要/v子类/gm，/w可以/v在/p应用程序/nz运行/gi时/qt动态/gi扩展/gi功能/gi，/w更加/d方便/a、/w灵活/a。/w角色/gi：/w（/w1/nz）/w被/pbei装饰者/gi抽象/gicomponent/nz：/w是/vshi一个/mq接口/gi或/c抽象类/gi，/w装饰者/gi和/cc被/pbei装饰者/gi共同/d继承/gi（/w2/nz）/w被/pbei装饰者/gi具体/a实现/giconcretecomponent/nz（/w3/nz）/w装饰者/gidecorator/gi类图/gi：/w来自/v《/whead first/nz》/w实例/gi：/whead first/nz中/f装饰者模式/gi是/vshi很/d重点/n的/ude1讲/v的/ude1，/w但/c《/w软件/gi秘籍-设计/nz模式/gi》/w和/cc《/whead first/nz-设计/nz模式/gi》/w的/ude1例子/gi都/d太麻烦/nz。/w。/w所以/c用/p了/ule其他/rzv地方/n的/ude1简单/a例子/gi。/w分析/gi：/w1/nz、/w封装/gi变化/gi部分/n2/nz、/w开闭/nz原则/gi3/nz、/w面向/v抽象/gi编程/gi，/w不要/d面向/v实现/gi编程/gi4/nz、/w多用/b组合/gi，/w少用/n继承/gi。/w使用/gi场合/n：/w（/w1/nz）/w为/p现有/v对象/gi动态/gi增加/v新的/a功能/gi或/c职责/gi（/w2/nz）/w当/p对象/gi职责/gi经常/d发生变化/l一句话/l总结/gi：/w为/p避免/v继承/gi滥用/v，/w用/p包装/n类/gi去/vf包装/n产品/gi类/gi，/w方式/n是/vshi持有/v另一个/nz类/gi的/ude1引用/gi，/w包装/n类/gi做成/v抽象/gi以便/d更/d灵活/a。/w其实/d只要/c记住/vjava io/nz包/v用/p的/ude1是/vshi装饰者模式/gi，/w就/d记住/v了/ule。/wjava sdk/nz中的/v原型模式/gi：/wjava io/nz参考资料/nz：/w《/w软件/gi秘笈---设计/nz模式/gi那/rzv点/gi事/n》/w