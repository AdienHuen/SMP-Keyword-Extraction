#MySQL/gi在/p大型网站/gi的/ude1应用架构/gi演变/gi
本文/r主要/b描述/gi在/p网站/gi的/ude1不同/a的/ude1并发访问/gi量级/n下/f，/wmysql/gi架构/gi的/ude1演变/gi。/w可扩展性/gi架构/gi的/ude1可扩展性/gi往往/d和/cc并发/gi是/vshi息息相关/vl，/w没有/v并发/gi的/ude1增长/gi，/w也/d就/d没有/v必要/a做/v高/a可扩展性/gi的/ude1架构/gi，/w这里/rzs对/p可扩展性/gi进行/vn简单/a介绍/gi一下/m，/w常用/a的/ude1扩展/gi手段/n有/vyou以下/f两/nz种/q：/wscale/gi-/nzup/nz：/w纵向/n扩展/gi，/w通过/p替换/v为/p更好/d的/ude1机器/gi和/cc资源/gi来/vf实现/gi伸缩/vn，/w提升/gi服务/gi能力/giscale/gi-/nzout/nz：/w横向/n扩展/gi,/nz /x通过/p加/v节点/gi（/w机器/gi）/w来/vf实现/gi伸缩/vn，/w提升/gi服务/gi能力/gi对于/p互联网/gi的/ude1高并发/gi应用/gi来说/uls，/w无疑/d横向/n扩展/gi才/d是/vshi出路/n，/w同事/n通过/p纵向/n购买/gi更/d高端/nz的/ude1机器/gi也/d一直/d是/vshi我们/rr所/usuo避讳/v的/ude1问题/gi，/w也/d不是/c长久之计/nz。/w那么/c，/w在/p横向/n扩展/gi的/ude1理论/gi下/f，/w可扩展性/gi的/ude1理想/n状态/gi是/vshi什么/ry？/w可扩展性/gi的/ude1理想/n状态/gi一个/mq服务/gi，/w当/p面临/v更高/d的/ude1并发/gi的/ude1时候/n，/w能够/v通过/p简单/a增加/v机器/gi来/vf提升/gi服务/gi支撑/v的/ude1并/cc发度/nz，/w且/c增加/v机器/gi过程/gi中/f对/p线/n上/f服务/gi无/v影响/gi（/wno down time/nz）/w，/w这/rzv就是/v可扩展性/gi的/ude1理想/n状态/gi！/w架构/gi的/ude1演变/giv/nz1.0/nz /x简单/a网站架构/gi一个/mq简单/a的/ude1小型/b网站/gi或者/c应用/gi背后/f的/ude1架构/gi可以/v非常简单/nz，/w数据存储/gi只/d需要/v一个/mqmysql instance/nz就/d能/v满足/v数据读取/gi和/cc写入/gi需求/gi（/w这里/rzs忽略/v掉/v了/ule数据备份/nz的/ude1实例/gi）/w，/w处于/v这个/rz时间段/gi的/ude1网站/gi，/w一般/ad会/v把/pba所有/b的/ude1信息/gi存到/v一个/mqdatabase instance/nz里面/f。/w在/p这样/rzv的/ude1架构/gi下/f，/w我们/rr来/vf看看/v数据存储/gi的/ude1瓶颈/gi是/vshi什么/ry？/w数据量/n的/ude1总/b大小/n /x一个/mq机器/gi放不下/v数据/gi的/ude1索引/gi（/wb tree/nz）/w一个/mq机器/gi的/ude1内/f存放/v不下/v访问量/nz（/w读写/gi混合/vn）/w一个/mq实例/gi不能/v承受/v只有/c当/p以上/f3/nz件/q事情/n任何/rz一件/nz或/c多/a件/q满足/v时/qt，/w我们/rr才/d需要/v考虑/v往/p下/f一级/b演变/gi。/w /x从此/d我们/rr可以/v看出/v，/w事实上/bl对于/p很/d多/a小/a公司/nis小/a应用/gi，/w这种/r架构/gi已经/d足够/v满足/v他们/rr的/ude1需求/gi了/ule，/w初期/f数据量/n准确/a评估/gi是/vshi杜绝/v过度/d设计/gi很/d重要/a的/ude1一环/nz，/w毕竟/d没有人/nz愿意/v为/p不/d可能/v发生/v的/ude1事情/n而/cc浪费/gi自己/rr的/ude1精力/n。/w这里/rzs简单/a举/v个/q我/rr的/ude1例子/gi，/w对于/p用户/gi信息/gi这类/r表/n /x（/w3/nz个/q索引/gi）/w，/w16/nzg/nz内存/gi能/v放下/v，/w大概/d2000/nz万/nz行/ng数据/gi的/ude1索引/gi，/w简单/a的/ude1读/v和/cc写/v混合/vn访问量/nz3000/nz//nzs/nz左右/f没有/v问题/gi，/w你/rr的/ude1应用场景/gi是否/v？/wv/nz2.0/nz /x垂直/gi拆分/gi一般/ad当/pv/nz1.0/nz /x遇到/v瓶颈/gi时/qt，/w首先/d最/d简便/a的/ude1拆分/gi方法/gi就是/v垂直/gi拆分/gi，/w何谓/v垂直/gi？/w就是/v从/p业务/gi角度/n来看/u，/w将/d关联性/nz不强/v的/ude1数据/gi拆分/gi到/v不同/a的/ude1instance/gi上/f，/w从而/c达到/v消除/v瓶颈/gi的/ude1目标/gi。/w以图/v中的/v为/p例/n，/w将/d用户/gi信息/gi数据/gi，/w和/cc业务/gi数据/gi拆分/gi到/v不同/a的/ude1三个实/nz例/n上/f。/w对于/p重复/gi读/v类型/gi比较/gi多/a的/ude1场景/gi，/w我们/rr还/d可以/v加一层/nzcache/gi，/w来/vf减少/v对/pdb/nz的/ude1压力/n。/w在/p这样/rzv的/ude1架构/gi下/f，/w我们/rr来/vf看看/v数据存储/gi的/ude1瓶颈/gi是/vshi什么/ry？/w单/b实例/gi单/b业务/gi依然/d存在/vv/nz1.0/nz所述/nz瓶颈/gi：/w遇到/v瓶颈/gi时/qt可以/v考虑/v往/p本文/r更高/dv/nz版本升级/gi，/w若是/c读/v请求/gi导致/gi达到/v性能/gi瓶颈/gi可以/v考虑/v往/pv/nz3.0/nz升级/vi，/w /x其他/rzv瓶颈/gi考虑/v往/pv/nz4.0/nz升级/vi。/wv/nz3.0/nz /x主从/gi架构/gi此类/r架构/gi主要/b解决/vv/nz2.0/nz架构/gi下/f的/ude1读/v问题/gi，/w通过/p给/pinstance/gi挂/v数据/gi实时/n备份/gi的/ude1思路/gi来/vf迁移/gi读取/gi的/ude1压力/n，/w在/pmysql/gi的/ude1场景/gi下/f就是/v通过/p主从/gi结构/gi，/w主库/n抗写/nz压力/n，/w通过/p从/p库/n来/vf分担/gi读/v压力/n，/w对于/p写/v少/a读/v多/a的/ude1应用/gi，/wv/nz3.0/nz主从/gi架构/gi完全/ad能够/v胜任/vn。/w在/p这样/rzv的/ude1架构/gi下/f，/w我们/rr来/vf看看/v数据存储/gi的/ude1瓶颈/gi是/vshi什么/ry？/w很/d明了/v，/w写入/gi量/n主库/n不能/v承受/v。/wv/nz4.0/nz /x水平/n拆分/gi对于/pv/nz2.0/nz、/wv/nz3.0/nz方案/gi遇到/v瓶颈/gi时/qt，/w都/d可以/v通过/p水平/n拆分/gi来/vf解决/v，/w水平/n拆分/gi和/cc垂直/gi拆分/gi有/vyou较大/d区别/gi，/w垂直/gi拆分/gi拆/v完/vi的/ude1结果/n，/w在/p一个/mq实例/gi上/f是/vshi拥有/v全量/nz数据/gi的/ude1，/w而/cc水平/n拆分/gi之后/f，/w任何/rz实例/gi都/d只有/c全量/nz的/ude11/nz//nzn/nz的/ude1数据/gi，/w以下/f图/giuserinfo/nz的/ude1拆分/gi为/p例/n，/w将/duserinfo/nz拆分/gi为/p3/nz个/qcluster/gi，/w每个/rcluster/gi持有/v总量/n的/ude11/nz//nz3/nz数据/gi，/w3/nz个/qcluster/gi数据/gi的/ude1总和/n等于/v一份/nz完整/a数据/gi。/w注/v：/w这里/rzs不再/d叫/vi单个/b实例/gi /x而是/c叫/vi一个/mqcluster /nz代表/nnt包含/v主从/gi的/ude1一个/mq小/amysql/gi集群/gi。/w那么/c，/w这样/rzv架构/gi中的/v数据/gi该/rz如何/ryv路由/gi？/w1./nz range/nz拆分/gisharding key/nz按/p连续/gi区间/gi段/q路由/gi，/w一般/ad用/p在/p有/vyou严/a自/p增/vid/nz需求/gi的/ude1场景/gi上/f，/w如/vuserid/nz、/wuserid range/nz的/ude1小/a例子/gi，/w以/puserid /nz3000/nz万/nz为/prange/nz进行/vn拆分/gi：/w1/nz号/qcluster/gi的/ude1userid/nz是/vshi1/nz-/nz3000/nz万/nz，/w2/nz号/qcluster userid/nz是/vshi /x3001/nz万/nz-/nz6000/nz万/nz。/w2./nz list/nz拆分/gilist/gi拆分/gi与/ccrange/nz拆分/gi思路/gi一样/uyy，/w都/d是/vshi通过/p给/p不同/a的/ude1sharding key/nz来/vf路由/gi到/v不同/a的/ude1cluster/gi，/w但是/c具体方法/l有些/rz不同/a。/wlist/gi主要/b用来/v做/vsharding key/nz不是/c连续/gi区间/gi的/ude1序列/gi落到/v一个/mqcluster/gi的/ude1情况/n，/w如/v以下/f场景/gi：/w假定/v有/vyou20/nz个/q音像店/nz，/w分布/vi在/p4/nz个/q有/vyou经销权/n的/ude1地区/n，/w如下/vi表/n所示/nz：/w地区/n商店/giid /nz号/q北区/n3/nz,/nz /x5/nz,/nz /x6/nz,/nz /x9/nz,/nz /x17/nz东区/ns1/nz,/nz /x2/nz,/nz /x10/nz,/nz /x11/nz,/nz /x19/nz,/nz /x20/nz西区/ns4/nz,/nz /x12/nz,/nz /x13/nz,/nz /x14/nz,/nz /x18/nz中心区/nz7/nz,/nz /x8/nz,/nz /x15/nz,/nz /x16/nz业务/gi希望/v能够/v把/pba一个/mq地区/n的/ude1所有/b数据组织/n到/v一起来/nz搜索/gi，/w这种/r场景/gilist/gi拆分/gi可以/v轻松/a搞定/v3./nz hash/nz拆分/gi通过/p对/psharding key /nz进行/vn哈希/nrf的/ude1方式/n来/vf进行/vn拆分/gi，/w常用/a的/ude1哈希/nrf方法/gi有/vyou除余/nz，/w字符/gi串哈希/nz等等/udeng，/w除/p余/ng如/v按/puserid/nz%/nzn/nz的/ude1来/vf决定/v数据/gi读写/gi哪个/rycluster/gi，/w其他/rzv哈希/nrf类/gi算法/gi这里/rzs就/d不/d细/a展开/v讲/v了/ule。/w4./nz /x数据/gi拆分/gi后/f引入/v的/ude1问题/gi数据/gi水平/n拆分/gi引入/v的/ude1问题/gi主要/b是/vshi只能/v通过/psharding key/nz来/vf读写操作/n，/w例如/v以/puserid/nz为/psharding key/nz的/ude1切分/v例子/gi，/w读/vuserid/nz的/ude1详细信息/nz时/qt，/w一定/b需要/v先/d知道/vuserid/nz，/w这样/rzv才能/n推算出/v在/p哪个/rycluster/gi进而/c进行/vn查询/gi，/w假设/gi我/rr需要/v按/pusername/nz进行/vn检索/gi用户/gi信息/gi，/w需要/v引入/v额外/b的/ude1反向/gi索引/gi机制/gi（/w类/gihbase/gi二级/b索引/gi）/w，/w如/v在/predis/gi上/f存储/giusername/nz-/nzuserid/nz的/ude1映射/gi，/w以/pusername/nz查询/gi的/ude1例子/gi变成/v了/ule先/d通过/p查询/giusername/nz-/nzuserid/nz，/w再/d通过/puserid/nz查询/gi相应/vi的/ude1信息/gi。/w实际上/d这个/rz做法/n很/d简单/a，/w但是/c我们/rr不要/d忽略/v了/ule一个/mq额外/b的/ude1隐患/gi，/w那/rzv就是/v数据/gi不/d一致/a的/ude1隐患/gi。/w存储/gi在/predis/gi里/f的/ude1username/nz-/nzuserid/nz和/cc存储/gi在/pmysql/gi里/f的/ude1userid/nz-/nzusername/nz必须/d需要/v是/vshi一致/a的/ude1，/w这个/rz保证/v起来/vf很/d多/a时候/n是/vshi一件/nz比较/gi困难/an的/ude1事情/n，/w举/v个/q例子/gi来说/uls，/w对于/p修改/gi用户名/n这个/rz场景/gi，/w你/rr需要/v同时/c修改/giredis/gi和/ccmysql/gi。/w这/rzv两/nz个/q东西/n是/vshi很难/d做到/v事务/gi保证/v的/ude1，/w如/vmysql/gi操作/gi成功/a，/w但是/credis/gi却/d操作/gi失败/vi了/ule（/w分布式/gi事务/gi引入/v成本/n较高/ad）/w。/w对于/p互联网/gi应用/gi来说/uls，/w可用性/gi是/vshi最重要/nz的/ude1，/w一致性/gi是/vshi其次/c，/w所以/c能够/v容忍/v小/a量/n的/ude1不/d一致/a出现/v./nz /x毕竟/d从/p占/v比/p来说/uls，/w这类/r的/ude1不/d一致/a的/ude1比例/n可以/v微乎其微/vl到/v忽略不计/l。/w（/w一般/ad写/v更新/gi也/d会/v采用/vmq/nz来/vf保证/v直到/v成功/a为止/u才/d停止/gi重试/gi操作/gi）/w在/p这样/rzv的/ude1架构/gi下/f，/w我们/rr来/vf看看/v数据存储/gi的/ude1瓶颈/gi是/vshi什么/ry？/w在/p这个/rz拆分/gi理念/gi上/f搭建/v起来/vf的/ude1架构/gi，/w理论上/nz不存在/ns瓶颈/gi（/wsharding key/nz能/v确保/v各/rzcluster/gi流量/gi相对/d均衡/a的/ude1前提/n下/f)/nz。/w不过/c确有/v一/nz件/q恶心/a的/ude1事情/n，/w那/rzv就是/vcluster/gi扩容/v的/ude1时候/n重/a做/v数据/gi的/ude1成本/n，/w如/v我/rr原来/d有/vyou3/nz个/qcluster/gi，/w但是/c现在/t我/rr的/ude1数据/gi增长/gi比较/gi快/a，/w我/rr需要/v6/nz个/qcluster/gi，/w那么/c我们/rr需要/v将/d每个/rcluster /nz一拆为二/nz，/w一般/ad的/ude1做法/n是/vshi：/w摘下/v一个/mqslave/nz，/w停/vi同步/gi对/p写/v记录/gi增量/gilog/gi（/w实现/gi上/f可以/v业务/gi方/q对/p写/v操作/gi多一次/nz写/v持久化/nzmq/nz或者/cmysql/gi主创/vn建/vtrigger/nz记录/gi写/v等等/udeng方式/n）/w开始/v对/p静态/gislave/nz做/v数据/gi一/nz拆/v为/p二回放/nz增量/gi写入/gi，/w直到/v追上/v的/ude1所有/b增量/gi，/w与/cc原/bcluster/gi基本/a保持/v同步/gi写入/gi切换/vn，/w由/p原/b3/nz cluster /nz切换/vn为/p6/nz cluster/nz有/vyou没有/v类/gi飞机/n空中加油/nz的/ude1感觉/gi，/w这/rzv是/vshi一个/mq脏活/n，/w累活/n，/w容易/ad出/vf问题/gi的/ude1活/v，/w为了/p避免/v这个/rz，/w我们/rr一般/ad在/p最/d开始/v的/ude1时候/n，/w设计/gi足够/v多/a的/ude1sharding cluster/nz来/vf防止/gi可能/v的/ude1cluster/gi扩容/v这/rzv件/q事情/n。/wv/nz5.0/nz /x云计算/gi /x腾飞/vi（/w云数据库/gi）/w云计算/gi现在/t是/vshi各/rz大/ait/gi公司/nis内部/f作为/p节约/v成本/n的/ude1一个/mq突破口/n，/w对于/p数据存储/gi的/ude1mysql/gi来说/uls，/w如何/ryv让/v其/rz成为/v一个/mqsaas/gi是/vshi关键点/n。/w在/pms/nz的/ude1官方/gi文档/gi中/f，/w把/pba构建/gi一个/mq足够/v成熟/a的/ude1saas/gi（/wms/nz简单/a列出/v了/ulesaas/gi应用/gi的/ude14/nz级/q成熟度/gi）/w所/usuo面临/v的/ude13/nz个/q主要/b挑战/gi：/w可/v配置/gi性/ng，/w可扩展性/gi，/w多用户/n存储/gi结构设计/nz称为/vthree headed monster/nz。/w可/v配置/gi性/ng和/cc多用户/n存储/gi结构设计/nz在/pmysql saas/nz这个/rz问题/gi中/f并/cc不是/c特别/d难办/a的/ude1一件/nz事情/n，/w所以/c这里/rzs重点/n说/v一/nz下/f可扩展性/gi。/wmysql/gi作为/p一个/mqsaas/gi服务/gi，/w在/p架构/gi演变/gi为/pv/nz4.0/nz之后/f，/w依赖/v良好/a的/ude1sharding key/nz设计/gi，/w已经/d不再/d存在/v扩展性/n问题/gi，/w只是/d他/rr在/p面对/v扩容/v缩容/nz时/qt，/w有/vyou一/nz些/q脏活/n需要/v干/v，/w而/cc作为/psaas/gi，/w并/cc不能/v避免/v扩容/v缩容/nz这个/rz问题/gi，/w所以/c只要/c能/v把/pbav/nz4.0/nz的/ude1脏活/n变成/v：/w第/mq1/nz，/w扩容/v缩容/nz对/p前端/giapp/gi透明/a（/w业务/gi代码/gi不/d需要/v任何/rz改动/vn）/w；/w第/mq2/nz，/w扩容/v缩容/nz全自动化/nz且/c对/p在线/vn服务/gi无/v影响/gi。/w如果/c实现/gi了/ule这两点/l，/w那么/c他/rr就/d拿到/v了/ule作为/psaas/gi的/ude1门票/n。/w对于/p架构/gi实现/gi的/ude1关键点/n，/w需要/v满足/v对/p业务/gi透明/a，/w扩容/v缩容/nz对/p业务/gi不/d需要/v任何/rz改动/vn，/w那么/c就/d必须/deat our own dog food/nz，/w在/p你/rrmysql saas/nz内部/f解决/v这个/rz问题/gi，/w一般/ad的/ude1做法/n是/vshi我们/rr需要/v引入/v一个/mqproxy/gi，/wproxy/gi来/vf解析/gisql/gi协议/gi，/w按/psharding key/nz来/vf寻找/vcluster/gi，/w判断/gi是/vshi读/v操作/gi还是/c写/v操作/gi来/vf请求/gimaster/gi或者/cslave/nz，/w这/rzv一切/rz内部/f的/ude1细节/gi都/d由/pproxy/gi来/vf屏蔽/v。/w这里/rzs借/v淘宝/n的/ude1图/gi来/vf列举/v一/nz下/fproxy/gi需要/v干/v哪些/ry事情/n对于/p架构/gi实现/gi的/ude1关键点/n，/w扩容/v缩容/nz全自动化/nz且/c对/p在线/vn服务/gi无/v影响/gi；/w /x扩容/v缩容/nz对应/vi到/v的/ude1数据/gi操作/gi即为/c数据/gi拆分/gi和/cc数据/gi合并/gi，/w要/v做到/v完全/ad自动化/gi有/vyou非常/d多/a不同/a的/ude1实现/gi方式/n，/w总体/n思路/gi和/ccv/nz4.0/nz介绍/gi的/ude1瓶颈/gi部分/n有关/vn，/w目前/t来看/u这个/rz问题/gi比较/gi好/a的/ude1方案/gi就是/v实现/gi一个/mq伪装/vslave/nz的/ude1sync slave/nz，/w解析/gimysql/gi同步/gi协议/gi，/w然后/c实现/gi数据/gi拆分/gi逻辑/n，/w把/pba全量/nz数据/gi进行/vn拆分/gi。/w具体/a架构/gi见/v下图/n：/w其中/rzsync slave/nz对于/poriginal master/nz来说/uls，/w和/cc一个/mq普通/a的/ude1mysql slave/nz没有/v任何/rz区别/gi，/w也/d不/d需要/v任何/rz额外/b的/ude1区分/v对待/v。/w需要/v扩容/v//nz缩容/nz时/qt，/w挂/v上/f一个/mqsync slave/nz，/w开始/v全量/nz同步/gi增量/gi同步/gi，/w等待/gi一段时间/nz追/v数据/gi。/w以/p扩容/v为/p例/n，/w若/c扩容/v后/f的/ude1服务/gi和/cc扩容/v前/f数据/gi已经/d基本/a同步/gi了/ule，/w这时候/rzt如何/ryv做到/v切换/vn对/p业务/gi无/v影响/gi？/w /x其实/d关键点/n还是/c在/p引入/v的/ude1proxy/gi，/w这个/rz问题/gi转换/gi为了/p如何/ryv让/vproxy/gi做/v热/a切换/vn后端/f的/ude1问题/gi。/w这/rzv已经/d变成/v一个/mq非常/d好处理/nz的/ude1问题/gi了/ule。/w另外/c得/ude3关注/v的/ude1是/vshi：/w2014/nz年/qt5/nz月/n28/nz日/b―/w―/w为了/p满足/v当下/d对/pweb/gi及/cc云/gi应用/gi需求/gi，/w甲骨文/n宣布/v推出/vmysql fabric/nz，/w在/p对应/vi的/ude1资料/gi部分/n我/rr也/d放/v了/ule很/d多/afabric/nz的/ude1资料/gi，/w有兴趣/v的/ude1可以/v看看/v，/w说不定/vl会/v是/vshi以后/f的/ude1一个/mq解决/v云数据库/gi扩容/v缩容/nz的/ude1手段/n。/wv more /nz?/nz等待/gi革命/vn…/w…/w淘宝/n用/p例/n淘宝/nrds /nz云数据库/gi设计/gi：/wmysql fabric/nz博文/nz链接/gi：/w