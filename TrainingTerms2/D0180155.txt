#CI/nz-持续/nz集成/vn（/w1/nz）/w-软件/nz工业/n“流水线/nz”/w概述/gi
ci/gi-持续/nz集成/vn（/w1/nz）/w-软件/nz工业/n“流水线/nz”/w概述/gi1/nz概述/gi持续集成/gi（/wcontinuous integration/nz）/w是/vshi一种/nz软件开发/nz实践/gi，/w即/v团队/gi开发/gi成员/nnt经常/d集成/vn它们/rr的/ude1工作/gi，/w通过/p每个/r成员/nnt每天/r至少/d集成/vn一次/nz，/w也/d就/d意味着/v每天/r可能会/nz发生/v多/a次/qv集成/vn。/w每次/r集成都/nz通过/p自动化/gi的/ude1构建/gi（/w包括/v编译/gi，/w发布/gi，/w自动化测试/gi）/w来/vf验证/v，/w从而/c尽早/d地/ude2发现/v集成/vn错误/gi。/w持续集成/gi相当于/v将/d传统/n工业/n的/ude1流水线/n作业/gi的/ude1思想/gi应用/gi到/v现代/ntc的/ude1软件/gi工业/n中/f来/vf。/w不同之处/l在于/v，/w工业/n流水线/n最终/d出来/vf的/ude1是/vshi一个一个/nz的/ude1产品/gi复制/gi体/ng，/w但是/c软件/gi流水线/n最终/d出来/vf的/ude1是/vshi一代/n一代/n更/d新迭代/nz的/ude1版本/n，/w但是/c共同点/n在于/v：/w整体/n产出/vn的/ude1效率/gi将/d极大/a地/ude2增加/v。/w首先/d说/vci/gi解决/v了/ule的/ude1问题/gi：/w小/a步伐/n的/ude1产品/gi迭代/gi高频率/nz的/ude1版本/n发布/gi随时随地/dl的/ude1系统集成/gi稳定/an的/ude1系统/gi演进/vn线路图/n这些/rz都/d是/vshi现代/ntc敏捷/gi软件工程/gi理论/gi中所/j要求/n达到/v的/ude1目标/gi。/w百度/ntc百科/gi./nz持续集成/gi./nz20152/nz开发模式/gi变迁/vn传统开发/gi协作/gi模式/gi的/ude1各种/rz角色/gi：/w开发人员/n从事/vi软件产品/gi的/ude1功能/gi开发/gi编写/gi单元测试/gi脚本/gi简单/a的/ude1开发阶段/n的/ude1功能/gi验证/v测试人员/n编写/gi测试用例/gi集成/vn阶段/gi全面/ad的/ude1功能/gi验证/v使用/gi开发人员/n的/ude1交付/v物/ng搭建/v测试环境/nz进行/vn功能测试/gi一/nz些/q自动化测试/gi发布/gi人员/gi维护/gi发布/gi的/ude1相关/vn配置/gi将/d通过/p测试/gi的/ude1软件/gi交付物/nz按照/p流程/gi发布/gi到/v服务器/gi上/f运维/gi人员/gi监控/gi并/cc保持/v服务器/gi上/f的/ude1服务/gi7/nz*/nz24/nzh/nz正常/a运行/gi而且/c在/p传统/n的/ude1过程/gi中/f，/w存在/v如下/vi特点/n：/w除了/p开发人员/n外/f，/w其它/rz角色/gi基本上/d是/vshi全手工/n或者/c大部分/n手工/gi，/w事务处理/nz效率/gi低/a开发/gi和/cc交流/gi基本/a靠/v口口相传/nz或者/c邮件/n//nzqq/gi，/w沟通/gi成本/n大大/d部分/n从业人员/nz总是/d做/v重复/gi枯燥/a的/ude1工作/gi，/w没有/v技术/gi成长性/n实践/gi活动/gi缺乏/v积累性/n，/w每次/r都/d是/vshi从头开始/nz的/ude1相同/a的/ude1人工/b重复/gi而/cc持续集成/gi的/ude1工程/n思想/gi引进/v之后/f，/w会/v发生/v如下/vi变化/gi：/w开发人员/n编写/gi开发/gi相关代码/gi测试人员/n设计/gi自动化/gi测试用例/gi编写/gi自动化测试/gi相关代码/gi发布/gi人员/gi设置/gi自动化/gi发布/gi方案/gi编写/gi自动化/gi发布/gi相关代码/gi运维/gi人员/gi设置/gi自动化/gi运维/gi方案/gi编写/gi自动化/gi运维/gi相关代码/gi也/d就是说/c，/w所有/b的/ude1角色/gi都/d要/v先是/d一个/mq开发人员/n然后/c才/d是/vshi一个/mqxx/nz领域/gi人员/gi。/w这种/r模式/gi在/p目前/tit/gi智力/n密集/gi的/ude1互联网/gi行业/gi特别/d明显/a，/w在/p一些/m主要/b的/ude1在线/vn招聘/gi平台/gi里面/f可以/v看到/v大/a的/ude1互联网/gi公司/nis的/ude1招聘/gi信息/gi基本/a都/d是/vshi：/w测试/gi开发/gi工程师/gi发布/gi开发/gi工程师/gi运维/gi开发/gi工程师/gi然后/c给/p的/ude1薪水/gi待遇/gi都/d是/vshi开发人员/n的/ude1待遇/gi，/w甚至/d目前/t很/d多/a公司/nis的/ude1岗位/gi编制/vn都/d是/vshi属于/v开发人员/n之列/ns了/ule。/w在/p互联网/gi行业/gi里面/f，/w软件开发/nz模式/gi已经/d从/p传统/n软件工程/gi向/p敏捷/gi软件工程/gi变迁/vn，/w实现/gi此/rzs思想/gi的/ude1相应/vi的/ude1方法/gi也/d变迁/vn，/w那么/c相应/vi的/ude1从业人员/nz的/ude1技能/gi要求/n也/d要/v变迁/vn。/w换句话/c来说/uls：/wit/gi行业/gi的/ude1领域/gi岗位/gi，/w必须/d要/v掌握/v开发/gi技能/gi，/w如果/c不/d做出/v一/nz些/q改变/v和/cc提升/gi，/w那么/c接下来/vl的/ude1现象/n就是/v开发人员/n全线/n开始/v占领/vit/gi领域/gi类/gi的/ude1岗位/gi了/ule。/w3/nz持续集成/gi实践/gi持续集成/gi的/ude1典型/n的/ude1工具/gi就是/v开源系统/gijenkins/gi。/w通过/p对/pjenkins/gi工具/gi的/ude1应用/gi的/ude1研究/gi，/w绘制/v了/ule一个/mq全/a流水线/n的/ude1软件开发/nz图/gi，/w如下/vi：/w前期/fci/gi环境/n准备/v：/w开发人员/n都/d开发/gi好/a相应/vi的/ude1代码/gi功能/gi开发人员/n开发/gi好/a产品/gi特性/gi代码/gi发布/gi人员/gi开发/gi好/a自动化/gi构建/gi和/cc发布/gi代码/gi测试人员/n开发/gi好/a自动化/gi测试代码/n使用/gijenkins/gi工具/gi将/d这些/rz工具/gi链/ng都/d组合/gi起来/vf将/d流水线/n调试/gi成功/a，/w所有/b环境/n搭建/v好/a以上/f相当/d于是/ccci/gi体系/gi的/ude1建立/gi阶段/gi，/w是/vshi会/v有/vyou一定/b的/ude1技术/gi力量/n投入/v，/w但是/c后面/f的/ude1反复/d迭代/gi过程/gi，/w则/d是/vshi来/vf收回/v这些/rz成本/n的/ude1。/w后期/f迭代/gi工作流/gi：/w开发人员/n向/pgit/gi服务器/gi指定/v分支/n提交/gi了/ule新的/a代码/gigit/gi服务器/gi的/ude1webhook/nz接收/gi到/v提交/gi事件/gi后/f向/pjenkins/gi服务器/gi指定/v接口/gi发起/v请求/gi，/w执行/v构建/gi脚本/gijenkins/gi服务器/gi顺序/gi执行/v构建/gi脚本/gi从/pgit/gi服务器/gi上面/f同步/gi代码执行/n自动/d构建/gi脚本/gi，/w生成/v交付物/nz自动/d搭建/v测试环境/nzjenkins/gi执行/v自动化测试/gi脚本/gijenkins/gi向/p自动化/gi发布/gi系统/gi发起/v请求/gi自动化/gi发布/gi系统/gi进行/vn自动/d灰度/gi发布/gi触发/gi自动化测试/gi系统/gi逐步/d全网/n发布/gi基本上/d，/w如上/b步骤/gi可以/v全自动化/nz无人/b守/v完成/v。/w整个/b过程/gi高效/b且/c不/d容易/ad出错/gi，/w对比/gi手工/gi式/k的/ude1生产/gi模式/gi，/w持续集成/gi手段/n将/d极大/a地/ude2减少/v每次/r迭代/gi的/ude1周期/n，/w保证/v整体/n项目/gi可以/v按照/p极小/d的/ude1步伐/n和/cc极高/d的/ude1频率/n进行/vn稳步/d演进/vn。/w4/nz阶段/gi小结/n此文/r作为/p持续集成/gi系列/n文章/gi的/ude1开端/n，/w还有/v一/nz些/q偏重于/l理论/gi部分/n，/w以/p让/v大家/rr对/p整体/n架构/gi有所/v了解/v，/w同时/c也/d建立/gi起/vf现代/ntc的/ude1软件工程/gi的/ude1整体观念/nz。/w后续/vn的/ude1部分/n将/d侧重/gi于/p环境/n搭建/v及/cc相应/vi的/ude1环境/n代码/gi的/ude1开发/gi的/ude1介绍/gi，/w最后/f能够/v形成/v一套/nz完整/a的/ude1能够/v提供/v生产力/n的/ude1持续集成系统/gi。/w