#FFmpeg/gi基本原理/nz
2014/nz-/nz9/nz-/nz9/nz阅读/gi155/nzffmpeg/gi是/vshi相当/d强大/a的/ude1多媒体/gi编解码/n框架/gi，/w在/p深入分析/v其/rz源代码/gi之前/f必须/d要/v有/vyou基本/a的/ude1多媒体/gi基础知识/nz，/w否则/c其/rz源代码/gi会/v非常/d晦涩/a难懂/a。/w本文/r将/d从/p介绍/gi一/nz些/q基本/a的/ude1多媒体/gi只是/d，/w主要/b是/vshi为/p研读/vffmpeg/gi源代码/gi做/v准备/v，/w比如/v一/nz些/q编解码/n部分/n，/w只有/c真正/d了解/v了/ule多媒体/gi处理/vn的/ude1基本流程/gi，/w研读/vffmpeg/gi源代码/gi才能/n事半功倍/vl。/w下面/f分析/gi一/nz下/f多媒体/gi中/f最/d基本/a最/d核心/n的/ude1视频/gi解码/gi过程/gi，/w平常/a我们/rr从/p网上/s下载/gi一/nz部/q电影/gi或者/c一首歌曲/nz，/w那么/c相应/vi的/ude1多媒体/gi播放器/n为/p我们/rr做好/v了/ule一切/rz工作/gi，/w我们/rr只用/v欣赏/v就/dok/nz了/ule。/w目前/t几乎/d所有/b的/ude1主流/gi多媒体/gi播放器/n都/d是/vshi基于/p开源/gi多媒体/gi框架/giffmpeg/gi来/vf做/v的/ude1，/w可见/cffmpeg/gi的/ude1强大/a。/w下面/f是/vshi对/p一个/mq媒体文件/nz进行/vn解码/gi的/ude1主要流程/gi：/w1./nz /x解复用/gi(/nzdemux/gi)/nz当/p我们/rr打开/gi一个/mq多媒体/gi文件/gi之后/f，/w第一步/nz就是/v解复用/gi，/w称之为/vdemux/gi。/w为什么/ryv需要/v这一步/nz，/w这/rzv一步/nz究竟/d是/vshi做/v什么/ry的/ude1？/w我们/rr知道/v在/p一个/mq多媒体/gi文件/gi中/f，/w既/c包括/v音频/gi也/d包括/v视频/gi，/w而且/c音频/gi和/cc视频/gi都/d是/vshi分开/vi进行/vn压缩/gi的/ude1，/w因为/c音频/gi和/cc视频/gi的/ude1压缩算法/gi不/d一样/uyy，/w既然/c压缩算法/gi不/d一样/uyy，/w那么/c肯定/v解码/gi也/d不/d一样/uyy，/w所以/c需要/v对/p音频/gi和/cc视频/gi分别/d进行/vn解码/gi。/w虽然/c音频/gi和/cc视频/gi是/vshi分开/vi进行/vn压缩/gi的/ude1，/w但是/c为了/p传输/gi过程/gi的/ude1方便/a，/w将/d压缩/gi过/uguo的/ude1音频/gi和/cc视频/gi捆绑/gi在/p一起/s进行/vn传输/gi。/w所以/c我们/rr解码/gi的/ude1第一步/nz就是/v将/d这些/rz绑/v在/p一起/s的/ude1音频/gi和/cc视频流/nz分开/vi来/vf，/w也/d就是/v传说中/nz的/ude1解复用/gi，/w所以/c一句话/l，/w解复用/gi这一步/nz就是/v将/d文件/gi中/f捆绑/gi在/p一起/s的/ude1音频流/nz和/cc视频流/nz分开/vi来/vf以/p方便/a后面/f分别/d对/p它们/rr进行/vn解码/gi，/w下面/f是/vshidemux/gi之后/f的/ude1效果/gi。/w2./nz  /x解码/gi(/nzdecode/nz)/nz这一步/nz不用/d多/a说/v，/w一个/mq多媒体/gi文件/gi肯定/v是/vshi经过/p某种/rz或/c几/d种/q式/k的/ude1压缩/gi的/ude1，/w也/d就是/v通常/d所说/c的/ude1视频/gi和/cc音频/gi编码/gi，/w编码/gi是/vshi为了/p减少/v数据量/n，/w否则/c的话/udh对/p我们/rr的/ude1存储设备/nz是/vshi一个/mq挑战/gi，/w如果/c是/vshi流媒体/nz的话/udh对/p网络带宽/gi也/d是/vshi一个/mq几乎/d不/d可能/v完成/v的/ude1任务/gi。/w所以/c我们/rr必须/d对/p媒体/n信息/gi进行/vn尽可能/d的/ude1压缩/gi。/w3./nzffmpeg/gi中/f解码/gi流程/gi对应/vi的/ude1api/gi函数/gi了解/v了/ule上面/f的/ude1一个/mq媒体文件/nz从/p打开/gi到/v解码/gi的/ude1流程/gi，/w就/d可以/v很/d轻松/a的/ude1阅读/giffmpeg/gi代码/gi，/wffmpeg/gi的/ude1框架/gi也/d基本/a是/vshi按照/p这个/rz流程/gi来/vf的/ude1，/w但/c不是/c每个/r流程/gi对应/vi一个/mqapi/gi，/w下面/f这/rzv副/b图/gi是/vshi我/rr分析/giffmpeg/gi并/cc根据/p自己/rr的/ude1理解/gi得到/v的/ude1ffmpeg/gi解码/gi流程/gi对应/vi的/ude1api/gi，/w我/rr想/v这幅/r图/gi应该/v对/p理解/giffmpeg/gi和/cc编解码/n有/vyou一/nz些/q帮助/v。/wffmpeg/gi中/fdemux/gi这一步/nz是/vshi通过/pavformat/nz_/nzopen/nz_/nzinput/nz（/w）/w这个/rzapi/gi来/vf做/v的/ude1，/w这个/rzapi/gi读出/v文件/gi的/ude1头部/n信息/gi，/w并/cc做/vdemux/gi，/w在此之后/i我们/rr就/d可以/v读取/gi媒体文件/nz中的/v音频/gi和/cc视频流/nz，/w然后/c通过/pav/gi_/nzread/nz_/nzframe/nz(/nz)/nz从/p音频/gi和/cc视频流/nz中/f读/v取出/v基本/a数据流/npacket/nz，/w然后/c将/dpacket/nz送到/vavcodec/nz_/nzdecode/nz_/nzvideo/nz2/nz(/nz)/nz和/cc相/d对应/vi的/ude1api/gi进行/vn解码/gi。/w后续/vn会/v对/pffmpeg/gi的/ude1代码/gi进行/vn深入探讨/i，/w本文/r知识/gi一个/mq铺垫/vn！/w