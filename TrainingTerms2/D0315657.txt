#NoSQL/gi非关系型数据库/gi
本文/r主要/b讲述/v我/rr对/pnosql/gi非关系型数据库/gi的/ude1一点/m理解/gi1./nznosql/gi特点/na/nz./nz模式自由/gi：/w增删/v数据/gi时/qt不必/d进行/vn数据完整性/gi检查/gi。/w不/d需要/v定义/gi表/n结构/gi，/w数据表/gi中的/v每条/d记录/gi都/d可能/v有/vyou不同/a的/ude1属性/gi和式/nzb/nz./nz逆/vg范式化/vn：/w为了/p减少/v数据/gi冗余/n，/w增强/v数据/gi一致性/gi，/wsql/gi要/v进行/vn范式/gi要求/n第三范式/nz，/w大量/m的/ude1连接/gi操作/gi会/v降低/v存储/gi效率/gi。/wnosql/gi用/p空间/n换/v时间/gic/nz./nz多/a分区/gi存储/gi：/w传统/nsql/gi数据库/gi将/d数据存储/gi在/p单一/gi节点/gi上/f，/w通过/p增加/v内存/gi和/cc磁盘空间/nz提升/gi效率/gi，/w这/rzv叫/vi纵向/n扩展/gi，/w不可/v持续/vd，/w因为/c系统/gi总会/nis达到/v一个/mq极限/n。/wnosql/gi会/v将/d数据/gi进行/vn分区/gi，/w将/d数据存储/gi在/p多/a个/q节点/gi上/f，/w横向/n扩展/gi方式/n，/w提高/v性能/gi，/w满足/v大数据时代/gi要求/nd/nz./nz弹性/n可扩展/nz：/w可/v在/p系统/gi运行/gi的/ude1过程/gi中/f动态/gi的/ude1删除/gi或/c增加/v节点/gi。/wnosql/gi可/v再/d系统/gi运行/gi过程/gi中/f动态/gi的/ude1增加/v或/c删除/gi节点/gi，/w数据/gi块/q可以/v在/p节点/gi之间/f自动/d移动/vne/nz./nz多/a副本/n异步/gi复制/gi:/w为了/p保证数据/n的/ude1安全/gi，/wnosql数据库/gi会/v存储/gi多/a个/q副本/n，/w比如/vhadoop/gi生态系统/nz中的/vhbase/gi，/w借助于/v底层/n的/ude1hdfs/gi分布式文件系统/nz，/w默认/v情况下/nz可以/v有/vyou三个/nz副本/n，/w且/c存储/gi在/p不同/a的/ude1三个/nz节点/gi上/ff/nz./nz软/a事务/gi：/w不能/v完全/ad满足/v事务/gi的/ude1acid/gi特性/gi，/w保证/v事务/gi的/ude1最终/d一致性/gi。/w事务/gi是/vshisql/gi数据库/gi的/ude1概念/gi，/w一个/mq事务/gi包含/v多/a个/q数据库操作/gi，/w且/c这些/rz操作/gi要么/c全/a做/v要么/c都/d不/d做/v，/w比如/v银行/gi转账/vn，/w转账/vn和/cc收款/v就是/v一个/mq完整/a的/ude1事务/gi，/w他们/rr是/vshi不可/v拆分/gi的/ude1，/w这样/rzv才能/n保证系统/n中/f数据/gi的/ude1一致性/gi。/wnosql/gi保证/v的/ude1是/vshi事务/gi的/ude1最终/d一致性/gi，/w即/v一个/mq用户/gi立即/d进行/vn数据/gi更新/gi后/f，/w其余/rz的/ude1用户/gi不能/v立即/d得到/v最新/a的/ude1数据/gi，/w会/v有/vyou一定/b延迟/v。/w比如/v12306/nz中/f看到/v有票/n，/w可是/c点击/v买票/nz的/ude1时候/n告诉/v我们/rr票/n已/d售完/v，/w火车票/n数量/n的/ude1更新/gi不能/v立即/d同步/gi到/v所有/b的/ude1节点/gi2./nz什么/ry是/vshiacid/gi特性/gi？/wa/nz(/nzatomic/nz原子性/nz)/nz c/nz(/nzconsistency/nz一致性/gi)/nz i/nz(/nzisolation/nz隔离/vn性/ng)/nz d/nz(/nzdurability/nz持久性/gi)/nzsql/gi数据库/gi是/vshi必须/d要/v满足/vacid/gi特性/gi的/ude1，/w但是/cnosql/gi非关系型数据库/gi对此/d没有/v任何/rz要求/n3./nznosql/gi适用/vi的/ude1一/nz些/q场景/gi一般/ad对/p数据/gi冗余/n程度/n比较/gi高/a，/w并且/c对/p数据库/gi不/d要求/n有/vyou事务/gi一致性/gi，/w比如/v像/vsns/nz网站/gi，/w他们/rr并不/d要求/n更新/gi的/ude1东西/n要/v时刻/n同步/gi在/p用户/gi的/ude1界面/gi，/w比如/v新浪/ntc微博/n这个/rzapp/gi，/w实时/n更新/gi的/ude1只有/c新鲜事/n下面/f的/ude1那个/rz气泡/n提示/gi，/w还有/v信息/gi推送/nz等/udeng，/w这些/rz必须/d保证/v事务/gi一致性/gi，/w但是/c新鲜事/n里面/f的/ude1内容/gi如果/c保证/v实时/n对/p用户/gi更新/gi的话/udh，/w那/rzv对/p服务器/gi的/ude1压力/n实在/d是/vshi太大/d了/ule，/w并且/c有/vyou大量/m僵尸/n粉/ag，/w服务器/gi会/v做/v很/d多/a无用功/n。/w这时/rzt就/d没/d必要/a采用/v事务/gi一致性/gi，/w我们/rr点/gi刷新/v再/d更新/gi信息/gi，/w就算/d信息/gi不是/c同步/gi的/ude1，/w是/vshi过去/vf式/k的/ude1，/w对/p我们/rr也/d没有/v任何/rz影响/gi。/w但是/c像/v银行/gi系统/gi就/d不行/a了/ule，/w我们/rr在/p转账/vn的/ude1时候/n转入方/n和/cc接收/gi方/q的/ude1信息/gi必须/d是/vshi同步/gi的/ude1，/w如果/c钱/n转/v过去/vf但是/c接收/gi方/q的/ude1钱款/nz没收/v到/v，/w那/rzv在/p电影/gi里/f估计/gi早就/d撕票/v了/ule。/w不能/v完全/ad满足/v事务/gi的/ude1acid/gi特性/gi，/w保证/v事务/gi的/ude1最终/d一致性/gi