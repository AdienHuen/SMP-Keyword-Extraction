#敏捷测试/gi与/cc传统测试/gi的/ude1区别/gi
在/p敏捷测试/gi中/f也/d有/vyou测试/gi活动/gi乃至/c专职/b的/ude1测试人员/n，/w但/c其/rz活动/gi内容/gi和/cc目标/gi是/vshi有/vyou显著/ad差异/n的/ude1。/w一般/ad在/p传统开发/gi团队/gi中/f，/w产品经理/gi（/w或/c销售/gi）/w为/p范围/n或/c称之为/v需求/gi负责/v，/w项目经理/nnt和/cc开发组/n为/p进度/gi负责/v，/w测试/gi组/n为/p质量/gi负责/v，/w部门经理/nnt为/p成本/n负责/v，/w结果/n就是/v当四者/nz发生/v矛盾/gi时/qt，/w会/v有/vyou四个/nz部门/gi各自/rr站/vi在/p自己/rr的/ude1立场/n上/f，/w从而/c导致/gi沟通/gi不畅/a或/c或/c博弈/vn成分/n超过/v合作/vn。/w在/p敏捷开发/gi中/f需求/gi与/cc进度/gi的/ude1冲突/gi由/p计划/gi会/v和/cc自/p组织/gi团队/gi机制/gi解决/v，/w成本/n由/pbdc/nz和/cc故事/gi点/gi开发/gi率/v的/ude1提升/gi来/vf解决/v（/w解决/v的/ude1不好/a）/w，/w而/cc进度/gi与/cc质量/gi间/f的/ude1矛盾/gi，/w则/d由/p新型/gi的/ude1测试/gi理念/gi来/vf解决/v。/w在/p传统测试/gi中/f，/w测试/gi团队/gi被/pbei认为/v是/vshi找/vbug/gi的/ude1人/n，/w比如/v如果/cbug/gi众多/a，/w则/d测试人员/n和/cc开发人员/n会/v一起/s加班/vi，/w后者/rzv修改/gibug/gi，/w前者/rzv验证/v是否/v修改/gi好/a。/w而/cc如果/cbug/gi很难/d复现/nz，/w则/d付出/v努力/gi最多/ad的/ude1不是/c开发人员/n，/w而是/c测试人员/n。/w在/p敏捷测试/gi中/f，/w测试人员/n则/d是/vshi帮助/v加快进度/l的/ude1人/n，/w也/d就是/v提高/v生产率/n的/ude1人/n。/w一个/mq测试人员/n怎么/ryv能/v提高/v开发/gi生产率/n呢/y？/w下面/f几/d个/q因素/gi保证/v其/rz可以/v发生/v。/w1./nz /x若/c缺陷/gi发现/v越/d及时/ad越/d容易/ad修改/gi。/w比如/v在/p1/nz天内/s就/d能/v发现/v，/w则/d1/nz天内/s发生/v的/ude1改动/vn很少/ad，/w很容易/nz找到/v问题/gi。/w这/rzv就/d需要/v一个/mq自动测试/nz工具/gi来/vf以/p接近/v实时/n地/ude2发现/v缺陷/gi。/w比如/v如果/c在/p每天/r能/v进行/vn一次/nz持续集成/gi，/w则/d集成测试/gi不能/v通过/p的/ude1原因/n会/v很/d单一/gi很容易/nz定位/gi。/w设想/vn一个/mq数字电视/nz系统/gi，/w从/p授权/v//nz编码/gi//nz加密/gi//nz复用/gi//nz调制/vn//nz发送/gi//nz接收/gi//nz分流/gi//nz解密/gi//nz显示/gi…/w…/w环节/gi很/d多/a信息/gi很/d不/d透明/a，/w若/c在/p最后/f一刻/m才/d做/v集成/vn，/w基本上/d无法/v判断/gi问题/gi出/vf在/p哪里/rys。/w2./nz /x若/c发现/v缺陷/gi的/ude1人/n就是/v制造/gi缺陷/gi的/ude1人/n，/w则/d越/d容易/ad修改/gi。/w比如/v如果/c开发人员/n有/vyou自动测试/nz工具/gi能/v快速/d看看/v自己/rr写/v的/ude1程序/gi有/vyou没有/v问题/gi，/w而/cc不是/c交给/v测试人员/n发现/v，/w则/d更容易/nz修改/gi。/w想象/v一/nz下/f编译器/gi就/d知道/v了/ule，/w如果/c编译/gi活动/gi都/d要/v委派/v给/p别人/rr（/w最然/nz现在/t很难/d想象/v，/w在/p软件开发/nz的/ude1极/d早期/f其实/d就是/v这样/rzv的/ude1）/w，/w效率/gi会/v很低/d。/w3./nz /x一个/mq开发人员/n花费/v在/p查找/gi和/cc修改/gibug/gi上/f的/ude1时间/gi越少/nz，/w则/d开发/gi效率/gi越高/d。/w另外/c一个/mq推论/vn是/vshi：/w在/p0/nz缺陷/gi的/ude1产品/gi上/f增加/v一个/mq功能/gi，/w比/p缺陷/gi缠身/v的/ude1产品/gi上/f要/v容易/ad得/ude3多/a。/w因此/c1/nz和/cc2/nz两/nz条/q的/ude1推论/vn就是/v开发/gi效率/gi提高/v。/w敏捷测试/gi的/ude1人/n做/v什么/ry？/w1./nz /x不断/d推进/vi自动化测试/gi的/ude1效率/gi和/cc效果/gi。/w2./nz /x不断/d推进/vi持续集成/gi的/ude1效率/gi和/cc效果/gi。/w3./nz /x不断/d提高/v开发人员/n开发/gi功能/gi而非/c处理/vn缺陷/gi的/ude1时间/gi（/w即使/c缺陷/gi是/vshi开发人员/n自己/rr制造/gi自己/rr修改/gi）/w。/w当然/d有/vyou一个/mq前提/n，/w就是/v每个/r软件/gi对待/v需求/gi//nz进度/gi//nz质量/gi//nz成本/n的/ude1目标/gi和/cc策略/gi是/vshi不同/a的/ude1，/w敏捷/gi测试人员/n不能/v有/vyou本位主义/n，/w不能/v片面追求/i测试/gi活动/gi本身/rz的/ude1效果/gi，/w而是/c应该/v帮助/v开发/gi团队/gi达成/v其/rz目标/gi和/cc策略/gi。/w