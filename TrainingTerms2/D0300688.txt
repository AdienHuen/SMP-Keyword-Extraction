#【/w设计模式/nz学习笔记/gi十四/nz】/w【/w行为模式/gi】/w【/w职责链模式/gi(/nzChain Of Responsibility/nz)/nz】/w
本文/r是/vshi学习/gi刘伟/nr技术/gi博客/gi和/cc《/w设计/gi模式-可复/nz用/p面向对象/gi软件/gi的/ude1基础/gi》/w笔记/gi，/w博客/gi链接/gi：/w主要/b是/vshi对/p博客/gi和/cc书本/n做/v提炼/v和/cc记录/gi，/w更多/ad是/vshi对/p设计模式/nz的/ude1基础/gi框架/gi学习/gi，/w细节/gi将略/n去/vf，/w侧重/gi对/p每个/r设计模式/nz框架/gi的/ude1理解/gi。/w我/rr应该/v理解/gi和/cc掌握/v的/ude1：/w1/nz）/w能够/v画/v出/vf这个/rz设计模式/nz的/ude1架构/gi框图/gi；/w2/nz）/w能够/v根据/p架构/gi框图/gi写出/v对应/vi的/ude1伪代码/nz；/w3/nz）/w这个/rz模式/gi的/ude1应用场景/gi，/w主要/b优缺点/gi。/w1./nz职责链模式/gi以前/f大学/gi和/cc舍友/nz玩/v锄大地/nz，/w里面/f就/d已经/d蕴含着/n职责链模式/gi。/w比/p我/rr打/v一/nz张/q牌/n，/w那么/c按照/p逆时针/d顺序/gi，/w下家/n根据/p自身/rr的/ude1牌/n决定/v打/v不/d打/v，/w直到/v最后/f。/w这个/rz过程/gi其实/d就/d已经/d形成/v类/gi的/ude1职责链模式/gi。/w职责链/gi可以/v是/vshi一条/nz直线/n、/w一个/mq环/n、/w或者/c一个/mq树形/gi结构/gi。/w常见/a的/ude1是/vshi直线型/b，/w沿着/p一条单/nz向/p的/ude1链/ng式/k来/vf传递/v请求/gi。/w链/ng上/f的/ude1每一个/nz对象/gi都/d是/vshi处理/vn者/k，/w客户端/gi只需/v把/pba请求/gi发送到/l链/ng上/f即可/v，/w实现/gi请求/gi发送者/n和/cc请求/gi处理/vn者/k解耦/gi。/w（/w1/nz）/w定义/gi职责链模式/gi：/w使/v多/a个/q对象/gi都/d有/vyou机会/gi处理/vn请求/gi，/w从而/c避免/v请求/gi的/ude1发送者/n和/cc接受者/gi之间/f的/ude1耦合/vn关系/gi。/w将/d这些/rz对象/gi连成/v一条链/nz，/w并/cc沿着/p这/rzv条/q链/ng传递/v该/rz请求/gi，/w直到/v有/vyou一个/mq对象/gi处理/vn它/rr为止/u。/w1/nz）/w职责链模式/gi结构图/gi2/nz）/w参与者/gia/nz)/nz handler/nz(/nz抽象/gi处理/vn者/k)/nz：/w定义/gi一个/mq请求/gi处理/vn接口/gi，/w实现/gi后/f继链/nz；/w也/d可以/v在/p这里/rzs定义/gi一个/mq抽象/gi处理/vn者/k对象/gi，/w作为/p后继/v。/wb/nz)/nz concretehandler/nz(/nz具体/a处理/vn者/k)/nz：/w处理/vn它/rr所/usuo负责/v的/ude1请求/gi；/w可/v访问/gi他/rr的/ude1后继者/nz，/w如果/c可以/v处理/vn该/rz请求/gi，/w就/d处理/vn之/uzhi，/w否则/c将/d该/rz请求/gi转发给/v他/rr的/ude1后继者/nz。/w即/v一/nz处理/vn请求/gi；/w二转发/nz请求/gi。/wc/nz)/nz client/nz：/w向/p链/ng上/f的/ude1处理/vn者/k提交/gi请求/gi。/w3/nz）/w看图/v写/v代码/gi4/nz）/w注意/v职责链模式/gi并/cc不是/c创建/gi职责链/gi，/w职责链/gi的/ude1工作/gi必须/d由/p系统/gi的/ude1其他/rzv部分/n来/vf完成/v，/w一般/ad是/vshi在/p使用/gi该/rz职责链/gi的/ude1客户端/gi中/f创建/gi职责链/gi。/w（/w2/nz）/w总结/gi1/nz）/w优点/gia/nz)/nz /x降低/v耦合度/gp；/w该/rz模式/gi使得/vi一个/mq对象/gi无需/v知道/v是/vshi其他/rzv哪/ry一个/mq对象/gi处理/vn其/rz请求/gi。/w对象/gi仅/d知道/v该/rz请求/gi会/v被/pbei正确/a的/ude1处理/vn；/w接受者/gi和/cc发送者/n都/d没有/v对方/n的/ude1明确/a信息/gi，/w且/c链/ng中/f不/d需要/v知道/v链/ng的/ude1结构/gi。/wb/nz)/nz /x增强/v了/ule给/p对象/gi指派/gi职责/gi的/ude1灵活性/gi；/w可以/v通过/p在/p运行/gi时刻/n对/p该/rz链/ng进行/vn动态/gi的/ude1增加/v或/c修改/gi来/vf增加/v或/c改变/v处理/vn一个/mq请求/gi的/ude1职责/gi。/wc/nz)/nz /x增加/v或/c删减/v一个/mq具体/a处理/vn者/k时/qt，/w仅/d需/v在/p客户端/gi重新/d建链/nz即可/v，/w无需/v修改/gi其他/rzv代码/gi，/w算是/v符合/v开闭/nz原则/gi。/w2/nz）/w缺点/gia/nz)/nz /x不/d保证/v被/pbei接受/gi处/n，/w没有/v明确/a的/ude1接受者/gi，/w有可能/nz最后/f都/d得不到/v处理/vn；/wb/nz)/nz /x建链/nz不当/a，/w有可能会/nz造成/v循环/gi调用/gi，/w陷入/v死/v循环/gi。/w（/w3/nz）/w适用/vi场景/gi1/nz）/w有/vyou多/a个/q对象/gi可以/v处理/vn同一个/b请求/gi，/w具体/a哪个/ry对象/gi处理/vn该/rz请求/gi运行/gi时刻/n在/p确定/v。/w2/nz）/w你/rr想/v在/p不/d明确/a指定/v接受者/gi的/ude1情况下/nz，/w像/v多/a个/q对象/gi中的/v一个/mq提交/gi一个/mq请求/gi。/w3/nz）/w可/v处理/vn一个/mq请求/gi的/ude1对象/gi集合/gi应/v被/pbei动态/gi指定/v。/w即/v客户端/gi可以/v动态/gi的/ude1创建/gi职责链/gi来/vf处理/vn请求/gi，/w还/d可以/v改变/v链/ng中/f处理/vn者/k之间/f的/ude1先后/d次序/gi。/w