#Java/gi程序/gi性能/gi优化-调/nz优/ag层次/n
前言/gi /x前/f篇/q知道/v了/ule性能优化/gi相关/vn概念/gi，/w本篇/r就/d继续/v介绍/gi如何/ryv调优/gi。/w代码优化/gi是/vshi我们/rr最/d常见/a的/ude1，/w但是/c除此之外/al，/w还有/v软件架构/gi上/f、/wjvm/nz虚拟机/gi层/gi、/w数据库/gi以及/cc操作系统/gi层面/n都/d可以/v通过/p各种/rz手段/n进行/vn调优/gi，/w从而/c提升/gi性能/gi。/w正题/n优化/gi的/ude1一般/ad步骤/gi：/w如果/c我们/rr的/ude1系统/gi出现/v了/ule问题/gi，/w那么/c最主要/nz的/ude1就是/v要/v查找/gi并/cc解决/v性能/gi瓶颈/gi问题/gi，/w同时/c性能优化/gi可能/v对/p原有/v的/ude1实现/gi进行/vn较大/d的/ude1改动/vn，/w因此/c一定/b要/v测试/gi打到/v目标/gi之后/f才/d结束/v。/w1./nz设计/gi调优/gi：/w设计阶段/n一个/mq良好/a的/ude1系统设计/gi可以/v规避/v很/d多/a潜在/b的/ude1性能/gi问题/gi。/w因此/c，/w尽可能/d多/a花/n些/q时间/gi在/p系统设计/gi上/f，/w是/vshi创建/gi高性能/gi程序/gi的/ude1关键/n。/w我们/rr学/v过/uguo设计模式/nz，/w所以/c在/p设计阶段/n要/v善用/v设计模式/nz，/w如/v单例/gi，/w代理/gi，/w享元/nz，/w观察者模式/gi等等/udeng。/w除了/p设计模式/nz，/w在/p设计阶段/n我们/rr也/d可以/v根据/p业务/gi来/vf适当/a的/ude1使用/gi优化/gi组件/gi，/w如/v缓冲/vn，/w缓存/gi，/w连接池/nz等/udeng。/w2./nz代码/gi调优/gi：/w开发阶段/n这个/rz是/vshi开发人员/n最/d熟悉/v的/ude1了/ule，/w做/v过/uguo重构/gi的/ude1应该/v都/d有/vyou感受/gi，/w同样/d一个/mq功能/gi，/w好/a的/ude1实现/gi与/cc坏/a的/ude1实现/gi相差/v甚远/nz。/w一定/b要/v注意/v避免/v死锁/gi，/w死/v循环/gi。/w3./nz数据库调优/gi：/w开发阶段/njava/gi程序/gi可以/v使用/gijdbc/gi方式/n连接/gi数据库/gi，/w故/c我们/rr队/n数据库调优/gi可/v分为/v3/nz个/q部分/n：/w1./nz在/p应用/gi层/gi对/psql语句/gi进行/vn优化/gi2./nz对/p数据库/gi进行/vn优化/gi3./nz对/p数据库/gi软件/gi进行/vn优化/gi4./nz操作系统/gi调优/gi不同/a的/ude1操作系统/gi调优/gi的/ude1手段/n和/cc参数/gi不同/a，/w例如/v共享内存/nz段/q、/w信号量/gi、/w共享内存/nz最大/gm、/w共享内存/nz最小/a都/d是/vshi可以/v进行/vn优化/gi的/ude1系统资源/gi。/w小结/n：/w下篇/n会/v具体/a介绍/gi各个/rz阶段/gi的/ude1调优/gi方法/gi。/w