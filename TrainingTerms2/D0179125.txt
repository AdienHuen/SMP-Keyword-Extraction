#UNIX/nz//nzLINUX /nz平台/gi可执行文件/gi加载/gi过程/gi
本文/r讨论/gi了/ule unix/nz//nzlinux /nz平台/gi下/f三种/nz主要/b的/ude1可执行文件/gi式/k：/wa/nz./nzout/nz（/wassembler and link editor output /nz汇编/gi器/ng和/cc链接/gi编辑器/gi的/ude1输出/gi）/w、/wcoff/nz（/wcommon object file format /nz通用/gi对象/gi文件/gi式/k）/w、/welf/nz（/wexecutable and linking format /nz可执行/nz和/cc链接/gi式/k）/w。/w首先/d是/vshi对/p可执行文件/gi式/k的/ude1一个/mq综述/n，/w并/cc通过/p描述/gi elf /nz文件/gi加载/gi过程/gi以/p揭示/v可执行文件/gi内容/gi与/cc加载/gi运行/gi操作/gi之间/f的/ude1关系/gi。/w随后/d依此/d讨论/gi了/ule此/rzs三种/nz文件/gi式/k，/w并/cc着重/vd讨论/gi elf /nz文件/gi的/ude1动态/gi连接/gi机制/gi，/w其间/f也/d穿插/v了/ule对/p各种/rz文件/gi式/k优缺点/gi的/ude1评价/gi。/w最后/f对/p三种/nz可执行文件/gi式/k有/vyou一个/mq简单/a总结/gi，/w并/cc提出/v作者/nnt对/p可/v文件/gi式/k评价/gi的/ude1一些/m感想/gi。/w可执行文件/gi式/k综述/n相对于/nz其它/rz文件类型/nz，/w可执行文件/gi可能/v是/vshi一个/mq操作系统/gi中/f最重要/nz的/ude1文件类型/nz，/w因为/c它们/rr是/vshi完成/v操作/gi的/ude1真正/d执行者/nnd。/w可执行文件/gi的/ude1大小/n、/w运行/gi速度/n、/w资源/gi占用/v情况/n以及/cc可扩展性/gi、/w可移植性/gi等/udeng与/cc文件/gi式/k的/ude1定义/gi和/cc文件/gi加载/gi过程/gi紧密/ad相关/vn。/w研究/gi可执行文件/gi的/ude1式/k对/p编写/gi高性能/gi程序/gi和/cc一/nz些/q黑客技术/nz的/ude1运用/v都/d是/vshi非常/d有/vyou意义/n的/ude1。/w不管/c何种/r可执行文件/gi式/k，/w一/nz些/q基本/a的/ude1要素/gi是/vshi必须/d的/ude1，/w显而易见/bl的/ude1，/w文件/gi中/f应/v包含/v代码/gi和/cc数据/gi。/w因为/c文件/gi可能/v引用/gi外部/f文件/gi定义/gi的/ude1符号/gi（/w变量/gi和/cc函数/gi）/w，/w因此/c重定位/gi信息/gi和/cc符号/gi信息/gi也/d是/vshi需要/v的/ude1。/w一/nz些/q辅助/vn信息/gi是/vshi可选/v的/ude1，/w如/v调试信息/n、/w硬件/gi信息/gi等/udeng。/w基本上/d任意/d一种/nz可执行文件/gi式/k都/d是/vshi按/p区间/gi保存/gi上述/b信息/gi，/w称为/v段/q（/wsegment/nz）/w或/c节/q（/wsection/nz）/w。/w不同/a的/ude1文件/gi式/k中段/f和/cc节/q的/ude1含义/n可能/v有/vyou细微/a区别/gi，/w但/c根据/p上下文/gi关系/gi可以/v很/d清楚/a的/ude1理解/gi，/w这/rzv不是/c关键问题/n。/w最后/f，/w可执行文件/gi通常/d都/d有/vyou一个/mq文件/gi头部/n以/p描述/gi本/rz文件/gi的/ude1总体/n结构/gi。/w相对/d可执行文件/gi有/vyou三个/nz重要/a的/ude1概念/gi：/w编译/gi（/wcompile/nz）/w、/w连接/gi（/wlink/nz，/w也/d可/v称为/v链接/gi、/w联接/v）/w、/w加载/gi（/wload/nz）/w。/w源程序/gi文件/gi被/pbei编译成/n目标/gi文件/gi，/w多/a个/q目标/gi文件/gi被/pbei连接/gi成/v一个/mq最终/d的/ude1可执行文件/gi，/w可执行文件/gi被/pbei加载/gi到/v内存/gi中/f运行/gi。/w因为/c本文/r重点/n是/vshi讨论/gi可执行文件/gi式/k，/w因此/c加载/gi过程/gi也/d相对/d重点/n讨论/gi。/w下面/f是/vshilinux/gi平台/gi下/felf/nz文件/gi加载/gi过程/gi的/ude1一个/mq简单/a描述/gi。/w1/nz：/w内核/gi首先/d读/velf/nz文件/gi的/ude1头部/n，/w然后/c根据/p头部/n的/ude1数据/gi指示/gi分别/d读入/gi各种/rz数据结构/gi，/w找到/v标记/gi为/p可/v加载/gi（/wloadable/nz）/w的/ude1段/q，/w并/cc调用函数/n mmap/nz(/nz)/nz把/pba段/q内容/gi加载/gi到/v内存/gi中/f。/w在/p加载/gi之前/f，/w内核/gi把/pba段/q的/ude1标记/gi直接/ad传递/v给/p mmap/nz(/nz)/nz，/w段/q的/ude1标记/gi指示/gi该段/r在/p内存/gi中/f是否/v可读/v、/w可写/v，/w可执行/nz。/w显然/ad，/w文本/gi段/q是/vshi只读/v可执行/nz，/w而/cc数据/gi段/q是/vshi可读/v可写/v。/w这种/r方式/n是/vshi利用/v了/ule现代/ntc操作系统/gi和/cc处理器/gi对/p内存/gi的/ude1保护/gi功能/gi。/w2/nz：/w内核/gi分析/gi出/vfelf/nz文件/gi标记/gi为/p pt/nz_/nzinterp /nz的/ude1段/q中所/j对应/vi的/ude1动态/gi连接器/n名称/n，/w并/cc加载/gi动态/gi连接器/n。/w现代/ntc linux /nz系统/gi的/ude1动态/gi连接器/n通常/d是/vshi /x//nzlib/nz//nzld/nz-/nzlinux/gi./nzso/nz./nz2/nz，/w相关/vn细节/gi在/p后面/f有/vyou详细描述/n。/w3/nz：/w内核/gi在/p新/a进程/gi的/ude1堆栈/n中/f设置/gi一/nz些/q标记-对/nz，/w以/p指示/gi动态/gi连接器/n的/ude1相关/vn操作/gi。/w4/nz：/w内核/gi把/pba控制/vn传递/v给/p动态/gi连接器/n。/w5/nz：/w动态/gi连接器/n检查程序/n对外部/nis文件/gi（/w共享/gi库/n）/w的/ude1依赖性/n，/w并/cc在/p需要/v时/qt对/p其/rz进行/vn加载/gi。/w6/nz：/w动态/gi连接器/n对/p程序/gi的/ude1外部/f引用/gi进行/vn重定位/gi，/w通俗/a的/ude1讲/v，/w就是/v告诉/v程序/gi其/rz引用/gi的/ude1外部/f变量/gi//nz函数/gi的/ude1地址/gi，/w此/rzs地址/gi位于/v共享/gi库/n被/pbei加载/gi在/p内存/gi的/ude1区间/gi内/f。/w动态/gi连接/gi还有/v一个/mq延迟/v（/wlazy/nz）/w定位/gi的/ude1特性/gi，/w即/v只/d在/p真正/d需要/v引用/gi符号/gi时/qt才/d重定位/gi，/w这/rzv对/p提高/v程序运行/n效率/gi有/vyou极大/a帮助/v。/w7/nz：/w动态/gi连接器/n执行/v在/pelf/nz文件/gi中/f标记/gi为/p /x./nzinit /nz的/ude1节/q的/ude1代码/gi，/w进行/vn程序运行/n的/ude1初始化/v。/w在/p早期/f系统/gi中/f，/w初始化/v代码/gi对应/vi函数/gi /x_/nzinit/nz(/nzvoid/nz)/nz(/nz函数/gi名/q强制/vd固定/a)/nz，/w在/p现代/ntc系统/gi中/f，/w则/d对应/vi形式/gi为/pvoid/nz_/nz_/nzattribute/nz(/nz(/nzconstructor/nz)/nz)/nzinit/nz_/nzfunction/nz(/nzvoid/nz)/nz{/nz…/w…/w}/nz其中/rz函数/gi名为/v任意/d。/w8/nz：/w动态/gi连接器/n把/pba控制/vn传递/v给/p程序/gi，/w从/p elf /nz文件/gi头部/n中/f定义/gi的/ude1程序/gi进入/v点/gi开始/v执行/v。/w在/p a/nz./nzout /nz式/k和/ccelf/nz式/k中/f，/w程序/gi进入/v点/gi的/ude1是/vshi显式/nz存在/v的/ude1，/w在/p coff /nz式/k中/f则/d是/vshi由/p规范/gi隐含/v定义/gi。/w从/p上面/f的/ude1描述/gi可以/v看出/v，/w加载/gi文件/gi最重要/nz的/ude1是/vshi完成/v两件/nz事情/n：/w加载/gi程序段/gi和/cc数据/gi段/q到/v内存/gi；/w进行/vn外部/f定义/gi符号/gi的/ude1重定位/gi。/w重定位/gi是/vshi程序/gi连接/gi中/f一个/mq重要/a概念/gi。/w我们/rr知道/v，/w一个/mq可执行程序/gi通常/d是/vshi由/p一个/mq含有/v main/nz(/nz)/nz /x的/ude1主/ag程序/gi文件/gi、/w若/c干/v目标/gi文件/gi、/w若/c干/v共享/gi库/n（/wshared libraries/nz）/w组成/gi。/w（/w注/v：/w采用/v一/nz些/q特别/d的/ude1技巧/gi，/w也/d可/v编写/gi没有/v main /nz函数/gi的/ude1程序/gi，/w请参阅/nz /x参考资料/nz /x2/nz）/w一个/mq c /nz程序/gi可能/v引用/gi共享/gi库定义/nz的/ude1变量/gi或/c函数/gi，/w换句话说/c就是/v程序运行/n时/qt必须/d知道/v这些/rz变量/gi//nz函数/gi的/ude1地址/gi。/w在/p静态/gi连接/gi中/f，/w程序/gi所有/b需要/v使用/gi的/ude1外部/f定义/gi都/d完全/ad包含/v在/p可执行程序/gi中/f，/w而/cc动态/gi连接/gi则/d只/d在/p可执行文件/gi中/f设置/gi相关/vn外部/f定义/gi的/ude1一/nz些/q引用/gi信息/gi，/w真正/d的/ude1重定位/gi是/vshi在/p程序运行/n之时/r。/w静态/gi连接/gi方式/n有/vyou两/nz个/q大/a问题/gi：/w如果/c库/n中/f变量/gi或/c函数/gi有/vyou任何/rz变化/gi都/d必须/d重新/d编译/gi连接/gi程序/gi；/w如果/c多/a个/q程序/gi引用/gi同样/d的/ude1变量/gi//nz函数/gi，/w则/d此/rzs变量/gi//nz函数/gi会/v在/p文件/gi//nz内存/gi中/f出现/v多/a次/qv，/w浪费/gi硬盘/gi//nz内存空间/nz。/w比较/gi两/nz种/q连接/gi方式/n生成/v的/ude1可执行文件/gi的/ude1大小/n，/w可以/v看出/v有/vyou明显/a的/ude1区别/gi。/w