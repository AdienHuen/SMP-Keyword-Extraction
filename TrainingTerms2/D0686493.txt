#(/nzC/nz语言-数据/nz结构/gi)/nz还原/gi二叉树-改进/nz
第一次/nz写/v的/ude1算法/gi老师/gi给予/vn了/ule建议/gi如下/vi：/w对于/p问题/gi本身/rz，/w你/rr能/v正确/a输出/gi后/f序序列/nz，/w说明/v二叉树/gi已经/d正确/a建立/gi了/ule对于/p代码/gi，/w有些/rz可/v改进/gi的/ude1地方/n1./nzvoid sublm/nz(/nzchar a/nz[/nz]/nz,/nz char b/nz[/nz]/nz,/nz char c/nz)/nz;/nz//nz//nz获取/gi中/f序/n遍历/gi的/ude1左边/f这些/rz函数/gi的/ude1参数/gi，/w数组/gi类型/gi用/p了/ule大写/n字母/gi，/w单个/b的/ude1字符/gi用/p小写字母/nz更好/d一些/m，/w对于/p可读性/n2./nz /x具体/a实现/gi的/ude1时候/n，/w你/rr使用/gi了/ule很/d多/a的/ude1临时/gi数组/gi变量/gi，/w其实/d是/vshi可以/v避免/v的/ude1：/w由始至终/vl先序/nz和/cc中/f序/n字符串/gi都/d没/d改变/v，/w因此/c，/w每次/r只/d需要/v记录/gi下/f临时/gi数组/gi对应/vi的/ude1左右/f两/nz个/q位置/gi即可/v、/w而/cc不用/d把/pba数组/gi的/ude1这些/rz元素/gi复制/gi出来/vf，/w这样/rzv函数/gi的/ude1参数/gi只/d需要/v传递/v这/rzv左右/f两/nz个/q位置/gi变量/gi即可/v根据/p老师/gi的/ude1建议/gi，/w我/rr对/p算法/gi进行/vn改进/gi按照/p老师/gi给/p的/ude1建议/gi，/w不在/v定义/gi临时/gi数组/gi只/d记录/gi首尾/n，/w整体/n看上去/v很/d简洁/gi，/w思路/gi和/cc上次/t的/ude1算法/gi一样/uyy，/w唯一/b改变/v的/ude1是/vshi仅仅/d用/p首尾/n来/vf记录/gi数组/gi