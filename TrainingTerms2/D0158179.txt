#学习/gi数据结构/gi /x-/nz>/nz /x算法/gi的/ude1介绍/gi /x./nz
2015/nz-/nz09/nz-/nz07/nz /x16/nz:/w37/nz /x0/nz人/n阅读/gi /x(/nz0/nz)/nz1./nz /x算法/gi的/ude1定义/gi /x从/p广义/n上/f讲/v,/nz /x算法/gi是/vshi指/v解决问题/v的/ude1方法/gi和/cc步骤/gi。/w /x在/p计算机/gi中/f,/nz /x算法/gi是/vshi指令/gi的/ude1有限/a集合/gi,/nz /x而/cc每/rz一条/nz指令/gi表示/v一个/mq或/c多/a个/q操作/gi。/w  /x例如/v解决/v将/d大象/n装/v冰箱/n里/f的/ude1算法/gi为/p:/w  /x第一步/nz:/w /x将/d冰箱门/n打开/gi;/nz   /x第二步/nz:/w /x把/pba大象/n装进去/v;/nz  /x第三步/nz:/w /x把/pba冰箱门/n合上/v。/w /x这/rzv就是/v解决/v如何/ryv将/d大象/n装进/vf冰箱/n的/ude1算法/gi。/w2./nz /x算法/gi的/ude1描述/gi /x一个/mq算法/gi可以/v用/p多/a种/q描述/gi方法/gi进行/vn表示/v,/nz /x常用/a的/ude1有/vyou以下/f4/nz种/q:/w  /x1./nz /x自然语言/gm;/nz  /x2./nz /x流程图/gi;/nz  /x3./nz /x伪/ag代码/gi;/nz  /x4./nz /x计算机语言/gi。/w  /x自然语言/gm:/w /x自然语言/gm通常/d是/vshi指/v一种/nz自然地/nz随/p文化/n演化/gi的/ude1语言/gi。/w泛指/v人类/gi语言/gi,/nz /x汉语/gi、/w英语/nz、/w俄语/n等/udeng都/d是/vshi自然语言/gm,/nz /x例如/v在/p上面/f提到/v的/ude1将/d大象/n装/v冰箱/n里/f的/ude1描述/gi方式/n就是/v自然语言/gm。/w  /x流程图/gi:/w /x千言万语/n不如一/nz张/q图/gi,/nz /x在/p描述/gi较为/d复杂/a的/ude1算法/gi时/qt,/nz /x使用/gi自然语言/gm描述/gi时/qt可能会/nz出现/v表达/gi的/ude1歧义/n、/w叙述/v不够/a清晰/a等/udeng各种/rz问题/gi。/w  /x以/p特定/b的/ude1图形符号/gi加上/v说明/v,/nz /x用于/v表示/v算法/gi的/ude1图/gi,/nz /x称为/v流程图/gi。/w /x流程图/gi的/ude1优势/gi在于/v能够/v直观/a地/ude2描述/gi一个/mq工作/gi过程/gi的/ude1具体步骤/nz。/w   /x伪/ag代码/gi:/w /x伪/ag代码/gi是/vshi用/p介于/v自然语言/gm和/cc计算机语言/gi之间/f的/ude1文字/gi和/cc符号/gi(/nz包括/v数学/gi符号/gi)/nz来/vf描述/gi算法/gi的/ude1一种/nz方法/gi,/nz /x伪/ag代码/gi也/d有/vyou自己/rr的/ude1语法/gi规则/gi,/nz /x例如/v将/d大象/n装/v冰箱/n用/p伪/ag代码/gi可/v描述/gi为/p:/w /x这里/rzs多/a添加/gi了/ule一个/mq条件/n,/nz /x就是/v先/d判断/gi冰箱门/n是否/v已经/d打开/gi,/nz /x若/c未/d打开/gi就/d按照/p常规/n的/ude1三步/nz将/d大象/n装进去/v,/nz /x否则/c只/d需要/v将/d大象/n装进去/v然后/c再/d关上/v冰箱门/n即可/v。/w  /x计算机语言/gi:/w /x例如/v使用/gic语言/gi、/wc/nz、/wjava/gi、/wpython/gi等/udeng各种/rz计算机语言/gi都/d可以/v用来/v描述/gi算法/gi,/nz /x以/pc语言/gi为/p例/n:/w3./nz /x算法/gi的/ude1特性/gi /x一个/mq完整/a的/ude1算法/gi必须/d要/v具备/v以下/f5/nz点/gi重要/a特性/gi才能/n说/v是/vshi一个/mq可行/a的/ude1算法/gi:/w  /x1./nz /x有穷性/n:/w /x指/v算法/gi能够/v在/p人们/n能够/v接受/gi的/ude1一定/b的/ude1时间/gi内/f结束/v,/nz /x不会/v永远/d无止境/l的/ude1执行/v下去/vf;/nz   /x2./nz /x确定性/n:/w /x指/v算法/gi中的/v每/rz一条/nz指令/gi都/d具有/v明确/a的/ude1含义/n,/nz /x在/p人们/n的/ude1理解/gi上/f不会/v产生/v二义性/n,/nz /x对于/p相同/a的/ude1输入/v,/nz /x只能/v得出/v相同/a的/ude1输出/gi;/nz   /x3./nz /x可行性/gi:/w /x算法/gi中/f描述/gi的/ude1操作/gi都/d是/vshi可以/v通过/p已经/d实现/gi的/ude1基本/a运算/gi执行/v有/vyou限次/nz来/vf实现/gi的/ude1;/nz  /x4./nz /x输入/v:/w /x一个/mq算法/gi有/vyou或/c多/a个/q输入/v,/nz /x所谓/v0/nz个/q输入/v是/vshi指/v算法/gi本身/rz定出/v了/ule初始/b条件/n;/nz  /x5./nz /x一个/mq算法/gi有/vyou一个/mq或/c多/a个/q输出/gi,/nz /x以/p反映/v对/p输入/v数据/gi加工/gi后/f的/ude1结果/n,/nz /x没有/v输出/gi的/ude1算法/gi是/vshi毫无意义/nz的/ude1。/w4./nz /x算法/gi的/ude1性能/gi标准/gi /x对/p算法/gi设计/gi的/ude1要求/n,/nz /x在/p不同/a的/ude1场合/n以及/cc不同/a的/ude1应用领域/l要求/n是/vshi不同/a的/ude1,/nz /x通常/d来说/uls一/nz些/q较为/d常见/a的/ude1要求/n如下/vi:/w  /x1./nz /x正确性/gi:/w /x算法/gi应当/v满足/v具体/a问题/gi的/ude1要求/n;/nz  /x2./nz /x可计算性/gm:/w /x算法/gi不能/v靠/v直觉/n或/c经验/gi进行/vn描述/gi,/nz /x算法/gi的/ude1每一步/d必须/d是/vshi严定义/nz的/ude1,/nz /x必须/d能够/v一步/nz步/qv精确/gi执行/v;/nz  /x3./nz /x可读性/n:/w /x算法/gi的/ude1可读性/n是/vshi指/v一个/mq算法/gi可供/v人们/n阅读/gi的/ude1容易/ad程度/n,/nz /x不易/ad读懂/v的/ude1算法/gi易于/vd隐藏/v错误/gi,/nz /x难以/d进行/vn实现/gi和/cc修改/gi;/nz  /x4./nz /x健壮性/nz:/w /x输入/v非法/b数据/gi时/qt程序/gi能够/v做出/v反应/vn进行/vn处理/vn,/nz /x而/cc不至于/d让/v整个/b系统/gi崩溃/vi掉/v。/w  /x5./nz /x通用性/n:/w /x设计/gi的/ude1算法/gi应该/v具有/v一般性/n,/nz /x不能/v仅仅/d对于/p某/rz一个/mq数/n才能/n使用/gi;/nz  /x6./nz /x高效性/n:/w /x问题/gi解决/v速度/n越快越好/nz,/nz /x占用/v资源/gi越少/nz越好/d,/nz /x对于/p同一个/b问题/gi具有/v多/a种/q算法/gi的/ude1情况下/nz应该/v优先选择/v效率高/nz,/nz /x占用/v资源/gi少/a的/ude1算法/gi。/w5./nz /x算法/gi的/ude1度量/v /x数据结构/gi中/f,/nz /x在/p算法/gi是/vshi正确/a的/ude1前提/n下/f,/nz /x评价/gi一个/mq算法/gi主要/b有/vyou两/nz个/q指标/gi:/w /x算法/gi的/ude1时间复杂度/gi与/cc空间/n复杂度/gi。/w  /x1./nz /x时间复杂度/gi  /x时间复杂度/gi是/vshi指/v将/d算法/gi通过/p编码/gi实现/gi后/f在/p计算机/gi中/f运行/gi所/usuo消耗/gi的/ude1时间/gi。/w从/p理论上/nz来说/uls,/nz /x程序/gi在/p运行/gi时/qt所/usuo消耗/gi的/ude1时间/gi是/vshi不能/v算/v出来/vf的/ude1,/nz /x必须/d上机/vi运行/gi测试/gi才能/n知道/v。/w但是/c全/a部上机/nz测试/gi费时费力/n,/nz /x正常/a的/ude1情况下/nz是/vshi不会/v这么/rz做/v的/ude1,/nz /x因为/c我们/rr只需/v推算出/v哪种/ry算法/gi运行/gi所用/b的/ude1时间/gi少/a就/d可以/v了/ule。/w /x通常/d来说/uls,/nz /x算法/gi中/f基本操作/n重复/gi执行/v的/ude1次数/gi是/vshi问题/gi规模/gin/nz的/ude1某个/rz函数/gif/nz(/nzn/nz)/nz,/nz /x算法/gi的/ude1时间/gi量/n记作/nz:/w  /x它/rr表示/v随/p问题/gi规模/gin/nz的/ude1增大/v,/nz /x算法/gi执行/v时间/gi的/ude1增长率/n和/ccf/nz(/nzn/nz)/nz的/ude1增长率/n相同/a,/nz /x称作/v算法/gi的/ude1渐进/v时间复杂度/gi,/nz /x简称/v时间复杂度/gi。/w  /x随着/p模块/gin/nz的/ude1增大/v,/nz /x算法/gi执行/v的/ude1时间/gi的/ude1增长率/n和/ccf/nz(/nzn/nz)/nz的/ude1增长率/n成正比/nz,/nz /x所以/c当/pn/nz一定/b时/qt,/nz f/nz(/nzn/nz)/nz越/d小/a,/nz /x算法/gi的/ude1时间复杂度/gi越/d低/a,/nz /x算法/gi的/ude1效率/gi越高/d。/w   /x在/p一个/mq算法/gi中/f,/nz /x人们/n是/vshi按/p算法/gi中/f重复/gi执行/v次数/gi最多/ad的/ude1语句/gi来/vf确定/v算法/gi的/ude1时间复杂度/gi。/w语句/gi的/ude1频度/n指/v的/ude1就是/v该/rz语句/gi重复/gi执行/v的/ude1次数/gi。/w /x时间/gi的/ude1复杂度/gi一般/ad用/p数量级/n来/vf表示/v。/w常用/a的/ude1时间复杂度/gi有/vyou:/w   o/nz(/nz1/nz)/nz、/wo/nz(/nzlog/gi2/nzn/nz)/nz、/wo/nz(/nzn/nz)/nz、/wo/nz(/nzn/nz*/nzlog/gi2/nzn/nz)/nz、/wo/nz(/nzn/nz2/nz)/nz、/wo/nz(/nz2/nz^/nzn/nz)/nz     /x举例/gi:/w   /x1./nz for/nz循环/gi嵌套/v:/w   /x整个/b算法/gi的/ude1执行/v时间/gi和/cc基本操作/n重复/gi执行/v的/ude1次数/gin/nz3/nz成正比/nz,/nz /x记为/v:/w t/nz(/nzn/nz)/nz /x=/nz o/nz(/nzn/nz^/nz3/nz)/nz  /x2./nz /x空间/n复杂度/gi  /x算法/gi空间/n复杂度/gi是/vshi指/v将/d算法/gi实现/gi成/v程序/gi后/f,/nz /x在/p计算机/gi运行/gi时/qt所/usuo占/v的/ude1存储空间/gi的/ude1大小/n。/w这个/rz存储空间/gi一般/ad包括/v以下/f几个/nz方面/n的/ude1内容/gi:/w /x指令/gi、/w常量/gi、/w变量/gi、/w外部/f输入/v、/w辅助空间/gi。/w    /x将/d这/rzv几个/nz内容/gi划分/v两/nz个/q部分/n,/nz /x静态/gi空间/n和/cc固定/a空间/n:/w   /x①/nz./nz /x固定/a部分/n:/w /x主要/b包括/v指令/gi空间/n、/w数据/gi空间/n(/nz常量/gi、/w简单/a变量/gi)/nz等/udeng所/usuo占/v的/ude1空间/n。/w这/rzv部分/n属于/v静态/gi空间/n;/nz　　/nz  /x②/nz./nz /x可变/vn空间/n:/w /x这/rzv部分/n空间/n的/ude1主要/b包括/v动态分配/l的/ude1空间/n,/nz /x以及/cc递/v归栈/nz所需/nz的/ude1空间/n等/udeng。/w这/rzv部分/n的/ude1空间/n大小/n与/cc算法/gi有关/vn。/w  /x一个/mq算法/gi所需/nz的/ude1存储空间/gi用/pf/nz(/nzn/nz)/nz表示/v。/w　　/nz /x其中/rzn/nz为/p问题/gi的/ude1规模/gi,/nz s/nz(/nzn/nz)/nz表示/v空间/n复杂度/gi。/w  /x举例/gi:/w   /x一维/n数组/gi a/nz[/nzn/nz]/nz /x的/ude1空间/n复杂度/gi为/po/nz(/nzn/nz)/nz /x;/nz   /x二维数/nz组/n a/nz[/nzm/nz]/nz[/nzn/nz]/nz /x的/ude1空间/n复杂度/gi为/p o/nz(/nzm/nz*/nzn/nz)/nz。/w